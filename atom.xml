<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XElengo&#39;s blog</title>
  <subtitle>从今天起，立志改变</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xelengo.me/"/>
  <updated>2018-09-07T15:44:52.891Z</updated>
  <id>http://xelengo.me/</id>
  
  <author>
    <name>Xulinhu</name>
    <email>xelengo2017@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git 配置及基本操作</title>
    <link href="http://xelengo.me/2018/09/07/20180907_1/"/>
    <id>http://xelengo.me/2018/09/07/20180907_1/</id>
    <published>2018-09-07T04:19:53.310Z</published>
    <updated>2018-09-07T15:44:52.891Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>debian 下 安装 ： <code>sudo apt-get install git</code><br>windows 下： 下载安装包进行安装<br>安装完后打开<code>GitBash</code>进行账户设置：<br>设置用户名，邮箱<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user<span class="selector-class">.name</span> xlh</div><div class="line">$ git config --global user<span class="selector-class">.email</span> <span class="string">"xlhhaha@gmail.com"</span></div></pre></td></tr></table></figure></p>
<p>–global 标识这台电脑上的所有git仓库都会使用这个账号。 （全局设置）</p>
<h3 id="必要配置："><a href="#必要配置：" class="headerlink" title="必要配置："></a>必要配置：</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mkdir</span> gittest1   <span class="comment">//  创建一个文件夹，作为版本库</span></div><div class="line"><span class="keyword">cd</span> gittest1</div><div class="line"><span class="keyword">pwd</span> <span class="comment">// 显示当前目录</span></div><div class="line">git init <span class="comment">// 初始化仓库，会在所选目录下创建 .git 隐藏文件夹</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>1.让git显示颜色，让命令输出看起来更醒目<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> color.ui <span class="literal">true</span>`</div></pre></td></tr></table></figure></p>
<p><code>--global</code>   //  指定为全局配置 ，不加这个参数则配置只在当前仓库生效</p>
<p>2.忽略指定文件：<br>在工作区创建一个<code>.gitignore</code> 文件, 然后把忽略的文件名,或文件类型，或文件夹 填进去，即可。 <code>.gitignore</code>文件本身要加入版本控制。 如：database.db, <em>.so, </em>.class, dist<br>想要强制添加某个已被忽略的文件：<code>git add -f origin aaa.class</code></p>
<p>3.设置忽略文件<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git<span class="built_in"> check-ignore </span> //  检查忽略文件中的某个规则在忽略文件中的哪个位置</div></pre></td></tr></table></figure></p>
<pre><code>$ git chexk-ignore -v aaa.class
.gitignore:3:*.class   //  结果可以看出，是在第三行忽略了这类文件。
</code></pre><p>4.配置别名<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">例：git config --<span class="keyword">global</span> <span class="keyword">alias</span> st status  <span class="comment">//  设置 status 用 st 代替</span></div><div class="line">则：git status ⇒  git st</div><div class="line"></div><div class="line"><span class="comment">// 常用别名：</span></div><div class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span> co checkout</div><div class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span> ci commit   <span class="comment">//  则提交可以写成：git ci ‘bala bala bala ...’</span></div><div class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span> br branch</div><div class="line"><span class="comment">// 其他别名参考：</span></div><div class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span> unstage ‘reset HEAD’  <span class="comment">// 则 git unstage aaa.js 相当于 git reset HEAD aaa.js</span></div><div class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span> last ‘<span class="keyword">log</span> <span class="number">-1</span>’   <span class="comment">//  git last   显示最后一次提交信息</span></div><div class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span> lg “<span class="keyword">log</span> --<span class="keyword">color</span> --graph --pretty=formart:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset<span class="string">' --abbrev-commit’”    //  美化 log 输出</span></div></pre></td></tr></table></figure></p>
<pre><code>每个仓库的配置文件 在.gIt/config文件中。里边包含了这个仓库的基本信息，远程仓库，分支信息，别名设置 等，要编辑配置在这个文件里编辑即可。
当前用户的配置文件在用户主目录下的一个隐藏文件.gitconfig中。别名也可以在这里配置，改错了可以删掉重新通过命令配置。
</code></pre><hr>
<h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>1.在仓库文件夹下创建一个文件，如： test.txt，并写入一些内容<br>2.<code>git add test.txt</code> // 将文件加入版本库管理, 多个文件一起加入： <code>git add a.txt b.txt</code><br>3.<code>git commit -m &#39;add a file&#39;</code> // 提交修改 <code>-m</code> 后边是填入本次修改的备注<br>4.<code>git status</code> // 查看当前版本库状态<br>5.<code>git diff test.txt</code> // 查看仓库最新版本与本地当前文件之间的差异（本地做了哪些更改（未提交））<br>6.<code>git log</code> 查看仓库提交历史记录 <code>--pretty=oneline</code> // 简化每条历史记录为一行<br>7.<code>git reset --hard HEAD^</code> 回退到上个版本 ，几个<code>^</code>就是回退到倒数第几个版本，往上指定(100)个版本：<code>HEAD~100</code>，回退到指定版本号的版本：<code>git reset --hard xxxxx</code>, 可以往前，可以往后。<br>8.<code>git reflog</code> 查看自己的提交命令历史记录及版本号<br>9.<code>git diff HEAD -- test.txt</code> 查看工作区（本地当前）和版本库最新版本的区别<br>    <code>git diff commit_id_1 commit_id_2</code> 比较两个版本之间的差异<br>    <code>git diff</code> 比较 工作区（当前打开改文件看到的状态）与暂存区（add后 commit前 ）区别<br>    <code>git diff -staged</code> 比较暂存与仓库的区别<br>10.<code>git checkout -- test.txt</code> 撤销更改, 如果文件修改后没有add,就会回退到仓库最新版，修改后有           add,没有commit,就回退到add的版本;  如果已经add过，没有commit;又想回退到仓库最新版，用：<br>     <code>git reset HEAD test.txt</code>, 即可撤销掉add, 本地文件为add前的文件，再执行<br>     <code>git checkout -- text.txt</code> 用仓库最新版覆盖本地。<br>11.删除文件：<br>(1).  WINDOWS系统中，在本地删除要删除的文件，<br>(2).  <code>git rm test.txt</code> 或 <code>git add test.txt</code>，<br>本地删掉文件后要从仓库恢复文件：<code>git checkout text.txt</code><br>12.<code>cat xxxx.txt</code>   //  win git Bash 查看文本文件内容 </p>
<hr>
<h3 id="与远程库协作"><a href="#与远程库协作" class="headerlink" title="与远程库协作"></a>与远程库协作</h3><p>13.生成秘钥 安装完git后生成ssh key:  <code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> ,  然后把公钥文件中的内容加到git仓库中。</p>
<p>14.github 上的操作：<br>      把本地库与远程库进行关联：<br>      github创建完空仓库后：<br>(1). 通过命令行从github库克隆出新的仓库：<br>    <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">echo <span class="string">"# testRes2"</span> &gt;&gt; README<span class="selector-class">.md</span></div><div class="line">git init</div><div class="line">git add README<span class="selector-class">.md</span></div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote add origin git@github<span class="selector-class">.com</span>:XElengo/testRes2<span class="selector-class">.git</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<p>(2).通过命令行把 已有的本地库与github仓库进行关联并把本地库的内容上传到github库：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:XElengo/<span class="built_in">test</span>Res2.git</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<p>两个命令原理都一样，都是先在本地的git仓库加文件，再上传到github仓库。<br><code>git push</code> 把当前分支master推送到远程。<br><code>-u</code> 把本地master分支和远程的master分支关联起来。<br><code>git push origin master</code> 把本地指定(master)分支的最新版推送到指定的github(远程(origin))仓库对应的远程分支。</p>
<ul>
<li><p>注意：第一次使用git的clone 或 push 会有一个警告，需要确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。</p>
</li>
<li><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了，这个警告指挥出现一次。</p>
<p>(3). 从远程库把项目导到本地：<br>进入一个文件夹，然后把github仓库的项目克隆下来成为一个本地库：<code>git clone git@github.com:XElengo/test1Res.git</code></p>
</li>
</ul>
<p>15.<code>git remote -m origin</code>   //  本地库与远程库取消关联,在某个本地库文件夹中操作</p>
<p>16.一个本地库可以关联多个远程库，只要给远程库起的本地名字/代号(origin)不一样即可。</p>
<hr>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git checkout -b <span class="built_in">dev</span>   <span class="comment">//  创建dev分支并切换到dev 分支。</span></div><div class="line">git checkout 命令加上 -b 参数表示创建并切换，相当于以下两条命令：</div><div class="line">	git branch <span class="built_in">dev</span>   <span class="comment">// 创建分支</span></div><div class="line">	git checkout <span class="built_in">dev</span>   <span class="comment">// 切换分支</span></div><div class="line"></div><div class="line">git branch   <span class="comment">// 列出所有分支，当前分支前面标有*号。切换分支后的提交都会提交到所选分支。</span></div><div class="line">git merge <span class="built_in">dev</span>   <span class="comment">//  合并指定分支（dev）到当前分支</span></div><div class="line">git branch -d <span class="built_in">dev</span>   <span class="comment">// 删除指定分支</span></div><div class="line">git branch -D <span class="built_in">dev</span>   <span class="comment">// 强制删除指定分支，分支在没有被合并前不允许删除，需要强制删除。</span></div><div class="line">git branch --<span class="built_in">set</span>-upstram-to=origin/<span class="built_in">dev</span> <span class="built_in">dev</span>   <span class="comment">//  指定本地分支与远程分支的关联(名字建议保持一致，但允许不一样)，</span></div><div class="line"><span class="comment">// 用于 远程库已经有了一个分支，你又在本地新建了一个同名分支，这时拉取(pull)远程代码到本地会冲突，需要进行关联。关联后如有冲突继续解决冲突，然后再进行push。</span></div></pre></td></tr></table></figure>
<ul>
<li>在不同分支对同一文件分别提交修改，再执行merge会出现冲突，出现冲突时，用 <code>git status</code> 可以查看冲突信息，修复冲突后再进行提交和合并。</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> <span class="comment">--graph --pretty=oneline --abbrev-commit   // 以图形化方式展示分支合并图</span></div></pre></td></tr></table></figure>
<p><code>git merge</code> 这种方式提交，默认会在删除分支后丢掉你分支信息<br><code>git merge --no-ff -m ”commit mark” dev</code>  // 这种提交，参数(<code>--no-ff</code>)禁用<code>Fast forward</code>,这样能在提交历史中保留分支信息<br><code>git stash</code>   //  暂存当前分支做的尚未提交的本地修改，并把当前工作区的文件恢复到修改之前的状态。<br><code>git stash list</code>  // 查看本地暂存列表<br><code>git stash apply</code>   // 从 stash 恢复暂存的修改（工作进度），stash 中的 内容不会被删除，<br><code>git stash drop</code>   // 删除stash<br><code>git stash pop</code>  // 从stash恢复修改并删除stash,相当于上面两句的集合。<br><code>git stash apply stash@{0}</code>   // 当有多个版本的stash时，恢复到指定版本的stash。<br>git 建立一个新的<strong>bug分支</strong>，通常命名为     <code>issue</code>-101<br>为了开发一个新功能而建立的分支通常命名为 <code>feature</code>-newFea,开发完成后合并，删除该分支。<br><code>git remote</code> 查看远程库信息<br><code>git remote -v</code> 显示更详细的信息</p>
<pre><code>origin  git@github.com:XElengo/test1Res.git (fetch)
origin  git@github.com:XElengo/test1Res.git (push)
</code></pre><p>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。</p>
<ul>
<li><p>要推送哪些本地分支到远程库完全由自己决定，通常master要时刻与远程库同步，dev作为开发主分支也要与远程库保持同步，bug分支一般不需要推送到远程仓库，feature分支如果多人合作开发，就要保持同步，如果单独开发，就等开发完毕再推送到远程库。</p>
</li>
<li><p>如果多个人在不同的客户端分别修改了同一个文件，第二个人提交推送时会产生冲突，需要先把远程库最新版本拉下来，在本地解决冲突后再提交到远程库：</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git pull   <span class="comment">//  从远程库拉取最新版代码</span></div><div class="line">git push origin branch-<span class="keyword">name</span>   <span class="comment">//  推送本地分支到远程库</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>git rebase</code>  //  把本地未push的分叉的提交历史整理成一条直线，使提交历史更美观(变基)。</p>
<pre><code>注意：只对尚未推送或分享给别人的本地修改执行变基操作清理历史；
     从不对已推送至别处的提交执行变基操作
</code></pre><hr>
<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">tag</span> <span class="title">v1</span>.<span class="number">0</span>   // 在某分支(<span class="literal">master</span>)中把当前版本命名成一个标签，便于以后查找这个节点的文件。</div><div class="line">git <span class="keyword">tag</span>   <span class="title">//  查看所有的标签，标签按照字母排序</span></div><div class="line">git <span class="keyword">tag</span> <span class="title">v0</span>.<span class="number">9</span> f010234   //  把过去的某个版本打一个标签，指定提交id，给那次提交打一个标签。</div><div class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v0.<span class="number">1</span> -m “<span class="keyword">version</span> <span class="number">0.1</span> released” <span class="number">0</span>x01234   //  -a 指定标签名，-m 指定说明文字</div><div class="line">git show v1.<span class="number">0</span>   //  查看某个版本标签信息</div><div class="line">git <span class="keyword">tag</span> <span class="title">-d</span> v0.<span class="number">1</span>   //  删除某个标签</div><div class="line">git push origin <span class="tag">&lt;tagname&gt;</span>   //  推送某个标签到远程仓库</div><div class="line">git push origin --tags   //  推送所有尚未推送到远程仓库的标签</div></pre></td></tr></table></figure>
<p>要删除远程仓库的某个标签：<br>先删除本地：<code>git tag -d v0.1</code><br>再删除远程：<code>git push origin :refs/tags/v0.1</code><br>(两条命令没有必然联系)</p>
<hr>
<h4 id="搭建git服务器"><a href="#搭建git服务器" class="headerlink" title="搭建git服务器"></a>搭建git服务器</h4><p>debian/ubuntu:</p>
<p>1.安装git : <code>sudo apt-get install git</code><br>2.创建用户： <code>sudo adduser git</code><br>3.把所有用户的公钥导入到 <code>/home/git/.ssh/authorized_keys</code>, 一行一个公钥。<br>如果人数较少，可以使用这种方法，如果有几百人，可以使用 Gitosis管理公钥。<br>4.初始化git仓库：<br>选定一个目录作为git仓库,如：<code>/srv/sample.git</code>,<br>在 /srv目录下输入命令： <code>sudo git init --bare sample.git</code><br>git会创建一个裸仓库，没有工作区，只能上传文件和共享，所以不允许用户直接登录进服务器去改工作区的文件，且通常以.git结尾。<br>5.把仓库文件所有权改为git:  <code>sudo chown -R git:git sample.git</code><br>6.禁用shell登录： cd进入<code>/etc/passwd</code> 文件，修改以 git 用户开头的一行，如：<br>    <code>git:x:1001:1001:,,,:/home/git:/bin/bash</code><br>改为：<br>    <code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code><br>使git 用户只能使用git命令。<br>到此，远程仓库就搭建好了。</p>
<p>7.在自己的客户端电脑上克隆远程仓库：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git<span class="variable">@server</span><span class="symbol">:/srv/sample</span>.git</div></pre></td></tr></table></figure></p>
<p><strong>其他：</strong></p>
<ul>
<li>git 仓库默认是不支持权限控制的，但是因为git支持钩子（<code>hook</code>）,所以，可以在服务器端编写脚本达到控制提交等操作，可以使用<code>Gitolite</code>这样的小工具。</li>
</ul>
<hr>
<h3 id="linux-vim-常用命令"><a href="#linux-vim-常用命令" class="headerlink" title="linux vim 常用命令"></a>linux vim 常用命令</h3><p><code>vi readme.txt</code> 进入VIM编辑器,可以新建文件也可以修改文件<br>如果这个文件以前是没有的，则为新建，则下方有提示为新文件。</p>
<p>按ESC键 跳到命令模式，然后：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">w</span> 保存文件但不退出<span class="keyword">vi</span></div><div class="line">:<span class="keyword">w</span> <span class="keyword">file</span> 将修改另外保存到<span class="keyword">file</span>中，不退出<span class="keyword">vi</span></div><div class="line">:w! 强制保存，不推出<span class="keyword">vi</span></div><div class="line">:<span class="keyword">wq</span> 保存文件并退出<span class="keyword">vi</span></div><div class="line">:wq! 强制保存文件，并退出<span class="keyword">vi</span></div><div class="line">q: 不保存文件，退出<span class="keyword">vi</span></div><div class="line">:q! 不保存文件，强制退出<span class="keyword">vi</span></div><div class="line">:e! 放弃所有修改，从上次保存文件开始再编辑</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;debian 下 安装 ： &lt;code&gt;sudo apt-get install git&lt;/code&gt;&lt;br&gt;windows 下： 下载安装包进行安装&lt;br&gt;安装完后打开&lt;code&gt;GitBash&lt;/code&gt;进行账户设置：&lt;br&gt;设置用户名，邮箱&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user&lt;span class=&quot;selector-class&quot;&gt;.name&lt;/span&gt; xlh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user&lt;span class=&quot;selector-class&quot;&gt;.email&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;xlhhaha@gmail.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;–global 标识这台电脑上的所有git仓库都会使用这个账号。 （全局设置）&lt;/p&gt;
&lt;h3 id=&quot;必要配置：&quot;&gt;&lt;a href=&quot;#必要配置：&quot; class=&quot;headerlink&quot; title=&quot;必要配置：&quot;&gt;&lt;/a&gt;必要配置：&lt;/h3&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;mkdir&lt;/span&gt; gittest1   &lt;span class=&quot;comment&quot;&gt;//  创建一个文件夹，作为版本库&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; gittest1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 显示当前目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git init &lt;span class=&quot;comment&quot;&gt;// 初始化仓库，会在所选目录下创建 .git 隐藏文件夹&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="git" scheme="http://xelengo.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>jsp页面列表 一列变多列</title>
    <link href="http://xelengo.me/2017/12/16/20171216_1/"/>
    <id>http://xelengo.me/2017/12/16/20171216_1/</id>
    <published>2017-12-16T09:49:41.194Z</published>
    <updated>2017-12-16T13:07:36.633Z</updated>
    
    <content type="html"><![CDATA[<p>在这里，我展示了一个怎么把原来只有一列的表格变成一行放三个，变成三列进行展示的方法，适用于你的table只有一至三列数据（总之表格的列变少了会很奇怪，但是又必须用表格），但是需要把数据拆成更多列进行展示的情况。</p>
<a id="more"></a>
<p>前段时间在做项目的时候有一个需求，本来是一个只有一个参数需要展示的list,理所当然的做成了一列进行展示，如图：（没毛病吧）</p>
<p><img src="/assets/img/blogimg/20171216/2017-12-15_135244.png" alt="相对"></p>
<p>然后也太不美观了，能不能把一列变成多列进行展示呢？通过自己的构思，加上在网上查找实现方法，最后在CSDN博客（当时忘记收藏了，后来再找找不到了）上找到了一个写法，非常好用：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span><span class="template-variable">&#123;list&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"test"</span> <span class="attr">varStatus</span>=<span class="string">"status"</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span><span class="template-variable">&#123;status.count%3==1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$<span class="template-variable">&#123;test.id&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span><span class="template-variable">&#123;status.count%3==0&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"v_count"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;status.count&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></div><div class="line">		<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span><span class="template-variable">&#123;v_count%3==1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span><span class="template-variable">&#123;v_count%3==2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果如图：</p>
<p><img src="/assets/img/blogimg/20171216/2017-12-15_135327.png" alt="相对"></p>
<p>如果需要循环的list只有两个值，就会变成下面这样：</p>
<p><img src="/assets/img/blogimg/20171216/2017-12-15_135349.png" alt="相对"></p>
<p>如果最后一行占不满，会是这样：</p>
<p><img src="/assets/img/blogimg/20171216/2017-12-15_135410.png" alt="相对"></p>
<p>有了上面的方法，那相应的，一列变两列，两列变四列，都不在话下啦。</p>
<p>示例：两列变四列：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"contentTable"</span> &gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">thead</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span><span class="template-variable">&#123;list&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"test"</span> <span class="attr">varStatus</span>=<span class="string">"status"</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span><span class="template-variable">&#123;status.count%2==1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span>				</div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					$<span class="template-variable">&#123;test.id&#125;</span><span class="xml"></span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">					$<span class="template-variable">&#123;test.name&#125;</span><span class="xml"></span></div><div class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span><span class="template-variable">&#123;status.count%2==0&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span> =<span class="string">"v_count"</span> <span class="attr">value</span>=<span class="string">"$</span></span><span class="template-variable">&#123;status.count&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></div><div class="line">		<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span><span class="template-variable">&#123;v_count%2==1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>真的不是我不放这种写法的源博客，是真的找不到。。。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里，我展示了一个怎么把原来只有一列的表格变成一行放三个，变成三列进行展示的方法，适用于你的table只有一至三列数据（总之表格的列变少了会很奇怪，但是又必须用表格），但是需要把数据拆成更多列进行展示的情况。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://xelengo.me/tags/java/"/>
    
      <category term="学习" scheme="http://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="html" scheme="http://xelengo.me/tags/html/"/>
    
      <category term="jsp" scheme="http://xelengo.me/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>这次没有争吵，没有拉黑，但我们都懂；从此再无交集，这应该可以算是最好的离开方式</title>
    <link href="http://xelengo.me/2017/06/04/20170604_2/"/>
    <id>http://xelengo.me/2017/06/04/20170604_2/</id>
    <published>2017-06-04T13:51:02.326Z</published>
    <updated>2017-12-10T10:01:48.282Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>人，最好的心态是平静；最好的状态是简单；最好的感觉是自由；最好的心情是童心。</li>
</ul>
<ul>
<li>小时候，以为人生就是琴棋书画诗酒花，长大后才发现，是柴米油盐酱醋茶。</li>
</ul>
<p><img src="/assets/img/blogimg/20170604/1.jpg" alt="相对"></p>
<ul>
<li>最暖心的感觉莫过于我随随便便说的话；有人认真的把它听了，而且还做了。</li>
</ul>
<a id="more"></a>
<ul>
<li>我们总是在用最大的努力去做一些根本就不适合我们的事，只因身边的人都说那是好的。</li>
</ul>
<ul>
<li>珍惜那些朋友圈里不聊天，却天天给你点赞的人，不是因为你的文章写的多好；只是因为这个世界上还有一种感情、叫关注。</li>
</ul>
<ul>
<li>这次没有争吵，没有拉黑，但我们都懂；从此再无交集，这应该可以算是最好的离开方式。</li>
</ul>
<p><img src="/assets/img/blogimg/20170604/3.jpg" alt="相对"></p>
<ul>
<li>总会有些日子里，风有点大，雨有点急，天有点黑，人有点累，而脚下的砂石有点多。或许不知道怎么让自己安然走过这一段路，但我想，只要还想走下去，经历的一切，最终都只不过过眼云烟。</li>
</ul>
<p><img src="/assets/img/blogimg/20170604/2.jpg" alt="相对"></p>
<ul>
<li>人生本来就没有相欠；别人对你付出；是因为别人喜欢。你对别人付出，是因为自己甘愿；情出自愿；事过无悔。</li>
</ul>
<ul>
<li>身材不好就去锻炼，没钱就努力去赚。别把、窘境迁怒于别人，唯一可以抱怨的，只是不够努力的自己。</li>
</ul>
<ul>
<li>不要轻易让自己掉眼泪，你笑的时候，全世界跟着笑。但你哭的时候，全世界只有你一个人在哭。</li>
</ul>
<ul>
<li>会有那么一天，我也会放下如今的执着和不舍，带着稍许的遗憾过着没有你的新生活。</li>
</ul>
<ul>
<li>偶尔对自己好些，偷个小懒，抽点小疯，花点小钱，不算伤天害理。</li>
</ul>
<ul>
<li>好脾气的人不轻易发火，不代表不会发火；性格好的人只是装糊涂，不代表没有底线。</li>
</ul>
<ul>
<li>易怒的人都很敏感，敏感的人都很好强，好强的人都很固执，固执的人都很单纯，单纯的人都很天真，天真的人都缺心眼，这才是真相。</li>
</ul>
<ul>
<li>现在的“晚安”的意思就是，你别和我瞎逼逼了，我现在要继续玩手机了。相互道一句晚安，然后各自熬夜。</li>
</ul>
<hr>
<p><br></p>
<p>转自网络，联系侵删</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;人，最好的心态是平静；最好的状态是简单；最好的感觉是自由；最好的心情是童心。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;小时候，以为人生就是琴棋书画诗酒花，长大后才发现，是柴米油盐酱醋茶。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/blogimg/20170604/1.jpg&quot; alt=&quot;相对&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最暖心的感觉莫过于我随随便便说的话；有人认真的把它听了，而且还做了。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>python内置函数</title>
    <link href="http://xelengo.me/2017/06/04/20170604_1/"/>
    <id>http://xelengo.me/2017/06/04/20170604_1/</id>
    <published>2017-06-04T13:49:32.971Z</published>
    <updated>2017-12-10T10:02:18.055Z</updated>
    
    <content type="html"><![CDATA[<p><a href="//docs.python.org/3/library/functions.html">Python内置函数官方文档</a></p>
<p>Python的内置函数大体如下，有些函数可能因为版本不同略有变化。但是作为参考还是可以的。</p>
<a id="more"></a>
<p>（注意：函数中的[ … ]  表示可选参数，使用中需要去掉[ ]。）</p>
<p>一、数学运算类</p>
<table border="0" style="border-collapse: collapse; width: 655px;" cellpadding="1" cellspacing="1"><br><tr style="height: 46.5pt;"><br><td style="height: 46.5pt; width: 185pt;" height="62" width="246">abs(x)</td><br><td style="border-left: none; width: 219pt;" width="292">求绝对值<br> 1、参数可以是整型，也可以是复数<br> 2、若参数是复数，则返回复数的模</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">complex([real[, imag]])</td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">创建一个复数</td><br></tr><br><tr style="height: 27.0pt;"><br><td style="height: 27.0pt; border-top: none; width: 185pt;" height="36" width="246">divmod(a, b)</td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">分别取商和余数<br> 注意：整型、浮点型都可以</td><br></tr><br><tr style="height: 33.75pt;"><br><td style="height: 33.75pt; border-top: none; width: 185pt;" height="45" width="246">float([x])</td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">将一个字符串或数转换为浮点数。如果无参数将返回0.0</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">int([x[, base]]) </td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">将一个字符转换为int类型，base表示进制</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">long([x[, base]]) </td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">将一个字符转换为long类型</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">pow(x, y[, z]) </td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">返回x的y次幂</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">range([start], stop[, step]) </td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">产生一个序列，默认从0开始</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">round(x[, n]) </td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">四舍五入</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">sum(iterable[, start]) </td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">对集合求和</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">oct(x)</td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">将一个数字转化为8进制</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">hex(x)</td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">将整数x转换为16进制字符串</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">chr(i)</td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">返回整数i对应的ASCII字符</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">bin(x)</td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">将整数x转换为二进制字符串</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 185pt;" height="18" width="246">bool([x])</td><br><td style="border-top: none; border-left: none; width: 219pt;" width="292">将x转换为Boolean类型</td><br></tr><br><br></table>

<p>二、集合类操作</p>
<table border="0" style="border-collapse: collapse; width: 655px;" cellpadding="1" cellspacing="1"><br><br><tr style="height: 27.0pt;"><br><td style="height: 27.0pt; width: 188pt;" height="36" width="250">basestring()</td><br><td style="border-left: none; width: 304pt;" width="405">str和unicode的超类<br> 不能直接调用，可以用作isinstance判断</td><br></tr><br><tr style="height: 29.25pt;"><br><td style="height: 29.25pt; border-top: none; width: 188pt;" height="39" width="250">format(value [, format_spec])</td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">格式化输出字符串<br> 格式化的参数顺序从0开始，如“I am {0},I like {1}”</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">unichr(i)</td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">返回给定int类型的unicode</td><br></tr><br><tr style="height: 27.0pt;"><br><td style="height: 27.0pt; border-top: none; width: 188pt;" height="36" width="250">enumerate(sequence [, start = 0])</td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">返回一个可枚举的对象,该对象的next()方法将返回一个tuple</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">iter(o[, sentinel])</td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">生成一个对象的迭代器，第二个参数表示分隔符</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">max(iterable[, args…][key]) </td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">返回集合中的最大值</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">min(iterable[, args…][key])</td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">返回集合中的最小值</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">dict([arg])</td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">创建数据字典</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">list([iterable]) </td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">将一个集合类转换为另外一个集合类</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">set()</td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">set对象实例化</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">frozenset([iterable])</td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">产生一个不可变的set</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">str([object]) </td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">转换为string类型</td><br></tr><br><tr style="height: 27.0pt;"><br><td style="height: 27.0pt; border-top: none; width: 188pt;" height="36" width="250">sorted(iterable[, cmp[, key[, reverse]]]) </td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">队集合排序</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 188pt;" height="18" width="250">tuple([iterable]) </td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">生成一个tuple类型</td><br></tr><br><tr style="height: 54.0pt;"><br><td style="height: 54.0pt; border-top: none; width: 188pt;" height="72" width="250">xrange([start], stop[, step]) </td><br><td style="border-top: none; border-left: none; width: 304pt;" width="405">xrange()函数与range()类似，但xrnage()并不创建列表，而是返回一个xrange对象，它的行为与列表相似，但是只在需要时才计算列表值，当列表很大时，这个特性能为我们节省内存</td><br></tr><br></table>

<p>三、逻辑判断</p>
<table border="0" style="border-collapse: collapse; width: 655px;" cellpadding="1" class="bbcode" cellspacing="1"><br><tr style="height: 30.0pt;"><br><td style="height: 30.0pt; width: 95pt;" height="40" width="126">all(iterable)</td><br><td style="border-left: none; width: 316pt;" width="421">1、集合中的元素都为真的时候为真<br> 2、特别的，若为空串返回为True</td><br></tr><br><tr style="height: 27.0pt;"><br><td style="height: 27.0pt; border-top: none;" height="36">any(iterable)</td><br><td style="border-top: none; border-left: none; width: 316pt;" width="421">1、集合中的元素有一个为真的时候为真<br> 2、特别的，若为空串返回为False</td><br></tr><br><tr style="height: 21.75pt;"><br><td style="height: 21.75pt; border-top: none;" height="29">cmp(x, y)</td><br><td style="border-top: none; border-left: none; width: 316pt;" width="421">如果x &lt; y ,返回负数；x == y, 返回0；x &gt; y,返回正数</td><br></tr><br><br></table>

<p>四、反射</p>
<table border="0" style="border-collapse: collapse; width: 655px;" cellpadding="1" class="bbcode" cellspacing="1"><br><tr style="height: 40.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">callable(object)</td><br><td style="border-left: none; width: 484pt;" width="645">检查对象object是否可调用<br> 1、类是可以被调用的<br> 2、实例是不可以被调用的，除非类中声明了<strong>call</strong>方法</td><br></tr><br><tr style="height: 57.75pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">classmethod()</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">1、注解，用来说明这个方式是个类方法<br> 2、类方法即可被类调用，也可以被实例调用<br> 3、类方法类似于Java中的static方法<br> 4、类方法中不需要有self参数</td><br></tr><br><tr style="height: 70.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">compile(source, filename, mode[, flags[, dont_inherit]])</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">将source编译为代码或者AST对象。代码对象能够通过exec语句来执行或者eval()进行求值。<br> 1、参数source：字符串或者AST（Abstract Syntax Trees）对象。<br> 2、参数 filename：代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。<br> 3、参数model：指定编译代码的种类。可以指定为 ‘exec’,’eval’,’single’。<br> 4、参数flag和dont_inherit：这两个参数暂不介绍</td><br></tr><br><tr style="height: 54.0pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">dir([object])</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">1、不带参数时，返回当前范围内的变量、方法和定义的类型列表；<br> 2、带参数时，返回参数的属性、方法列表。<br> 3、如果参数包含方法<strong>dir</strong>()，该方法将被调用。当参数为实例时。<br> 4、如果参数不包含<strong>dir</strong>()，该方法将最大限度地收集参数信息</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">delattr(object, name)</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">删除object对象名为name的属性</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">eval(expression [, globals [, locals]])</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">计算表达式expression的值</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">execfile(filename [, globals [, locals]])</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">用法类似exec()，不同的是execfile的参数filename为文件名，而exec的参数为字符串。</td><br></tr><br><tr style="height: 40.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">filter(function, iterable)</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645" class="xl68">构造一个序列，等价于[ item for item in iterable if function(item)]<br> 1、参数function：返回值为True或False的函数，可以为None<br> 2、参数iterable：序列或可迭代对象</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">getattr(object, name [, defalut])</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">获取一个类的属性</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">globals()</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">返回一个描述当前全局符号表的字典</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">hasattr(object, name)</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">判断对象object是否包含名为name的特性</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">hash(object)</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">如果对象object为哈希表类型，返回对象object的哈希值</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">id(object)</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">返回对象的唯一标识</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">isinstance(object, classinfo)</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">判断object是否是class的实例</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">issubclass(class, classinfo)</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">判断是否是子类</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">len(s) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">返回集合长度</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">locals() </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">返回当前的变量列表</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">map(function, iterable, …) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645" class="xl68">遍历每个元素，执行function操作</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">memoryview(obj) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">返回一个内存镜像类型的对象</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">next(iterator[, default]) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">类似于iterator.next()</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">object() </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">基类</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">property([fget[, fset[, fdel[, doc]]]]) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">属性访问的包装类，设置后可以通过c.x=value等来访问setter和getter</td><br></tr><br><tr style="height: 18.0pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">reduce(function, iterable[, initializer]) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645" class="xl68">合并操作，从第一个开始是前两个参数，然后是前两个的结果与第三个合并进行处理，以此类推</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">reload(module) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">重新加载模块</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">setattr(object, name, value)</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">设置属性值</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">repr(object) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">将一个对象变幻为可打印的格式</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">slice（）</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">　</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">staticmethod</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">声明静态方法，是个注解</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">super(type[, object-or-type]) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">引用父类</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">type(object)</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">返回该object的类型</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">vars([object]) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">返回对象的变量，若无参数与dict()方法类似</td><br></tr><br><tr style="height: 67.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">bytearray([source [, encoding [, errors]]])</td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">返回一个byte数组<br> 1、如果source为整数，则返回一个长度为source的初始化数组；<br> 2、如果source为字符串，则按照指定的encoding将字符串转换为字节序列；<br> 3、如果source为可迭代类型，则元素必须为[0 ,255]中的整数；<br> 4、如果source为与buffer接口一致的对象，则此对象也可以被用于初始化bytearray.</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 94px; border-top-style: none; width: 300px;">zip([iterable, …]) </td><br><td style="border-top: none; border-left: none; width: 484pt;" width="645">实在是没有看懂，只是看到了矩阵的变幻方面</td><br></tr><br></table>

<p>五、IO操作</p>
<table border="0" style="border-collapse: collapse; width: 655px;" cellpadding="1" class="bbcode" cellspacing="1"><br><tr style="height: 72.75pt;"><br><td style="height: 72.75pt; width: 228pt;" height="97" width="304">file(filename [, mode [, bufsize]])</td><br><td style="border-left: none; width: 573pt;" width="764">file类型的构造函数，作用为打开一个文件，如果文件不存在且mode为写或追加时，文件将被创建。添加‘b’到mode参数中，将对文件以二进制形式操作。添加‘+’到mode参数中，将允许对文件同时进行读写操作<br> 1、参数filename：文件名称。<br> 2、参数mode：’r’（读）、’w’（写）、’a’（追加）。<br> 3、参数bufsize：如果为0表示不进行缓冲，如果为1表示进行行缓冲，如果是一个大于1的数表示缓冲区的大小 。</td><br></tr><br><tr style="height: 27.0pt;"><br><td style="height: 27.0pt; border-top: none; width: 228pt;" height="36" width="304">input([prompt]) </td><br><td style="border-top: none; border-left: none; width: 573pt;" width="764">获取用户输入<br> 推荐使用raw_input，因为该函数将不会捕获用户的错误输入</td><br></tr><br><tr style="height: 27.0pt;"><br><td style="height: 27.0pt; border-top: none; width: 228pt;" height="36" width="304">open(name[, mode[, buffering]]) </td><br><td style="border-top: none; border-left: none; width: 573pt;" width="764">打开文件<br> 与file有什么不同？推荐使用open</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 228pt;" height="18" width="304">print</td><br><td style="border-top: none; border-left: none; width: 573pt;" width="764">打印函数</td><br></tr><br><tr style="height: 13.5pt;"><br><td style="height: 13.5pt; border-top: none; width: 228pt;" height="18" width="304">raw_input([prompt]) </td><br><td style="border-top: none; border-left: none; width: 573pt;" width="764">设置输入，输入都是作为字符串处理</td><br></tr><br></table>

<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p>ps: 我也不知道那么多换行符是哪来的，无奈脸.jpg</p>
<p>来自网络，仅用于本人学习使用。</p>
<p>如有侵权，还望联系删除。</p>
<p>感谢：<a href="//jianfeihit.iteye.com/blog/1835272">python内置函数大全</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;//docs.python.org/3/library/functions.html&quot;&gt;Python内置函数官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python的内置函数大体如下，有些函数可能因为版本不同略有变化。但是作为参考还是可以的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="学习" scheme="http://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python" scheme="http://xelengo.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>什么是MVC</title>
    <link href="http://xelengo.me/2017/05/15/20170515_1/"/>
    <id>http://xelengo.me/2017/05/15/20170515_1/</id>
    <published>2017-05-15T11:03:40.864Z</published>
    <updated>2017-05-15T11:07:57.172Z</updated>
    
    <content type="html"><![CDATA[<p>MVC是一种设计思想、开发模式，即把项目代码分为M（Model 模型层 业务模型）V（View 视图层 用户界面）C（Controller 控制层 控制器）三部分。采用封装（分层）的思想，来降低耦合度，使系统更加灵活，增加程序的扩展性。提高代码的重用性，把业务逻辑代码与视图代码分离，通过控制器连接业务逻辑与视图，使代码结构层次清晰。MVC的缺点是：一个应用程序分成了三个部分开发，增加开发工作量。</p>
<p>而在j2ee开发中，视图层由jsp页面等进行充当，控制层由action（或controller）进行充当，而剩余的如：实体类，service层，dao（Data Access Object 数据访问对象）层（以及mapper,bean,util等）都属于MVC中的模型层。<br>模型层是处理应用程序数据逻辑的部分，负责业务逻辑的处理，在数据库中存取数据。<br>控制层主要的作用是控制页面跳转，负责与用户的交互，从视图读取数据，控制用户输入，并向模型发送数据。<br>视图层在java web程序中由jsp页面充当，负责处理数据显示的部分。通常视图是依据模型数据创建的。</p>
<a id="more"></a>
<h4 id="什么是多例，什么是单例？"><a href="#什么是多例，什么是单例？" class="headerlink" title="什么是多例，什么是单例？"></a>什么是多例，什么是单例？</h4><p>单例就是所有请求都用一个对象来处理，比如常用的service和dao层对象通常就是单例的，多例指每个请求用一个新对象来处理，比如action。</p>
<p>单例模式的对象在整个系统中只有一份，多例模式可以有多个实例。</p>
<p>用单例是因为没必要每个请求都新建一个对象，这样既浪费CPU又浪费内存。</p>
<p>用多例是为了防止并发问题，即一个请求改变了对象的状态，此时对象又处于另一个请求，而之前的请求对象的改变导致了对象对另一个请求做了错误的处理。</p>
<p>用单例和多例的标准只有一个：当对象含有可变状态时（准确的说是该实例在实际应用中状态会改变），则多例，否则单例。</p>
<p>而对于struts2来说，action必须为多例，因为action本身含有请求参数的值，即可变的状态，另外service和dao也不一定是单例，原因同上，容易产生隐藏的bug。而并发的bug很难复现。<br><br></p>
<p><strong>临界资源</strong>：就是公共资源，多个线程间共享的数据称为临界资源（Cricital Resourse），由于是线程调度器负责线程的调度，程序员无法精确控制多线程的交替顺序，因此，多线程对临界资源的访问有时会导致数据的不一致性为。</p>
<h4 id="SpringMVC的控制层为什么要用多例模式，其它层为什么要用单例模式？"><a href="#SpringMVC的控制层为什么要用多例模式，其它层为什么要用单例模式？" class="headerlink" title="SpringMVC的控制层为什么要用多例模式，其它层为什么要用单例模式？"></a>SpringMVC的控制层为什么要用多例模式，其它层为什么要用单例模式？</h4><p>因为控制层（通常叫做Controller或者action）是处理与用户的逻辑交互的，通常伴随着多线程并发访问，那么这个时候控制层就处于一种临界状态，比如用户A改变了action中的某个对象的状态或者属性，此时用户B又调用了这个对象，那这个时候系统很可能会发生逻辑处理异常，返回错误的结果。所以，需要设置控制层action为多例（scope=”prototype”），每当有一个新的访问请求产生的时候，action就会创建一个新的对象进行处理，不同线程访问的是各自的对象，彼此不会发生并发访问的冲突。</p>
<p>而service,dao为什么用单例？就是service主要是用来处理业务逻辑的，action发送过来处理请求和处理参数，service进行相应的业务处理，涉及到数据库操作的时候调用dao层的方法，然后对dao层的返回结果进行处理，再把处理结果返回给action。Dao层也叫数据持久层，dao层接收service层发送过来的请求和参数，然后执行具体的数据库操作，再把处理结果返回给service。通常service，dao都是对具体方法的处理，它的属性通常不会发生改变，只是对具体业务进行处理。所以使用单例进行实现。</p>
<hr>
<p>参考网络上的一些博客，自己又做了一点总结，梳理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MVC是一种设计思想、开发模式，即把项目代码分为M（Model 模型层 业务模型）V（View 视图层 用户界面）C（Controller 控制层 控制器）三部分。采用封装（分层）的思想，来降低耦合度，使系统更加灵活，增加程序的扩展性。提高代码的重用性，把业务逻辑代码与视图代码分离，通过控制器连接业务逻辑与视图，使代码结构层次清晰。MVC的缺点是：一个应用程序分成了三个部分开发，增加开发工作量。&lt;/p&gt;
&lt;p&gt;而在j2ee开发中，视图层由jsp页面等进行充当，控制层由action（或controller）进行充当，而剩余的如：实体类，service层，dao（Data Access Object 数据访问对象）层（以及mapper,bean,util等）都属于MVC中的模型层。&lt;br&gt;模型层是处理应用程序数据逻辑的部分，负责业务逻辑的处理，在数据库中存取数据。&lt;br&gt;控制层主要的作用是控制页面跳转，负责与用户的交互，从视图读取数据，控制用户输入，并向模型发送数据。&lt;br&gt;视图层在java web程序中由jsp页面充当，负责处理数据显示的部分。通常视图是依据模型数据创建的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="java" scheme="http://xelengo.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java项目命名规范(转)</title>
    <link href="http://xelengo.me/2017/03/20/20170320_1/"/>
    <id>http://xelengo.me/2017/03/20/20170320_1/</id>
    <published>2017-03-20T10:31:18.730Z</published>
    <updated>2017-12-10T09:59:14.612Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间对于java命名规范有些生疏了，特地在网络上整理编写了这篇规范，以后为个人的编程做一个参考吧。</p>
<h3 id="一、项目名"><a href="#一、项目名" class="headerlink" title="一、项目名"></a>一、项目名</h3><p>全部小写，比如cms、workdesk,jobserver等</p>
<h3 id="二、java相关命名"><a href="#二、java相关命名" class="headerlink" title="二、java相关命名"></a>二、java相关命名</h3><p>a、类命名：每音节单词前的第一个字母大写，比如FieldInfo、Expression等，</p>
<p>b、普通变量(包括spring里的变量引用命名)：第一个单词前小写，以后每个单词第一个字母大写，password,primaryFlag</p>
<p>c、静态变量：全部大写，多个单词则以_分开，比如BOOLEAN_FLAG</p>
<p>d、包package命名：全部小写,比如com.joinspider.workdesk</p>
<a id="more"></a>
<p>补充：</p>
<ul>
<li>a、类名、变量名是名字组合，多名词顺序和中文顺序一样，比如ScriptEngine</li>
<li>b、属性也可以是形容词+名词</li>
<li>c、常量可使用上述规则，如果为了体现多个常量是一组的概念，也可以被修饰前置，<br>比如：VAR_START，VAR_END.</li>
<li>c、方法是动词+名字或者只有动词</li>
</ul>
<h3 id="三、属性文件-properties定义变量命名"><a href="#三、属性文件-properties定义变量命名" class="headerlink" title="三、属性文件.properties定义变量命名"></a>三、属性文件.properties定义变量命名</h3><p>object.a_b_c格式，全部小写，其中object是宿主，a_b_c多个单词下划线分开。</p>
<p>例：hibernate.cache.use_second_level_cache，hibernate.cache.provider_class，hibernate.cache.provider_configuration_file_resource_path</p>
<h3 id="四、xml文件命名"><a href="#四、xml文件命名" class="headerlink" title="四、xml文件命名"></a>四、xml文件命名</h3><p>全部小写，-符号是其xml的用途说明，类似applicationContext属习惯命名。</p>
<p>比如springmvc-servlet.xml、workdesk-manager.xml、workdesk-servlet.xml、applicationContext-basic.xml等</p>
<p>xml里的内容多个字符间以-隔开，比如param-name，filter-mapping等</p>
<h3 id="五、普通文件命名-jsp-js-img等"><a href="#五、普通文件命名-jsp-js-img等" class="headerlink" title="五、普通文件命名(jsp,js,img等)"></a>五、普通文件命名(jsp,js,img等)</h3><p>和java普通变量规范相同</p>
<h3 id="六、属性文件properties"><a href="#六、属性文件properties" class="headerlink" title="六、属性文件properties"></a>六、属性文件properties</h3><p>以下划线隔开：errors_zh_CN.properties，hibernate_test.properties</p>
<h3 id="七、数据库命名："><a href="#七、数据库命名：" class="headerlink" title="七、数据库命名："></a>七、数据库命名：</h3><p>表、字段命名全部大写，多个单词以_隔开</p>
<hr>
<h2 id="附加Java命名规范"><a href="#附加Java命名规范" class="headerlink" title="附加Java命名规范"></a>附加Java命名规范</h2><h3 id="一、命名规范"><a href="#一、命名规范" class="headerlink" title="一、命名规范"></a>一、命名规范</h3><p>1、 项目名全部小写</p>
<p>2、 包名全部小写</p>
<p>3、 类名首字母大写，如果类名由多个单词组成，每个单词的首字母都要大写。</p>
<p>如：<code>public class MyFirstClass{}</code></p>
<p>4、 变量名、方法名首字母小写，如果名称由多个单词组成，每个单词的首字母都要大写。</p>
<p>如：</p>
<pre><code>int index=0;

public void toString(){}
</code></pre><p>5、 常量名全部大写</p>
<p>如：<code>public static final String GAME_COLOR=”RED”;</code></p>
<p>6、所有命名规则必须遵循以下规则：</p>
<p>1)、名称只能由字母、数字、下划线、$符号组成</p>
<p>2)、不能以数字开头</p>
<p>3)、名称不能使用JAVA中的关键字。</p>
<p>4)、坚决不允许出现中文及拼音命名。</p>
<h3 id="二、注释规范"><a href="#二、注释规范" class="headerlink" title="二、注释规范"></a>二、注释规范</h3><h4 id="1、-类注释"><a href="#1、-类注释" class="headerlink" title="1、   类注释"></a>1、   类注释</h4><p>在每个类前面必须加上类注释，注释模板如下：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/**</span></span></div><div class="line"></div><div class="line"><span class="bullet">* </span>Copyright (C), 2006-2010, ChengDu Lovo info. Co., Ltd.</div><div class="line"></div><div class="line"><span class="bullet">* </span>FileName: Test.java</div><div class="line"></div><div class="line"><span class="bullet">* </span>类的详细说明</div><div class="line"></div><div class="line"><span class="bullet">*</span></div><div class="line"></div><div class="line"><span class="bullet">* </span>@author 类创建者姓名</div><div class="line"><span class="code">    * @Date    创建日期</span></div><div class="line"></div><div class="line"><span class="bullet">* </span>@version 1.00</div><div class="line"></div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="2、-属性注释"><a href="#2、-属性注释" class="headerlink" title="2、   属性注释"></a>2、   属性注释</h4><p>在每个属性前面必须加上属性注释，注释模板如下：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** 提示信息 *</span>/</span></span></div><div class="line"></div><div class="line">private <span class="built_in">String</span> strMsg = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<h4 id="3、-方法注释"><a href="#3、-方法注释" class="headerlink" title="3、   方法注释"></a>3、   方法注释</h4><p>在每个方法前面必须加上方法注释，注释模板如下：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/**</span></span></div><div class="line"></div><div class="line"><span class="bullet">* </span>类方法的详细使用说明</div><div class="line"></div><div class="line"><span class="bullet">*</span></div><div class="line"></div><div class="line"><span class="bullet">* </span>@param 参数1 参数1的使用说明</div><div class="line"></div><div class="line"><span class="bullet">* </span>@return 返回结果的说明</div><div class="line"></div><div class="line"><span class="bullet">* </span>@throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</div><div class="line"></div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="4、-构造方法注释"><a href="#4、-构造方法注释" class="headerlink" title="4、   构造方法注释"></a>4、   构造方法注释</h4><p>在每个构造方法前面必须加上注释，注释模板如下：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/**</span></span></div><div class="line"></div><div class="line"><span class="bullet">* </span>构造方法的详细使用说明</div><div class="line"></div><div class="line"><span class="bullet">*</span></div><div class="line"></div><div class="line"><span class="bullet">* </span>@param 参数1 参数1的使用说明</div><div class="line"></div><div class="line"><span class="bullet">* </span>@throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</div><div class="line"></div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="5、-方法内部注释"><a href="#5、-方法内部注释" class="headerlink" title="5、   方法内部注释"></a>5、   方法内部注释</h4><p>在方法内部使用单行或者多行注释，该注释根据实际情况添加。</p>
<p>如：//背景颜色</p>
<pre><code>Color bgColor = Color.RED
</code></pre><hr>
<p>参考：<a href="//www.cnblogs.com/maowang1991/archive/2013/06/29/3162366.html">http://www.cnblogs.com/maowang1991/archive/2013/06/29/3162366.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间对于java命名规范有些生疏了，特地在网络上整理编写了这篇规范，以后为个人的编程做一个参考吧。&lt;/p&gt;
&lt;h3 id=&quot;一、项目名&quot;&gt;&lt;a href=&quot;#一、项目名&quot; class=&quot;headerlink&quot; title=&quot;一、项目名&quot;&gt;&lt;/a&gt;一、项目名&lt;/h3&gt;&lt;p&gt;全部小写，比如cms、workdesk,jobserver等&lt;/p&gt;
&lt;h3 id=&quot;二、java相关命名&quot;&gt;&lt;a href=&quot;#二、java相关命名&quot; class=&quot;headerlink&quot; title=&quot;二、java相关命名&quot;&gt;&lt;/a&gt;二、java相关命名&lt;/h3&gt;&lt;p&gt;a、类命名：每音节单词前的第一个字母大写，比如FieldInfo、Expression等，&lt;/p&gt;
&lt;p&gt;b、普通变量(包括spring里的变量引用命名)：第一个单词前小写，以后每个单词第一个字母大写，password,primaryFlag&lt;/p&gt;
&lt;p&gt;c、静态变量：全部大写，多个单词则以_分开，比如BOOLEAN_FLAG&lt;/p&gt;
&lt;p&gt;d、包package命名：全部小写,比如com.joinspider.workdesk&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://xelengo.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>23个MySQL常用查询语句</title>
    <link href="http://xelengo.me/2017/02/25/20170225_2/"/>
    <id>http://xelengo.me/2017/02/25/20170225_2/</id>
    <published>2017-02-25T06:28:37.631Z</published>
    <updated>2017-12-10T09:57:52.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一查询数值型数据"><a href="#一查询数值型数据" class="headerlink" title="一查询数值型数据:"></a>一查询数值型数据:</h3><pre><code>SELECT * FROM tb_name WHERE sum &gt; 100;
</code></pre><p> 查询谓词:&gt;,=,&lt;,&lt;&gt;,!=,!&gt;,!&lt;,=&gt;,=&lt;</p>
<h3 id="二查询字符串"><a href="#二查询字符串" class="headerlink" title="二查询字符串"></a>二查询字符串</h3><a id="more"></a>
<hr>
<pre><code>SELECT * FROM tb_stu  WHERE sname  =  &apos;小刘&apos;
SELECT * FROM tb_stu  WHERE sname like &apos;刘%&apos;
SELECT * FROM tb_stu  WHERE sname like &apos;%程序员&apos;
SELECT * FROM tb_stu  WHERE sname like &apos;%PHP%&apos;
</code></pre><h3 id="三查询日期型数据"><a href="#三查询日期型数据" class="headerlink" title="三查询日期型数据"></a>三查询日期型数据</h3><pre><code>SELECT * FROM tb_stu WHERE date = &apos;2011-04-08&apos;
</code></pre><p> 注:不同数据库对日期型数据存在差异: ：<br>    (1)MySQL:SELECT * from tb_name WHERE birthday = ‘2011-04-08’</p>
<pre><code> (2)SQL Server:SELECT * from tb_name WHERE birthday = &apos;2011-04-08&apos;

(3)Access:SELECT * from tb_name WHERE birthday = #2011-04-08#
</code></pre><h3 id="四查询逻辑型数据"><a href="#四查询逻辑型数据" class="headerlink" title="四查询逻辑型数据"></a>四查询逻辑型数据</h3><pre><code>SELECT * FROM tb_name WHERE type = &apos;T&apos;
SELECT * FROM tb_name WHERE type = &apos;F&apos;
</code></pre><p> 逻辑运算符:and or not</p>
<h3 id="五查询非空数据"><a href="#五查询非空数据" class="headerlink" title="五查询非空数据"></a>五查询非空数据</h3><pre><code>SELECT * FROM tb_name WHERE address &lt;&gt;&apos;&apos; order by addtime desc
</code></pre><p> 注:&lt;&gt;相当于PHP中的!=</p>
<h3 id="六利用变量查询数值型数据"><a href="#六利用变量查询数值型数据" class="headerlink" title="六利用变量查询数值型数据"></a>六利用变量查询数值型数据</h3><pre><code>SELECT * FROM tb_name WHERE id = &apos;$_POST[text]&apos; 
</code></pre><p>注:利用变量查询数据时，传入SQL的变量不必用引号括起来，因为PHP中的字符串与数值型数据进行连接时，程序会自动将数值型数据转变成字符串，然后与要连接的字符串进行连接</p>
<h3 id="七利用变量查询字符串数据"><a href="#七利用变量查询字符串数据" class="headerlink" title="七利用变量查询字符串数据"></a>七利用变量查询字符串数据</h3><pre><code>SELECT * FROM tb_name WHERE name LIKE &apos;%$_POST[name]%&apos; 
</code></pre><p>完全匹配的方法”%%”表示可以出现在任何位置</p>
<h3 id="八查询前n条记录"><a href="#八查询前n条记录" class="headerlink" title="八查询前n条记录"></a>八查询前n条记录</h3><pre><code>SELECT * FROM tb_name LIMIT 0,$N;
</code></pre><p> limit语句与其他语句，如order by等语句联合使用，会使用SQL语句千变万化，使程序非常灵活</p>
<h3 id="九查询后n条记录"><a href="#九查询后n条记录" class="headerlink" title="九查询后n条记录"></a>九查询后n条记录</h3><pre><code>SELECT * FROM tb_stu ORDER BY id ASC LIMIT $n
</code></pre><h3 id="十查询从指定位置开始的n条记录"><a href="#十查询从指定位置开始的n条记录" class="headerlink" title="十查询从指定位置开始的n条记录"></a>十查询从指定位置开始的n条记录</h3><pre><code>SELECT * FROM tb_stu ORDER BY id ASC LIMIT $_POST[begin],$n
</code></pre><p> 注意:数据的id是从0开始的</p>
<h3 id="十一查询统计结果中的前n条记录"><a href="#十一查询统计结果中的前n条记录" class="headerlink" title="十一查询统计结果中的前n条记录"></a>十一查询统计结果中的前n条记录</h3><pre><code>SELECT * ,(yw+sx+wy) AS total FROM tb_score ORDER BY (yw+sx+wy) DESC LIMIT 0,$num
</code></pre><h3 id="十二查询指定时间段的数据"><a href="#十二查询指定时间段的数据" class="headerlink" title="十二查询指定时间段的数据"></a>十二查询指定时间段的数据</h3><p> SELECT  要查找的字段 FROM 表名 WHERE 字段名 BETWEEN 初始值 AND 终止值<br>    SELECT * FROM tb_stu WHERE age BETWEEN 0 AND 18</p>
<h3 id="十三按月查询统计数据"><a href="#十三按月查询统计数据" class="headerlink" title="十三按月查询统计数据"></a>十三按月查询统计数据</h3><pre><code>SELECT * FROM tb_stu WHERE month(date) = &apos;$_POST[date]&apos; ORDER BY date ;
</code></pre><p>注：SQL语言中提供了如下函数，利用这些函数可以很方便地实现按年、月、日进行查询<br> year(data):返回data表达式中的公元年分所对应的数值<br> month(data):返回data表达式中的月分所对应的数值<br> day(data):返回data表达式中的日期所对应的数值</p>
<h3 id="十四查询大于指定条件的记录"><a href="#十四查询大于指定条件的记录" class="headerlink" title="十四查询大于指定条件的记录"></a>十四查询大于指定条件的记录</h3><p> SELECT * FROM tb_stu WHERE age&gt;$_POST[age] ORDER BY age;</p>
<h3 id="十五查询结果不显示重复记录"><a href="#十五查询结果不显示重复记录" class="headerlink" title="十五查询结果不显示重复记录"></a>十五查询结果不显示重复记录</h3><p> SELECT DISTINCT 字段名 FROM 表名 WHERE 查询条件<br>注:SQL语句中的DISTINCT必须与WHERE子句联合使用，否则输出的信息不会有变化 ,且字段不能用*代替</p>
<h3 id="十六NOT与谓词进行组合条件的查询"><a href="#十六NOT与谓词进行组合条件的查询" class="headerlink" title="十六NOT与谓词进行组合条件的查询"></a>十六NOT与谓词进行组合条件的查询</h3><p> (1)NOT BERWEEN … AND … 对介于起始值和终止值间的数据时行查询 可改成 &lt;起始值 AND &gt;终止值<br> (2)IS NOT NULL 对非空值进行查询<br> (3)IS NULL 对空值进行查询<br> (4)NOT IN 该式根据使用的关键字是包含在列表内还是排除在列表外，指定表达式的搜索，搜索表达式可以是常量或列名，而列名可以是一组常量，但更多情况下是子查询</p>
<h3 id="十七显示数据表中重复的记录和记录条数"><a href="#十七显示数据表中重复的记录和记录条数" class="headerlink" title="十七显示数据表中重复的记录和记录条数"></a>十七显示数据表中重复的记录和记录条数</h3><p> SELECT  name,age,count(*) ,age FROM tb_stu WHERE age = ‘19’ group by date</p>
<h3 id="十八对数据进行降序-升序查询"><a href="#十八对数据进行降序-升序查询" class="headerlink" title="十八对数据进行降序/升序查询"></a>十八对数据进行降序/升序查询</h3><pre><code>SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段 DESC 降序
SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段 ASC  升序
</code></pre><p> 注:对字段进行排序时若不指定排序方式，则默认为ASC升序</p>
<h3 id="十九对数据进行多条件查询"><a href="#十九对数据进行多条件查询" class="headerlink" title="十九对数据进行多条件查询"></a>十九对数据进行多条件查询</h3><pre><code>SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段1 ASC 字段2 DESC  …
</code></pre><p> 注意:对查询信息进行多条件排序是为了共同限制记录的输出，一般情况下，由于不是单一条件限制，所以在输出效果上有一些差别。</p>
<h3 id="二十对统计结果进行排序"><a href="#二十对统计结果进行排序" class="headerlink" title="二十对统计结果进行排序"></a>二十对统计结果进行排序</h3><p> 函数SUM([ALL]字段名) 或 SUM([DISTINCT]字段名),可实现对字段的求和，函数中为ALL时为所有该字段所有记录求和,若为DISTINCT则为该字段所有不重复记录的字段求和<br> 如：SELECT name,SUM(price) AS sumprice  FROM tb_price GROUP BY name</p>
<pre><code>SELECT * FROM tb_name ORDER BY mount DESC,price ASC
</code></pre><h3 id="二十一单列数据分组统计"><a href="#二十一单列数据分组统计" class="headerlink" title="二十一单列数据分组统计"></a>二十一单列数据分组统计</h3><pre><code>SELECT id,name,SUM(price) AS title,date FROM tb_price GROUP BY pid ORDER BY title DESC
</code></pre><p> 注:当分组语句group by排序语句order by同时出现在SQL语句中时，要将分组语句书写在排序语句的前面，否则会出现错误</p>
<h3 id="二十二多列数据分组统计"><a href="#二十二多列数据分组统计" class="headerlink" title="二十二多列数据分组统计"></a>二十二多列数据分组统计</h3><p> 多列数据分组统计与单列数据分组统计类似<br>SELECT <em>，SUM(字段1</em>字段2) AS (新字段1) FROM 表名 GROUP BY 字段 ORDER BY 新字段1 DESC<br>    SELECT id,name,SUM(price*num) AS sumprice  FROM tb_price GROUP BY pid ORDER BY sumprice DESC<br> 注：group by语句后面一般为不是聚合函数的数列，即不是要分组的列</p>
<p>二十三多表分组统计<br>    SELECT a.name,AVG(a.price),b.name,AVG(b.price) FROM tb_demo058 AS a,tb_demo058_1 AS b WHERE a.id=b.id GROUP BY b.type;</p>
<hr>
<p>参考教程：</p>
<p><a href="//bbs.csdn.net/topics/390407669">23个MySQL常用查询语句</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一查询数值型数据&quot;&gt;&lt;a href=&quot;#一查询数值型数据&quot; class=&quot;headerlink&quot; title=&quot;一查询数值型数据:&quot;&gt;&lt;/a&gt;一查询数值型数据:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT * FROM tb_name WHERE sum &amp;gt; 100;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 查询谓词:&amp;gt;,=,&amp;lt;,&amp;lt;&amp;gt;,!=,!&amp;gt;,!&amp;lt;,=&amp;gt;,=&amp;lt;&lt;/p&gt;
&lt;h3 id=&quot;二查询字符串&quot;&gt;&lt;a href=&quot;#二查询字符串&quot; class=&quot;headerlink&quot; title=&quot;二查询字符串&quot;&gt;&lt;/a&gt;二查询字符串&lt;/h3&gt;
    
    </summary>
    
    
      <category term="MySql" scheme="http://xelengo.me/tags/MySql/"/>
    
      <category term="教程" scheme="http://xelengo.me/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="编程" scheme="http://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySql常用数据库操作语句</title>
    <link href="http://xelengo.me/2017/02/25/20170225_1/"/>
    <id>http://xelengo.me/2017/02/25/20170225_1/</id>
    <published>2017-02-25T06:07:52.952Z</published>
    <updated>2017-12-10T09:58:13.121Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL（官方发音为英语发音：/maɪ ˌɛskjuːˈɛl/“My S-Q-L”[1]，但也经常读作英语发音：/maɪ ˈsiːkwəl/“My Sequel”）原本是一个开放源代码的关系数据库管理系统，原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统（Sun Microsystems）收购。2009年，甲骨文公司（Oracle）收购昇阳微系统公司，MySQL成为Oracle旗下产品。<br>MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用在Internet上的中小型网站中。随着MySQL的不断成熟，它也逐渐用于更多大规模网站和应用，比如维基百科、Google和Facebook等网站。非常流行的开源软件组合LAMP中的“M”指的就是MySQL。<br>但被甲骨文公司收购后，Oracle大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目OpenSolaris的发展，因此导致自由软件社区们对于Oracle是否还会持续支持MySQL社区版（MySQL之中唯一的免费版本）有所隐忧，因此原先一些使用MySQL的开源软件逐渐转向其它的数据库。例如维基百科已于2013年正式宣布将从MySQL迁移到MariaDB数据库[2]。MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划MariaDB。</p>
<a id="more"></a>
<hr>
<h3 id="零、用户管理："><a href="#零、用户管理：" class="headerlink" title="零、用户管理："></a>零、用户管理：</h3><h4 id="1、新建用户："><a href="#1、新建用户：" class="headerlink" title="1、新建用户："></a>1、新建用户：</h4><pre><code>&gt;CREATE USER name IDENTIFIED BY &apos;ssapdrow&apos;;
</code></pre><h4 id="2、更改密码："><a href="#2、更改密码：" class="headerlink" title="2、更改密码："></a>2、更改密码：</h4><pre><code>&gt;SET PASSWORD FOR name=PASSWORD(&apos;fdddfd&apos;);
</code></pre><h4 id="3、权限管理"><a href="#3、权限管理" class="headerlink" title="3、权限管理"></a>3、权限管理</h4><pre><code>&gt;SHOW GRANTS FOR name;    //查看name用户权限

&gt;GRANT SELECT ON db_name.* TO name;　　　　//给name用户db_name数据库的所有权限

&gt;REVOKE SELECT ON db_name.* TO name;　　　　//GRANT的反操作，去除权限；
</code></pre><h3 id="一、数据库操作："><a href="#一、数据库操作：" class="headerlink" title="一、数据库操作：　"></a>一、数据库操作：　</h3><h4 id="1、查看数据库："><a href="#1、查看数据库：" class="headerlink" title="1、查看数据库："></a>1、查看数据库：</h4><pre><code>&gt;SHOW DATABASES;
</code></pre><h4 id="2、创建数据库："><a href="#2、创建数据库：" class="headerlink" title="2、创建数据库："></a>2、创建数据库：</h4><pre><code>&gt;CREATE DATABASE db_name;　　//db_name为数据库名
</code></pre><h4 id="3、使用数据库："><a href="#3、使用数据库：" class="headerlink" title="3、使用数据库："></a>3、使用数据库：</h4><pre><code>&gt;USE db_name;
</code></pre><h4 id="4、删除数据库："><a href="#4、删除数据库：" class="headerlink" title="4、删除数据库："></a>4、删除数据库：</h4><pre><code>&gt;DROP DATABASE db_name;
</code></pre><h3 id="二、创建表："><a href="#二、创建表：" class="headerlink" title="二、创建表："></a>二、创建表：</h3><h4 id="1、创建表："><a href="#1、创建表：" class="headerlink" title="1、创建表："></a>1、创建表：</h4><pre><code>&gt;CREATE TABLE table_name(id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,　　　　//id值，无符号、非空、递增——唯一性，可做主键。

&gt;name VARCHAR(60) NOT NULL

&gt;score TINYINT UNSIGNED NOT NULL DEFAULT 0,　　　　//设置默认列值

&gt;PRIMARY KEY(id)

&gt;)ENGINE=InnoDB　　　　//设置表的存储引擎，一般常用InnoDB和MyISAM；InnoDB可靠，支持事务；MyISAM高效不支持全文检索

&gt;DEFAULT charset=utf8;　　//设置默认的编码，防止数据库中文乱码
</code></pre><p>如果有条件的创建数据表还可以使用   </p>
<pre><code>&gt;CREATE TABLE IF NOT EXISTS tb_name(........
</code></pre><h4 id="2、复制表："><a href="#2、复制表：" class="headerlink" title="2、复制表："></a>2、复制表：</h4><pre><code>&gt;CREATE TABLE tb_name2 SELECT * FROM tb_name;
</code></pre><p>　　　　或者部分复制：</p>
<pre><code>&gt;CREATE TABLE tb_name2 SELECT id,name FROM tb_name;
</code></pre><h4 id="3、创建临时表："><a href="#3、创建临时表：" class="headerlink" title="3、创建临时表："></a>3、创建临时表：</h4><pre><code>&gt;CREATE TEMPORARY TABLE tb_name(这里和创建普通表一样);
</code></pre><h4 id="4、查看数据库中可用的表："><a href="#4、查看数据库中可用的表：" class="headerlink" title="4、查看数据库中可用的表："></a>4、查看数据库中可用的表：</h4><pre><code>&gt;SHOW TABLES;
</code></pre><h4 id="5、查看表的结构："><a href="#5、查看表的结构：" class="headerlink" title="5、查看表的结构："></a>5、查看表的结构：</h4><pre><code>&gt;DESCRIBE tb_name;
</code></pre><p>　　　　也可以使用：</p>
<pre><code>&gt;SHOW COLUMNS in tb_name; 　　　　//from也可以
</code></pre><h4 id="6、删除表："><a href="#6、删除表：" class="headerlink" title="6、删除表："></a>6、删除表：</h4><pre><code>&gt;DROP [ TEMPORARY ] TABLE [ IF EXISTS ] tb_name[ ,tb_name2.......];
</code></pre><p>　　　　实例：</p>
<pre><code>&gt;DROP TABLE IF EXISTS tb_name;
</code></pre><h4 id="7、表重命名："><a href="#7、表重命名：" class="headerlink" title="7、表重命名："></a>7、表重命名：</h4><pre><code>&gt;RENAME TABLE name_old TO name_new;
</code></pre><p>　　　　还可以使用：</p>
<pre><code>&gt;ALTER TABLE name_old RENAME name_new;
</code></pre><h3 id="三、修改表："><a href="#三、修改表：" class="headerlink" title="三、修改表："></a>三、修改表：</h3><h4 id="1、更改表结构："><a href="#1、更改表结构：" class="headerlink" title="1、更改表结构："></a>1、更改表结构：</h4><pre><code>&gt;ALTER TABLE tb_name ADD[CHANGE,RENAME,DROP] ...要更改的内容...
</code></pre><p>　　　　实例：</p>
<pre><code>&gt;ALTER TABLE tb_name ADD COLUMN address varchar(80) NOT NULL;

&gt;ALTER TABLE tb_name DROP address;

&gt;ALTER TABLE tb_name CHANGE score score SMALLINT(4) NOT NULL;
</code></pre><h3 id="四、插入数据："><a href="#四、插入数据：" class="headerlink" title="四、插入数据："></a>四、插入数据：</h3><h4 id="1、插入数据："><a href="#1、插入数据：" class="headerlink" title="1、插入数据："></a>1、插入数据：</h4><pre><code>&gt;INSERT INTO tb_name(id,name,score)VALUES(NULL,&apos;张三&apos;,140),(NULL,&apos;张四&apos;,178),(NULL,&apos;张五&apos;,134);
</code></pre><p>　　　　这里的插入多条数据直接在后边加上逗号，直接写入插入的数据即可；主键id是自增的列，可以不用写。</p>
<h4 id="2、插入检索出来的数据："><a href="#2、插入检索出来的数据：" class="headerlink" title="2、插入检索出来的数据："></a>2、插入检索出来的数据：</h4><pre><code>&gt;INSERT INTO tb_name(name,score) SELECT name,score FROM tb_name2;
</code></pre><h3 id="五、更新数据："><a href="#五、更新数据：" class="headerlink" title="五、更新数据："></a>五、更新数据：</h3><h4 id="1、指定更新数据："><a href="#1、指定更新数据：" class="headerlink" title="1、指定更新数据："></a>1、指定更新数据：</h4><pre><code>&gt;UPDATE tb_name SET score=189 WHERE id=2;

&gt;UPDATE tablename SET columnName=NewValue [ WHERE condition ]
</code></pre><h3 id="六、删除数据："><a href="#六、删除数据：" class="headerlink" title="六、删除数据："></a>六、删除数据：</h3><h4 id="1、删除数据："><a href="#1、删除数据：" class="headerlink" title="1、删除数据："></a>1、删除数据：</h4><pre><code>&gt;DELETE FROM tb_name WHERE id=3;
</code></pre><h3 id="七、条件控制："><a href="#七、条件控制：" class="headerlink" title="七、条件控制："></a>七、条件控制：</h3><h4 id="1、WHERE-语句："><a href="#1、WHERE-语句：" class="headerlink" title="1、WHERE 语句："></a>1、WHERE 语句：</h4><pre><code>&gt;SELECT * FROM tb_name WHERE id=3;
</code></pre><h4 id="2、HAVING-语句："><a href="#2、HAVING-语句：" class="headerlink" title="2、HAVING 语句："></a>2、HAVING 语句：</h4><pre><code>&gt;SELECT * FROM tb_name GROUP BY score HAVING count(*)&gt;2
</code></pre><h4 id="3、相关条件控制符："><a href="#3、相关条件控制符：" class="headerlink" title="3、相关条件控制符："></a>3、相关条件控制符：</h4><pre><code>=、&gt;、&lt;、&lt;&gt;、IN(1,2,3......)、BETWEEN a AND b、NOT

AND 、OR

Linke()用法中      %  为匹配任意、  _  匹配一个字符（可以是汉字）

IS NULL 空值检测
</code></pre><h3 id="八、MySQL的正则表达式："><a href="#八、MySQL的正则表达式：" class="headerlink" title="八、MySQL的正则表达式："></a>八、MySQL的正则表达式：</h3><h4 id="1、Mysql支持REGEXP的正则表达式："><a href="#1、Mysql支持REGEXP的正则表达式：" class="headerlink" title="1、Mysql支持REGEXP的正则表达式："></a>1、Mysql支持REGEXP的正则表达式：</h4><pre><code>&gt;SELECT * FROM tb_name WHERE name REGEXP &apos;^[A-D]&apos;   //找出以A-D 为开头的name
</code></pre><h4 id="2、特殊字符需要转义。"><a href="#2、特殊字符需要转义。" class="headerlink" title="2、特殊字符需要转义。"></a>2、特殊字符需要转义。</h4><h3 id="九、MySQL的一些函数："><a href="#九、MySQL的一些函数：" class="headerlink" title="九、MySQL的一些函数："></a>九、MySQL的一些函数：</h3><h4 id="1、字符串链接——CONCAT"><a href="#1、字符串链接——CONCAT" class="headerlink" title="1、字符串链接——CONCAT()"></a>1、字符串链接——CONCAT()</h4><pre><code>&gt;SELECT CONCAT(name,&apos;=&gt;&apos;,score) FROM tb_name
</code></pre><h4 id="2、数学函数："><a href="#2、数学函数：" class="headerlink" title="2、数学函数："></a>2、数学函数：</h4><pre><code>AVG、SUM、MAX、MIN、COUNT；
</code></pre><h4 id="3、文本处理函数："><a href="#3、文本处理函数：" class="headerlink" title="3、文本处理函数："></a>3、文本处理函数：</h4><pre><code>TRIM、LOCATE、UPPER、LOWER、SUBSTRING
</code></pre><h4 id="4、运算符："><a href="#4、运算符：" class="headerlink" title="4、运算符："></a>4、运算符：</h4><pre><code>+、-、*、\
</code></pre><h4 id="5、时间函数："><a href="#5、时间函数：" class="headerlink" title="5、时间函数："></a>5、时间函数：</h4><pre><code>DATE()、CURTIME()、DAY()、YEAR()、NOW().....
</code></pre><h3 id="十、分组查询："><a href="#十、分组查询：" class="headerlink" title="十、分组查询："></a>十、分组查询：</h3><h4 id="1、分组查询可以按照指定的列进行分组："><a href="#1、分组查询可以按照指定的列进行分组：" class="headerlink" title="1、分组查询可以按照指定的列进行分组："></a>1、分组查询可以按照指定的列进行分组：</h4><pre><code>&gt;SELECT COUNT(*) FROM tb_name GROUP BY score HAVING COUNT(*)&gt;1;
</code></pre><h4 id="2、条件使用Having；"><a href="#2、条件使用Having；" class="headerlink" title="2、条件使用Having；"></a>2、条件使用Having；</h4><h4 id="3、ORDER-BY-排序："><a href="#3、ORDER-BY-排序：" class="headerlink" title="3、ORDER BY 排序："></a>3、ORDER BY 排序：</h4><pre><code>ORDER BY DESC|ASC　　　　=&gt;按数据的降序和升序排列
</code></pre><h3 id="十一、UNION规则——可以执行两个语句（可以去除重复行）"><a href="#十一、UNION规则——可以执行两个语句（可以去除重复行）" class="headerlink" title="十一、UNION规则——可以执行两个语句（可以去除重复行）"></a>十一、UNION规则——可以执行两个语句（可以去除重复行）</h3><h3 id="十二、全文检索——MATCH和AGAINST"><a href="#十二、全文检索——MATCH和AGAINST" class="headerlink" title="十二、全文检索——MATCH和AGAINST"></a>十二、全文检索——MATCH和AGAINST</h3><pre><code>1、SELECT MATCH(note_text)AGAINST(&apos;PICASO&apos;) FROM tb_name;

2、InnoDB引擎不支持全文检索，MyISAM可以；
</code></pre><h3 id="十三、视图"><a href="#十三、视图" class="headerlink" title="十三、视图"></a>十三、视图</h3><h4 id="1、创建视图"><a href="#1、创建视图" class="headerlink" title="1、创建视图"></a>1、创建视图</h4><pre><code>&gt;CREATE VIEW name AS SELECT * FROM tb_name WHERE ~~ ORDER BY ~~;
</code></pre><h4 id="2、视图的特殊作用："><a href="#2、视图的特殊作用：" class="headerlink" title="2、视图的特殊作用："></a>2、视图的特殊作用：</h4><pre><code> a、简化表之间的联结（把联结写在select中）；

b、重新格式化输出检索的数据（TRIM，CONCAT等函数）；

c、过滤不想要的数据（select部分）

d、使用视图计算字段值，如汇总这样的值。
</code></pre><h3 id="十四、使用存储过程："><a href="#十四、使用存储过程：" class="headerlink" title="十四、使用存储过程："></a>十四、使用存储过程：</h3><p>个人理解，存储过程就是一个自定义函数，有局部变量参数，可传入参数，可以返回值，不过这语法够呆滞的<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### <span class="number">1</span>、创建存储过程：</div><div class="line"></div><div class="line">	&gt;<span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro</span><span class="params">(</span></span></div><div class="line"></div><div class="line">	&gt;<span class="keyword">IN</span> num INT,<span class="keyword">OUT</span> total INT)</div><div class="line"></div><div class="line">	&gt;<span class="title">BEGIN</span></div><div class="line"></div><div class="line">	&gt;<span class="title">SELECT</span> <span class="title">SUM</span><span class="params">(score)</span> <span class="title">INTO</span> <span class="title">total</span> <span class="title">FROM</span> <span class="title">tb_name</span> <span class="title">WHERE</span> <span class="title">id</span>=<span class="title">num</span>;</div><div class="line"></div><div class="line">	&gt;<span class="keyword">END</span>;</div><div class="line"></div><div class="line">***这里的  <span class="keyword">IN</span> (传递一个值给存储过程)，<span class="keyword">OUT</span>（从存储过程传出一个值），INOUT（对存储过程传入、传出），<span class="keyword">INTO</span>（保存变量）***</div><div class="line"></div><div class="line">####  <span class="number">2</span>、调用存储过程：</div><div class="line"></div><div class="line">	&gt;CALL pro(<span class="number">13</span>,@total)　　　　　　<span class="comment">//这里的存储过程两个变量，一个是IN一个是OUT，这里的OUT也是需要写上的，不写会出错</span></div><div class="line"></div><div class="line">	&gt;<span class="keyword">SELECT</span> @total　　　　　　　　　<span class="comment">//这里就可以看到结果了；</span></div><div class="line"></div><div class="line">####  <span class="number">3</span>、存储过程的其他操作：</div><div class="line"></div><div class="line">	&gt;SHOW <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">STATUS</span>;</span>　　　　　　<span class="comment">//显示当期的存储过程</span></div><div class="line"></div><div class="line">	&gt;DROP <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">pro</span>;</span>　　　　　　　　　<span class="comment">//删除指定存储过程</span></div><div class="line"></div><div class="line">###  十五、使用游标：</div><div class="line"></div><div class="line">　　对这个理解不是很懂，朋友多多指点哦</div></pre></td></tr></table></figure></p>
<h4 id="1、游标的操作"><a href="#1、游标的操作" class="headerlink" title="1、游标的操作"></a>1、游标的操作</h4><pre><code>&gt;CREATE PROCEDURE pro()

&gt;BEGIN 

&gt;DECLARE ordername CURSOR FOR

&gt;SELECT order_num FROM orders;

&gt;END;
</code></pre><p>　　　　</p>
<pre><code>&gt;OPEN ordername;　　　　//打开游标

&gt;CLOSE ordername;　　　　//关闭游标
</code></pre><h3 id="十六、触发器："><a href="#十六、触发器：" class="headerlink" title="十六、触发器："></a>十六、触发器：</h3><p>　　触发器是指在进行某项指定操作时，触发触发器内指定的操作；</p>
<h4 id="1、支持触发器的语句有DELETE、INSERT、UPDATE-其他均不支持"><a href="#1、支持触发器的语句有DELETE、INSERT、UPDATE-其他均不支持" class="headerlink" title="1、支持触发器的语句有DELETE、INSERT、UPDATE,其他均不支持"></a>1、支持触发器的语句有DELETE、INSERT、UPDATE,其他均不支持</h4><h4 id="2、创建触发器："><a href="#2、创建触发器：" class="headerlink" title="2、创建触发器："></a>2、创建触发器：</h4><pre><code>&gt;CREATE TRIGGER trig AFTER INSERT ON ORDERS FOR EACH ROW SELECT NEW.orser_name;

&gt;INSERT语句，触发语句，返回一个值
</code></pre><h4 id="3、删除触发器"><a href="#3、删除触发器" class="headerlink" title="3、删除触发器"></a>3、删除触发器</h4><pre><code>&gt;DROP TRIGGER trig;
</code></pre><h3 id="十七、语法整理："><a href="#十七、语法整理：" class="headerlink" title="十七、语法整理："></a>十七、语法整理：</h3><h4 id="1、ALTER-TABLE（修改表）"><a href="#1、ALTER-TABLE（修改表）" class="headerlink" title="1、ALTER TABLE（修改表）"></a>1、ALTER TABLE（修改表）</h4><pre><code>ALTER TABLE table_name

( ADD column datatype  [ NULL | NOT NULL ] [ CONSTRAINTS ]

CHANGE column datatype COLUMNS [ NULL | NOT NULL ]  [ CONSTRAINTS ]

DROP column，

。。。。

)
</code></pre><h4 id="2、COMMIT-处理事务"><a href="#2、COMMIT-处理事务" class="headerlink" title="2、COMMIT(处理事务)"></a>2、COMMIT(处理事务)</h4><pre><code>&gt;COMMIT;
</code></pre><h4 id="3、CREATE-INDEX-在一个或多个列上创建索引"><a href="#3、CREATE-INDEX-在一个或多个列上创建索引" class="headerlink" title="3、CREATE INDEX(在一个或多个列上创建索引)"></a>3、CREATE INDEX(在一个或多个列上创建索引)</h4><pre><code>CREATE INDEX index_name ON tb_name (column [ ASC | DESC ] , .......);
</code></pre><h4 id="4、CREATE-PROCEDURE-创建存储过程"><a href="#4、CREATE-PROCEDURE-创建存储过程" class="headerlink" title="4、CREATE PROCEDURE (创建存储过程)"></a>4、CREATE PROCEDURE (创建存储过程)</h4><pre><code>CREATE PROCEDURE pro([ parameters ])

BEGIN

........

END
</code></pre><h4 id="5、CREATE-TABLE-创建表"><a href="#5、CREATE-TABLE-创建表" class="headerlink" title="5、CREATE TABLE(创建表)"></a>5、CREATE TABLE(创建表)</h4><pre><code>CREATE TABLE tb_name(

column_name　　datetype　　[ NULL | NOT NULL ] 　　[ condtraints]   ,

column_name　　datetype　　[ NULL | NOT NULL ] 　　[ condtraints]   ,

.......

PRIMARY KEY( column_name )

)ENGINE=[  InnoDB | MyiSAM ]DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;
</code></pre><h4 id="6、CREATE-USER-创建用户"><a href="#6、CREATE-USER-创建用户" class="headerlink" title="6、CREATE USER(创建用户)"></a>6、CREATE USER(创建用户)</h4><pre><code>CREATE USER user_name [ @hostname ] [ IDENTIFIED BY [ PASSWORD ] &apos;pass_word&apos; ];
</code></pre><h4 id="7、CREATE-VIEW-（在一个或多个表上创建视图）"><a href="#7、CREATE-VIEW-（在一个或多个表上创建视图）" class="headerlink" title="7、CREATE VIEW （在一个或多个表上创建视图）"></a>7、CREATE VIEW （在一个或多个表上创建视图）</h4><pre><code>CREATE [ OR REPLACE ] VIEW view_name AS SELECT。。。。。。
</code></pre><h4 id="8、DELETE-从表中删除一行或多行"><a href="#8、DELETE-从表中删除一行或多行" class="headerlink" title="8、DELETE (从表中删除一行或多行)"></a>8、DELETE (从表中删除一行或多行)</h4><pre><code>DELETE FROM table_name [WHERE ......]
</code></pre><h4 id="9、DROP-永久删除数据库及对象，如视图、索引等"><a href="#9、DROP-永久删除数据库及对象，如视图、索引等" class="headerlink" title="9、DROP(永久删除数据库及对象，如视图、索引等)"></a>9、DROP(永久删除数据库及对象，如视图、索引等)</h4><pre><code>DROP DATEBASE | INDEX | PROCEDURE | TABLE | TRIGGER | USER | VIEW  name
</code></pre><h4 id="10、INSERT-（给表添加行）"><a href="#10、INSERT-（给表添加行）" class="headerlink" title="10、INSERT （给表添加行）"></a>10、INSERT （给表添加行）</h4><pre><code>INSERT INTO tb_name [ ( columns,...... ) ]  VALUES(value1,............);
</code></pre><p>　　　　使用SELECT值插入：</p>
<pre><code>INSERT INTO tb_name [ ( columns,...... ) ]

SELECT columns , .......   FROM tb_name [ WHERE ...... ] ;
</code></pre><h4 id="11、ROLLBACK（撤销一个事务处理块）"><a href="#11、ROLLBACK（撤销一个事务处理块）" class="headerlink" title="11、ROLLBACK（撤销一个事务处理块）"></a>11、ROLLBACK（撤销一个事务处理块）</h4><pre><code>ROLLBACK [  TO  savapointname  ];
</code></pre><h4 id="12、SAVEPOINT-为ROLLBACK设置保留点"><a href="#12、SAVEPOINT-为ROLLBACK设置保留点" class="headerlink" title="12、SAVEPOINT(为ROLLBACK设置保留点)"></a>12、SAVEPOINT(为ROLLBACK设置保留点)</h4><pre><code>SAVEPOINT sp1;
</code></pre><h4 id="13、SELECT-检索数据，显示信息"><a href="#13、SELECT-检索数据，显示信息" class="headerlink" title="13、SELECT (检索数据，显示信息)"></a>13、SELECT (检索数据，显示信息)</h4><pre><code>SELECT column_name,.....FROM tb_name  [ WHERE ]   [ UNION ]    [ RROUP BY ]   [ HAVING ]   [ ORDER BY ]
</code></pre><h4 id="14、START-TRANSACTION-一个新的事务处理块的开始"><a href="#14、START-TRANSACTION-一个新的事务处理块的开始" class="headerlink" title="14、START TRANSACTION (一个新的事务处理块的开始)"></a>14、START TRANSACTION (一个新的事务处理块的开始)</h4><pre><code>START TRANSACTION
</code></pre><h4 id="15、UPDATE-更新一个表中的一行或多行"><a href="#15、UPDATE-更新一个表中的一行或多行" class="headerlink" title="15、UPDATE(更新一个表中的一行或多行)"></a>15、UPDATE(更新一个表中的一行或多行)</h4><pre><code>UPDATE tb_name SET column=value,......[ where ]
</code></pre><hr>
<p>参考教程：</p>
<p><a href="//www.cnblogs.com/picaso/archive/2012/05/17/2505895.html">常用的Mysql数据库操作语句大全</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL（官方发音为英语发音：/maɪ ˌɛskjuːˈɛl/“My S-Q-L”[1]，但也经常读作英语发音：/maɪ ˈsiːkwəl/“My Sequel”）原本是一个开放源代码的关系数据库管理系统，原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统（Sun Microsystems）收购。2009年，甲骨文公司（Oracle）收购昇阳微系统公司，MySQL成为Oracle旗下产品。&lt;br&gt;MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用在Internet上的中小型网站中。随着MySQL的不断成熟，它也逐渐用于更多大规模网站和应用，比如维基百科、Google和Facebook等网站。非常流行的开源软件组合LAMP中的“M”指的就是MySQL。&lt;br&gt;但被甲骨文公司收购后，Oracle大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目OpenSolaris的发展，因此导致自由软件社区们对于Oracle是否还会持续支持MySQL社区版（MySQL之中唯一的免费版本）有所隐忧，因此原先一些使用MySQL的开源软件逐渐转向其它的数据库。例如维基百科已于2013年正式宣布将从MySQL迁移到MariaDB数据库[2]。MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划MariaDB。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySql" scheme="http://xelengo.me/tags/MySql/"/>
    
      <category term="教程" scheme="http://xelengo.me/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="编程" scheme="http://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java编码规范】《阿里巴巴Java开发手册（正式版）》发布！</title>
    <link href="http://xelengo.me/2017/02/12/20170212_1/"/>
    <id>http://xelengo.me/2017/02/12/20170212_1/</id>
    <published>2017-02-12T06:39:43.674Z</published>
    <updated>2017-12-10T09:57:34.939Z</updated>
    
    <content type="html"><![CDATA[<p>2017年2月9日阿里巴巴发布了一份《阿里巴巴Java开发手册（正式版）》，引起了互联网上程序员们广泛讨论。</p>
<p>作为一名java伪初学者，得知这个消息还是要尽快来学习学习的。毕竟是阿里巴巴出的编码规范，总是会对初学者有很大帮助吧。一份好的编码规约，能够让编程少踩很多坑；一个好的编程习惯，能让以后的编程旅途更加顺畅。</p>
<p><a href="//pan.baidu.com/s/1c202zNM">点击进行百度云下载</a></p>
<a id="more"></a>
<hr>
<blockquote>
<ul>
<li><strong><em>摘要</em></strong>： 阿里巴巴集团推出的《阿里巴巴Java开发手册（正式版）》是阿里巴巴近万名开发同学集体智慧的结晶，以开发视角为中心，详细列举如何开发更加高效、更加容错、更加有协作性，力求知其然，更知其不然，结合正反例，让Java开发者能够提升协作效率、提高代码质量。*</li>
</ul>
</blockquote>
<p><strong>2017年开春之际，诚意献上重磅大礼：阿里巴巴Java开发手册，首次公开阿里官方Java代码规范标准。这套Java统一规范标准将有助于提高行业编码规范化水平，帮助行业人员提高开发质量和效率、大大降低代码维护成本。</strong></p>
<p>点击下载《阿里巴巴Java开发手册》：<a href="//yq.aliyun.com/attachment/download/?id=1170">阿里云点击下载 https://yq.aliyun.com/attachment/download/?id=1170</a></p>
<p><img src="/assets/img/blogimg/20170212/aliyun.jpeg" alt="图片1"></p>
<p>（点击参与话题讨论：<a href="//yq.aliyun.com/roundtable/47961?spm=5176.100239.blogcont69327.8.NO0IAQ">Java开发者们，一起来聊聊大家的开发规约吧</a>）</p>
<center> 你是否曾因Java代码规范版本纷杂而无所适从？<br><br>你是否想过代码规范能将系统故障率降低20%？<br><br>你是否曾因团队代码风格迥异而协同困难？<br><br>你是否正在review一些原本可以避免的故障？<br><br>你是否无法确定自己的代码足够健壮？  </center>

<p><strong>码出高效，码出质量！</strong></p>
<p>相比C++代码规范业界已经达成共识，Java代码规范业界比较混乱，我们期待这次发布的Java代码规范能够给业界带来一个标准，促使整体行业代码规范水平得到提高，最终能够帮助企业和开发者提升代码质量和降低代码故障率。</p>
<p><strong>阿里出品，质量保证！</strong></p>
<p>阿里Java技术团队一手打造出Dubbo、JStorm、Fastjson等诸多流行开源框架，部分已成为Apache基金会孵化项目；</p>
<p>阿里在Java后端领域支撑起全球访问量最大的服务器集群；</p>
<p>Java代码构建的阿里双11业务系统订单处理能力达到17.5万笔/秒；</p>
<p>到目前已累计数亿行高并发、高稳定性的最佳Java代码实践；</p>
<p>……</p>
<p>此次首度公开的Java开发手册正是出自这样的团队，近万名阿里Java技术精英的经验总结，并经历了多次大规模一线实战检验及完善，铸就了这本高含金量的阿里Java开发手册。该手册以Java开发者为中心视角，划分为编程规约、异常日志规约、MYSQL规约、工程规约、安全规约五大块，再根据内容特征，细分成若干二级子目录。根据约束力强弱和故障敏感性，规约依次分为强制、推荐、参考三大类。此套规范不仅能让代码一目了然， 更有助于加强团队分工与合作、真正提升效率。 </p>
<p><strong>无规矩不成方圆 无规范不能协作</strong></p>
<p>众所周知，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全。试想如果没有限速，没有红绿灯，没有规定靠右行驶，谁还敢上路行驶。 </p>
<p>同理，对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的方式一起做事，降低故障率，提升协作效率。开发手册详细列举如何开发更加高效，更加容错，更加有协作性，力求知其然，更知其不然，结合正反例，提高代码质量。比如，异常日志处理时的各种不规范行为；集合转换的各种坑；创建线程池出现的等待队列OOM等。 </p>
<p><strong>阿里技术资深大咖联袂推荐</strong></p>
<p><strong>阿里高级研究员多隆：</strong>工程师对于代码，一定要“精益求精”，不论从性能，还是简洁优雅，都要具备“精益求精”的工匠精神，认真打磨自己的作品。 </p>
<p><strong>阿里研究员毕玄：</strong>一个优秀的工程师和一个普通工程师的区别，不是现在满天飞的架构图，他的功底就是体现在他写的每一行代码上。 </p>
<p><strong>阿里研究员玄难：</strong>代码是软件工程里面的产品设计、系统架构设计等工作的最后承载体，代码的质量决定了一切工作的成败。 </p>
<p><strong>阿里巴巴B2B事业群CTO李纯：</strong>好的软件产品离不开工程师高质量的代码及相互间顺畅的沟通与合作。简单，适用的代码规约背后所传递的是技术上的追求卓越、协同合作的精神，是每个技术团队不可缺失的重要利器。 </p>
<p><strong>阿里研究员、HipHop作者：赵海平（花名：福贝）：</strong>程序员是创造个性化作品的艺术家，但同时也是需要团队合作的工种。个性化应尽量表现在代码效率和算法方面，牺牲小我，成就大我。 </p>
<p><strong>拥抱规范，远离伤害！</strong></p>
<p>开发的同学们赶紧行动起来，遵守代码规范，你好，我好，大家好！ </p>
<hr>
<p>扩展阅读：</p>
<p><a href="//www.zhihu.com/question/55642203">知乎–如何评价阿里近期发布的Java编码规范？</a></p>
<p><a href="//yq.aliyun.com/articles/69327?utm_campaign=javac&amp;utm_medium=images&amp;utm_source=renyimen&amp;utm_content=m_10068">云栖社区–【Java编码规范】《阿里巴巴Java开发手册（正式版）》发布！</a></p>
<p><a href="//gold.xitu.io/entry/589c173b8d6d81006c7e9f70">掘金–【Java编码规范】《阿里巴巴Java开发手册（正式版）》发布！</a></p>
<p><a href="//yq.aliyun.com/roundtable/47961?spm=5176.100239.blogcont69327.8.NO0IAQ">云栖社区-话题讨论-Java开发者们，一起来聊聊大家的开发规约吧</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年2月9日阿里巴巴发布了一份《阿里巴巴Java开发手册（正式版）》，引起了互联网上程序员们广泛讨论。&lt;/p&gt;
&lt;p&gt;作为一名java伪初学者，得知这个消息还是要尽快来学习学习的。毕竟是阿里巴巴出的编码规范，总是会对初学者有很大帮助吧。一份好的编码规约，能够让编程少踩很多坑；一个好的编程习惯，能让以后的编程旅途更加顺畅。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//pan.baidu.com/s/1c202zNM&quot;&gt;点击进行百度云下载&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://xelengo.me/tags/java/"/>
    
      <category term="知识分享" scheme="http://xelengo.me/tags/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
      <category term="阿里巴巴" scheme="http://xelengo.me/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4/"/>
    
      <category term="开发手册" scheme="http://xelengo.me/tags/%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"/>
    
      <category term="代码规范" scheme="http://xelengo.me/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Python3.6安装教程</title>
    <link href="http://xelengo.me/2017/02/04/20170204_2/"/>
    <id>http://xelengo.me/2017/02/04/20170204_2/</id>
    <published>2017-02-04T02:43:33.173Z</published>
    <updated>2017-12-10T10:00:04.738Z</updated>
    
    <content type="html"><![CDATA[<p>首先。先看一下Python的简介：</p>
<p>Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/），是一种面向对象、解释型的计算机程序语言。它包含了一组功能完备的标准库，能够轻松完成很多常见的任务。它的语法简单，与其它大多数程序设计语言使用大括号不一样，它使用缩进来定义语句块。</p>
<a id="more"></a>
<p>与Scheme、Ruby、Perl、Tcl等动态语言一样，Python具备垃圾回收功能，能够自动管理内存使用。它经常被当作脚本语言用于处理系统管理任务和网络程序编写，然而它也非常适合完成各种高级任务。Python虚拟机本身几乎可以在所有的作业系统中运行。使用一些诸如py2exe、PyPy、PyInstaller之类的工具可以将Python源代码转换成可以脱离Python解释器运行的程序。</p>
<p>Python的官方解释器是CPython，该解释器用C语言编写，是一个由社区驱动的自由软件，目前由Python软件基金会管理。</p>
<p>Python支持命令式程序设计、面向对象程序设计、函数式编程、面向侧面的程序设计、泛型编程多种编程范式。</p>
<p>from:<a href="//zh.wikipedia.org/wiki/Python">wiki</a></p>
<h2 id="在Windows上安装Python"><a href="#在Windows上安装Python" class="headerlink" title="在Windows上安装Python"></a>在Windows上安装Python</h2><p>首先，根据你的Windows版本（64位还是32位）从Python的官方网站下载Python 3.6对应的64位安装程序或32位安装程序（网速慢的同学请移步国内镜像），<a href="//www.python.org/downloads/release/python-360/">点击下载</a></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_093828.png" alt="图片1"></p>
<p>然后，运行下载的EXE安装包：</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_094019.png" alt="图片2"></p>
<p>特别要注意勾上<code>Add Python 3.6 to PATH</code>，然后点“Install Now”即可完成安装。</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_094033.png" alt="图片3"></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_094138.png" alt="图片4"></p>
<p>默认会安装到<code>C:\Users\用户名\AppData\Local\Programs\Python\Python36</code>目录下，然后打开命令提示符窗口，敲入python后，会出现两种情况：</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_094217.png" alt="图片5"></p>
<p>看到上面的画面，就说明Python安装成功！</p>
<p>你看到提示符&gt;&gt;&gt;就表示我们已经在Python交互式环境中了，可以输入任何Python代码，回车后会立刻得到执行结果。现在，输入exit()并回车，就可以退出Python交互式环境（直接关掉命令行窗口也可以）。</p>
<p>情况二：得到一个错误：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">‘<span class="keyword">python</span>’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</div></pre></td></tr></table></figure>
<p>这是因为Windows会根据一个Path的环境变量设定的路径去查找python.exe，如果没找到，就会报错。如果在安装时漏掉了勾选Add Python 3.5 to PATH，那就要手动把python.exe所在的路径添加到Path中。</p>
<p>如果你不知道怎么修改环境变量，建议把Python安装程序重新运行一遍，务必记得勾上Add Python 3.5 to PATH。</p>
<hr>
<h2 id="参考教程："><a href="#参考教程：" class="headerlink" title="参考教程："></a>参考教程：</h2><p><a href="//wizardforcel.gitbooks.io/liaoxuefeng/content/py3/4.html">安装Python–廖雪峰</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先。先看一下Python的简介：&lt;/p&gt;
&lt;p&gt;Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/），是一种面向对象、解释型的计算机程序语言。它包含了一组功能完备的标准库，能够轻松完成很多常见的任务。它的语法简单，与其它大多数程序设计语言使用大括号不一样，它使用缩进来定义语句块。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySql" scheme="http://xelengo.me/tags/MySql/"/>
    
      <category term="教程" scheme="http://xelengo.me/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="数据库" scheme="http://xelengo.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>window10安装mysql数据库</title>
    <link href="http://xelengo.me/2017/02/04/20170204_1/"/>
    <id>http://xelengo.me/2017/02/04/20170204_1/</id>
    <published>2017-02-04T00:55:36.373Z</published>
    <updated>2017-12-10T10:01:11.009Z</updated>
    
    <content type="html"><![CDATA[<p>mysql是一个轻量级的数据库，非常适合独立开发者安装到自己的电脑上进行程序开发和测试。</p>
<h3 id="Mysql关系型数据库管理系统"><a href="#Mysql关系型数据库管理系统" class="headerlink" title="Mysql关系型数据库管理系统"></a>Mysql关系型数据库管理系统</h3><p>MySQL是一个开放源码的小型关联式数据库管理系统，开发者为瑞典MySQL AB公司。MySQL被广泛地应用在Internet上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了MySQL作为网站数据库。</p>
<p>这篇文章主要为大家分享了mysql 5.7.13 安装配置方法图文教程,感兴趣的朋友可以参考一下</p>
<a id="more"></a>
<p>MySQL是一款关系型数据库管理系统，是由Oracle旗下公司MySQL AB 公司开发，是在web方面最好的、最流行的关系型数据库软件应用之一，深受广大个人使用者以及中小型企业的喜爱。</p>
<h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>当前最新版5.7.17.0  官网下载地址：<a href="//dev.mysql.com/downloads/installer/">https://dev.mysql.com/downloads/installer/</a></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_090312.png" alt="图片1"></p>
<p>上面明确提示：MySQL安装程序是32位的，但会同时安装32位和64位二进制文件。 所以同样适用于32位和64位的Window操作系统。</p>
<p>下载的地方有两个，上面一个1.5M的是在线安装程序，我们下载下面一个234.8M的，下载后可直接安装。点击 : Download,  出现如下：</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_090919.png" alt="图片1"></p>
<p>跳过登陆，直接进行下载，直接点击左下角 ：<strong>No thanks,just start my download  </strong> 进行下载。</p>
<p>校验：</p>
<p>大小: 405422080 字节</p>
<p>MD5: E03723EB6C6BAC271A848BD9031EA859</p>
<p>SHA1: 064CE58B994314A5F055851BA4B762A37908439B</p>
<p>CRC32: FAF8B4EF</p>
<p>效验工具：Hash.exe</p>
<p>下载好后进行安装</p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>双击安装文件，进入安装，在协议许可（LicenseAgreement）界面，勾选“I  accept  the  license  term”，然后点击“next”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_091333.png" alt="图片1"></p>
<p>在选择安装类型（ChoosingaSetupType）界面，根据安装需求选择安装类型（推荐默认开发版本），设置<strong>MySQL安装路径</strong>和<strong>数据存放路径</strong>，最后点击“next”。</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_091748.png" alt="图片1"></p>
<p>在检查要求（CheckRequirements）界面，点击“Execute”检查是否达到安装的要求，通过检查要求后点击“next‘</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_092504.png" alt="图片1"></p>
<p><strong>注意：</strong>点击“Execute”按钮后，可能会下载一些程序，到时你自己点击安装就行了，直到所有安装完成就OK了</p>
<p>因为我的电脑安装有visuao studio 和python 2.7,而这个版本的mysql支持的是python3.4;所以会检查不通过,不用管它，继续next。</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_093010.png" alt="图片1"></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_094450.png" alt="图片1"></p>
<p>在安装（Installation）界面，点击“Execute”开始安装，所有的product安装完毕后点击“next”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_094501.png" alt="图片1"></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_094948.png" alt="图片1"></p>
<p>在配置概述（Product Configuration）界面，点击“next”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_094958.png" alt="图片1"></p>
<p>在MySQL服务配置（Type and Networking - ServerConfiguration Type）界面，勾选Show Advanced Options，其他的默认不做修改，点击“next”。</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_095010.png" alt="图片1"></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_095349.png" alt="图片1"></p>
<p>在账号和角色设置（Accounts and Roles）界面，设置根账户（root账户）密码，添加一个MySQL User Accounts（非根）用户账户。其目的是便于数据库权限管理，为远程访问者提供安全账户，点击“next”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_095733.png" alt="图片1"></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_095815.png" alt="图片1"></p>
<p>在Windows Service界面，默认windows服务配置不做修改，点击“next”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_095854.png" alt="图片1"></p>
<p>在插件与扩展（Plugins and Extensions）界面，默认设置，点击“next”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100200.png" alt="图片1"></p>
<p>在高级选项设置（Advanced Options）界面，默认原有设置，点击“next”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100211.png" alt="图片1"></p>
<p>在应用服务器配置（Apply Server Configuration）界面，点击“Execute”，当所有的配置执行完毕后，configuration for mysql server 5.7.13 has successed，点击“finish”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100224.png" alt="图片1"></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100250.png" alt="图片1"></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100259.png" alt="图片1"></p>
<p>在产品配置（Product Configuration）界面，点击“next”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100307.png" alt="图片1"></p>
<p>在连接到服务器（Connect To Server）界面，点击“check”，测试服务器是否连接成功，连接成功后，点击“next”，</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100316.png" alt="图片1"></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100422.png" alt="图片1"></p>
<p>回到应用服务器配置（Apply Server Configuration）界面，点击“Execute”，配置成功后，点击“finish”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100431.png" alt="图片1"></p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100512.png" alt="图片1"></p>
<p>回到产品配置（Product Configuration）界面，点击“next”，</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100520.png" alt="图片1"></p>
<p>在安装完成（Installation Complete）界面，点击“finish”</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_100619.png" alt="图片1"></p>
<p>以上就是mysql 5.7.13安装配置方法，希望对大家的学习有所帮助。</p>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>接下来会自动打开MySQL Workbench，再测试一下：</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_102407.png" alt="图片1"></p>
<p>输入超级管理员密码，进行登录</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_101454.png" alt="图片1"></p>
<p>登陆成功</p>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_101604.png" alt="图片1"></p>
<p>输入sql语句进行测试；</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">database</span>;</div></pre></td></tr></table></figure>
<p><img src="/assets/img/blogimg/20170204/2017-02-04_101700.png" alt="图片1"></p>
<p>好了，本教程结束</p>
<hr>
<h2 id="参考教程："><a href="#参考教程：" class="headerlink" title="参考教程："></a>参考教程：</h2><p>mysql下载： <a href="//blog.csdn.net/wtfmonking/article/details/17467399">http://blog.csdn.net/wtfmonking/article/details/17467399</a></p>
<p>安装： <a href="//www.phperz.com/article/16/0703/231883.html">http://www.phperz.com/article/16/0703/231883.html</a></p>
<p>测试： <a href="//jingyan.baidu.com/article/7e440953d6f0702fc1e2ef61.html">http://jingyan.baidu.com/article/7e440953d6f0702fc1e2ef61.html</a></p>
<p>RUNOOB教程：<a href="//www.runoob.com/mysql/mysql-install.html">http://www.runoob.com/mysql/mysql-install.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql是一个轻量级的数据库，非常适合独立开发者安装到自己的电脑上进行程序开发和测试。&lt;/p&gt;
&lt;h3 id=&quot;Mysql关系型数据库管理系统&quot;&gt;&lt;a href=&quot;#Mysql关系型数据库管理系统&quot; class=&quot;headerlink&quot; title=&quot;Mysql关系型数据库管理系统&quot;&gt;&lt;/a&gt;Mysql关系型数据库管理系统&lt;/h3&gt;&lt;p&gt;MySQL是一个开放源码的小型关联式数据库管理系统，开发者为瑞典MySQL AB公司。MySQL被广泛地应用在Internet上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了MySQL作为网站数据库。&lt;/p&gt;
&lt;p&gt;这篇文章主要为大家分享了mysql 5.7.13 安装配置方法图文教程,感兴趣的朋友可以参考一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="win10" scheme="http://xelengo.me/tags/win10/"/>
    
      <category term="MySql" scheme="http://xelengo.me/tags/MySql/"/>
    
      <category term="教程" scheme="http://xelengo.me/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>写博客随笔（四）</title>
    <link href="http://xelengo.me/2017/02/03/20170203-2/"/>
    <id>http://xelengo.me/2017/02/03/20170203-2/</id>
    <published>2017-02-03T11:02:53.773Z</published>
    <updated>2017-02-03T11:21:31.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="公布两份-config-yml"><a href="#公布两份-config-yml" class="headerlink" title="公布两份_config.yml"></a>公布两份<code>_config.yml</code></h1><h3 id="hexo根目录下的-config"><a href="#hexo根目录下的-config" class="headerlink" title="hexo根目录下的_config"></a>hexo根目录下的_config</h3><a id="more"></a>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site #站点信息</span></div><div class="line"><span class="attr">title:</span> XElengo的个人博客</div><div class="line"><span class="attr">subtitle:</span> 从今天起，立志改变</div><div class="line"><span class="attr">description:</span> 我的个人学习&amp;生活记录</div><div class="line"><span class="attr">author:</span> Xulinhu</div><div class="line"><span class="attr">email:</span> <span class="number">18838969833</span>@<span class="number">163.</span>com</div><div class="line"><span class="attr">keywords:</span> <span class="string">"Java,Android,C#,HTML5"</span></div><div class="line"><span class="attr">language:</span> zh-CN</div><div class="line"><span class="attr">timezone:</span> </div><div class="line"></div><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> https://xelengo.github.io/</div><div class="line"><span class="attr">root:</span> /</div><div class="line"><span class="attr">permalink:</span> :year/:month/:day/:title/</div><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="comment"># Directory #目录</span></div><div class="line"><span class="attr">source_dir:</span> source</div><div class="line"><span class="attr">public_dir:</span> public</div><div class="line"><span class="attr">tag_dir:</span> tags</div><div class="line"><span class="attr">archive_dir:</span> archives</div><div class="line"><span class="attr">category_dir:</span> categories</div><div class="line"><span class="attr">code_dir:</span> downloads/code</div><div class="line"><span class="attr">i18n_dir:</span> :lang</div><div class="line"><span class="attr">skip_render:</span></div><div class="line"></div><div class="line"><span class="comment"># Writing # 写作</span></div><div class="line"><span class="attr">new_post_name:</span> :title.md <span class="comment"># File name of new posts</span></div><div class="line"><span class="attr">default_layout:</span> post <span class="comment">#默认模板(post page photo draft)</span></div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span></div><div class="line"><span class="attr">highlight:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  tab_replace:</span> <span class="string">''</span></div><div class="line"></div><div class="line"><span class="comment"># Category &amp; Tag #分类和标签</span></div><div class="line"><span class="attr">default_category:</span> uncategorized</div><div class="line"><span class="attr">category_map:</span></div><div class="line"><span class="attr">tag_map:</span></div><div class="line"></div><div class="line"><span class="comment"># Archives</span></div><div class="line"><span class="comment">## 2: Enable pagination</span></div><div class="line"><span class="comment">## 1: Disable pagination</span></div><div class="line"><span class="comment">## 0: Fully Disable</span></div><div class="line"><span class="attr">archive:</span> <span class="number">1</span></div><div class="line"><span class="attr">category:</span> <span class="number">1</span></div><div class="line"><span class="attr">tag:</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># Date / Time format #日期时间格式</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="attr">date_format:</span> YYYY-MM-DD</div><div class="line"><span class="attr">time_format:</span> HH:mm:ss</div><div class="line"></div><div class="line"><span class="comment"># Pagination #分页</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">pagination_dir:</span> page</div><div class="line"></div><div class="line"><span class="comment"># Disqus  #Disqus评论系统</span></div><div class="line"><span class="attr">disqus_shortname:</span></div><div class="line"></div><div class="line"><span class="comment"># Extensions #插件和主题</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> yilia</div><div class="line"><span class="attr">exclude_generator:</span></div><div class="line"></div><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">    type:</span> atom</div><div class="line"><span class="attr">    path:</span> atom.xml</div><div class="line"><span class="attr">    limit:</span> <span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment"># Deployment #部署, 同时发布在 GitHub 和 GitCafe 上面</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="comment"># deploy:</span></div><div class="line"><span class="comment">#  type: git</span></div><div class="line"><span class="comment">#  repository: https://github.com/xelengo/xelengo.github.io.git  //jarson7426替换为你自己的用户名</span></div><div class="line"><span class="comment">#  branch: master</span></div><div class="line">  </div><div class="line"><span class="comment"># deploy:</span></div><div class="line"><span class="comment"># - type: git</span></div><div class="line"><span class="comment">#  repo: git@gitcafe.com:username/username.git,gitcafe-pages</span></div><div class="line"><span class="comment"># - type: git</span></div><div class="line"><span class="comment">#  repo: git@github.com:username/username.github.io.git,master </span></div><div class="line"></div><div class="line"><span class="comment"># plugins: #插件，例如生成 RSS 和站点地图的</span></div><div class="line"><span class="comment"># - hexo-generator-feed</span></div><div class="line"><span class="comment"># - hexo-generator-sitemap</span></div><div class="line"> </div><div class="line"><span class="attr">jsonContent:</span></div><div class="line"><span class="attr">    meta:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    pages:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    posts:</span></div><div class="line"><span class="attr">      title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      date:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      content:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      slug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      updated:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      permalink:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      excerpt:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      categories:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      tags:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="yilia根目录下的-config"><a href="#yilia根目录下的-config" class="headerlink" title="yilia根目录下的_config"></a>yilia根目录下的_config</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site #站点信息</span></div><div class="line"><span class="attr">title:</span> XElengo的个人博客</div><div class="line"><span class="attr">subtitle:</span> 从今天起，立志改变</div><div class="line"><span class="attr">description:</span> 我的个人学习&amp;生活记录</div><div class="line"><span class="attr">author:</span> Xulinhu</div><div class="line"><span class="attr">email:</span> <span class="number">18838969833</span>@<span class="number">163.</span>com</div><div class="line"><span class="attr">keywords:</span> <span class="string">"Java,Android,C#,HTML5"</span></div><div class="line"><span class="attr">language:</span> zh-CN</div><div class="line"><span class="attr">timezone:</span> </div><div class="line"></div><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="attr">url:</span> https://xelengo.github.io/</div><div class="line"><span class="attr">root:</span> /</div><div class="line"><span class="attr">permalink:</span> :year/:month/:day/:title/</div><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="comment"># Directory #目录</span></div><div class="line"><span class="attr">source_dir:</span> source</div><div class="line"><span class="attr">public_dir:</span> public</div><div class="line"><span class="attr">tag_dir:</span> tags</div><div class="line"><span class="attr">archive_dir:</span> archives</div><div class="line"><span class="attr">category_dir:</span> categories</div><div class="line"><span class="attr">code_dir:</span> downloads/code</div><div class="line"><span class="attr">i18n_dir:</span> :lang</div><div class="line"><span class="attr">skip_render:</span></div><div class="line"></div><div class="line"><span class="comment"># Writing # 写作</span></div><div class="line"><span class="attr">new_post_name:</span> :title.md <span class="comment"># File name of new posts</span></div><div class="line"><span class="attr">default_layout:</span> post <span class="comment">#默认模板(post page photo draft)</span></div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span></div><div class="line"><span class="attr">highlight:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  tab_replace:</span> <span class="string">''</span></div><div class="line"></div><div class="line"><span class="comment"># Category &amp; Tag #分类和标签</span></div><div class="line"><span class="attr">default_category:</span> uncategorized</div><div class="line"><span class="attr">category_map:</span></div><div class="line"><span class="attr">tag_map:</span></div><div class="line"></div><div class="line"><span class="comment"># Archives</span></div><div class="line"><span class="comment">## 2: Enable pagination</span></div><div class="line"><span class="comment">## 1: Disable pagination</span></div><div class="line"><span class="comment">## 0: Fully Disable</span></div><div class="line"><span class="attr">archive:</span> <span class="number">1</span></div><div class="line"><span class="attr">category:</span> <span class="number">1</span></div><div class="line"><span class="attr">tag:</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># Date / Time format #日期时间格式</span></div><div class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="comment">## You can customize the date format as defined in</span></div><div class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="attr">date_format:</span> YYYY-MM-DD</div><div class="line"><span class="attr">time_format:</span> HH:mm:ss</div><div class="line"></div><div class="line"><span class="comment"># Pagination #分页</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">pagination_dir:</span> page</div><div class="line"></div><div class="line"><span class="comment"># Disqus  #Disqus评论系统</span></div><div class="line"><span class="attr">disqus_shortname:</span></div><div class="line"></div><div class="line"><span class="comment"># Extensions #插件和主题</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> yilia</div><div class="line"><span class="attr">exclude_generator:</span></div><div class="line"></div><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">    type:</span> atom</div><div class="line"><span class="attr">    path:</span> atom.xml</div><div class="line"><span class="attr">    limit:</span> <span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment"># Deployment #部署, 同时发布在 GitHub 和 GitCafe 上面</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="comment"># deploy:</span></div><div class="line"><span class="comment">#  type: git</span></div><div class="line"><span class="comment">#  repository: https://github.com/xelengo/xelengo.github.io.git  //jarson7426替换为你自己的用户名</span></div><div class="line"><span class="comment">#  branch: master</span></div><div class="line">  </div><div class="line"><span class="comment"># deploy:</span></div><div class="line"><span class="comment"># - type: git</span></div><div class="line"><span class="comment">#  repo: git@gitcafe.com:username/username.git,gitcafe-pages</span></div><div class="line"><span class="comment"># - type: git</span></div><div class="line"><span class="comment">#  repo: git@github.com:username/username.github.io.git,master </span></div><div class="line"></div><div class="line"><span class="comment"># plugins: #插件，例如生成 RSS 和站点地图的</span></div><div class="line"><span class="comment"># - hexo-generator-feed</span></div><div class="line"><span class="comment"># - hexo-generator-sitemap</span></div><div class="line"> </div><div class="line"><span class="attr">jsonContent:</span></div><div class="line"><span class="attr">    meta:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    pages:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    posts:</span></div><div class="line"><span class="attr">      title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      date:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      content:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      slug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      updated:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      permalink:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      excerpt:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      categories:</span> <span class="literal">false</span></div><div class="line"><span class="attr">      tags:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;公布两份-config-yml&quot;&gt;&lt;a href=&quot;#公布两份-config-yml&quot; class=&quot;headerlink&quot; title=&quot;公布两份_config.yml&quot;&gt;&lt;/a&gt;公布两份&lt;code&gt;_config.yml&lt;/code&gt;&lt;/h1&gt;&lt;h3 id=&quot;hexo根目录下的-config&quot;&gt;&lt;a href=&quot;#hexo根目录下的-config&quot; class=&quot;headerlink&quot; title=&quot;hexo根目录下的_config&quot;&gt;&lt;/a&gt;hexo根目录下的_config&lt;/h3&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>写博客随笔（三）</title>
    <link href="http://xelengo.me/2017/02/03/20170203-1/"/>
    <id>http://xelengo.me/2017/02/03/20170203-1/</id>
    <published>2017-02-03T04:50:34.505Z</published>
    <updated>2017-12-10T14:39:43.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yilia主题使用和配置"><a href="#yilia主题使用和配置" class="headerlink" title="yilia主题使用和配置"></a>yilia主题使用和配置</h1><p>本篇内容转自 <a href="//litten.me/2014/08/31/hexo-theme-yilia/">litten.me</a></p>
<h2 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h2><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>
<h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h4><p>修改hexo根目录下的 _config.yml ： theme: yilia</p>
<h4 id="3-更新"><a href="#3-更新" class="headerlink" title="3. 更新"></a>3. 更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/yilia</div><div class="line">git pull</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>主题配置文件在主目录下的_config.yml：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Header</span></div><div class="line"><span class="symbol">menu:</span></div><div class="line">  主页: /</div><div class="line">  所有文章: /archives</div><div class="line">  <span class="meta"># 旧事: /tags/旧事</span></div><div class="line"><span class="meta"># SubNav</span></div><div class="line"><span class="symbol">subnav:</span></div><div class="line"><span class="symbol">  github:</span> <span class="string">"https://github.com/litten"</span></div><div class="line"><span class="symbol">  weibo:</span> <span class="string">"http://weibo.com/litten225"</span></div><div class="line"><span class="symbol">  rss:</span> <span class="string">"http://feed.feedsky.com/litten"</span></div><div class="line">  <span class="meta"># facebook: <span class="string">"/"</span></span></div><div class="line">  <span class="meta"># google: <span class="string">"/"</span></span></div><div class="line">  <span class="meta"># twitter: <span class="string">"/"</span></span></div><div class="line">  <span class="meta"># linkedin: <span class="string">"/"</span></span></div><div class="line"><span class="symbol">rss:</span> /atom.xml</div><div class="line"><span class="meta"># Content</span></div><div class="line"><span class="symbol">excerpt_link:</span> more</div><div class="line"><span class="symbol">fancybox:</span> true</div><div class="line"><span class="meta"># Miscellaneous</span></div><div class="line"><span class="symbol">favicon:</span> /favicon.png</div><div class="line"><span class="symbol">avatar:</span> <span class="string">"https://avatars2.githubusercontent.com/u/2024949?v=2&amp;s=150"</span></div><div class="line"><span class="symbol">share:</span> true</div><div class="line"><span class="symbol">duoshuo:</span> true</div></pre></td></tr></table></figure>
<p><br></p>
<p><strong>禁止评论</strong>可以通过修改你的.md文章的头部实现。设置comments:false即可。</p>
<h2 id="三、-hexo指令集"><a href="#三、-hexo指令集" class="headerlink" title="三、 hexo指令集"></a>三、 hexo指令集</h2><p>Git Shell 在你的<code>hexo</code>根目录下输入：<code>hexo</code>可查看</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo</span></div></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Usage</span>: hexo &lt;command&gt;</div><div class="line"></div><div class="line"><span class="livecodeserver">Commands:</span></div><div class="line">  clean     Removed generated <span class="built_in">files</span> <span class="keyword">and</span> cache.</div><div class="line">  config    Get <span class="keyword">or</span> <span class="built_in">set</span> configurations.</div><div class="line">  deploy    Deploy your website.</div><div class="line">  generate  Generate static <span class="built_in">files</span>.</div><div class="line">  help      Get help <span class="keyword">on</span> <span class="title">a</span> <span class="title">command</span>.</div><div class="line">  init      Create <span class="keyword">a</span> <span class="built_in">new</span> Hexo <span class="built_in">folder</span>.</div><div class="line">  list      List <span class="keyword">the</span> information <span class="keyword">of</span> <span class="keyword">the</span> site</div><div class="line">  migrate   Migrate your site <span class="built_in">from</span> other <span class="keyword">system</span> <span class="built_in">to</span> Hexo.</div><div class="line">  <span class="built_in">new</span>       Create <span class="keyword">a</span> <span class="built_in">new</span> <span class="built_in">post</span>.</div><div class="line">  publish   Moves <span class="keyword">a</span> draft <span class="built_in">post</span> <span class="built_in">from</span> <span class="title">_drafts</span> <span class="built_in">to</span> <span class="title">_posts</span> <span class="built_in">folder</span>.</div><div class="line">  render    Render <span class="built_in">files</span> <span class="keyword">with</span> renderer plugins.</div><div class="line">  server    Start <span class="keyword">the</span> server.</div><div class="line">  <span class="built_in">version</span>   Display <span class="built_in">version</span> information.</div><div class="line"></div><div class="line">Global Options:</div><div class="line">  <span class="comment">--config  Specify config file instead of using _config.yml</span></div><div class="line">  <span class="comment">--cwd     Specify the CWD</span></div><div class="line">  <span class="comment">--debug   Display all verbose messages in the terminal</span></div><div class="line">  <span class="comment">--draft   Display draft posts</span></div><div class="line">  <span class="comment">--safe    Disable all plugins and scripts</span></div><div class="line">  <span class="comment">--silent  Hide output on console</span></div><div class="line"></div><div class="line">For more help, you can use <span class="string">'hexo help [command]'</span> <span class="keyword">for</span> <span class="keyword">the</span> <span class="keyword">detailed</span> information</div><div class="line"><span class="keyword">or</span> you can check <span class="keyword">the</span> docs: <span class="keyword">http</span>://hexo.io/docs/</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;yilia主题使用和配置&quot;&gt;&lt;a href=&quot;#yilia主题使用和配置&quot; class=&quot;headerlink&quot; title=&quot;yilia主题使用和配置&quot;&gt;&lt;/a&gt;yilia主题使用和配置&lt;/h1&gt;&lt;p&gt;本篇内容转自 &lt;a href=&quot;//litten.me/2014/08/31/hexo-theme-yilia/&quot;&gt;litten.me&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、使用&quot;&gt;&lt;a href=&quot;#一、使用&quot; class=&quot;headerlink&quot; title=&quot;一、使用&quot;&gt;&lt;/a&gt;一、使用&lt;/h2&gt;&lt;h4 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1. 安装&quot;&gt;&lt;/a&gt;1. 安装&lt;/h4&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;https&lt;/span&gt;://github.com/litten/hexo-theme-yilia.git themes/yilia&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-配置&quot;&gt;&lt;a href=&quot;#2-配置&quot; class=&quot;headerlink&quot; title=&quot;2. 配置&quot;&gt;&lt;/a&gt;2. 配置&lt;/h4&gt;&lt;p&gt;修改hexo根目录下的 _config.yml ： theme: yilia&lt;/p&gt;
&lt;h4 id=&quot;3-更新&quot;&gt;&lt;a href=&quot;#3-更新&quot; class=&quot;headerlink&quot; title=&quot;3. 更新&quot;&gt;&lt;/a&gt;3. 更新&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; themes/yilia&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git pull&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="http://xelengo.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="分享" scheme="http://xelengo.me/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>写博客随笔（二）</title>
    <link href="http://xelengo.me/2017/02/02/20170202-2/"/>
    <id>http://xelengo.me/2017/02/02/20170202-2/</id>
    <published>2017-02-02T11:16:04.226Z</published>
    <updated>2017-12-10T09:58:55.819Z</updated>
    
    <content type="html"><![CDATA[<p>测试</p>
<h3 id="设置标题，标签："><a href="#设置标题，标签：" class="headerlink" title="设置标题，标签："></a>设置标题，标签：</h3><p><code>title:  测试</code></p>
<p><code>tags: [随笔,测试标签]</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">设置标签可以通过下面两种方式实现</div><div class="line"><span class="string">menu:</span></div><div class="line">主页: /</div><div class="line">所有文章: /archives</div><div class="line">前端: <span class="regexp">/categories/</span>前端</div><div class="line">随笔: <span class="regexp">/tags/</span>随笔</div><div class="line"></div><div class="line">在post的顶部添加<span class="string">categories:</span> 前端 ，<span class="string">tags:</span> 随笔</div><div class="line"></div><div class="line">或者</div><div class="line"><span class="string">menu:</span></div><div class="line">主页: /</div><div class="line">所有文章: /archives</div><div class="line">前端: <span class="regexp">/tags/</span>前端</div><div class="line">随笔: <span class="regexp">/tags/</span>随笔</div></pre></td></tr></table></figure>
<p>在post的顶部添加tags: [随笔, 前端]</p>
<p>使用yilia主题时，文章过长使用<code>&lt;!-- more --&gt;</code>截断文章，示例如第一篇博客。</p>
<p>yilia模板范例：<br><a href="//litten.me/">yilia博客</a></p>
<a id="more"></a>
<h3 id="测试插入图片："><a href="#测试插入图片：" class="headerlink" title="测试插入图片："></a>测试插入图片：</h3><p>网络(绝对)路径(显示大图可获得该路径)：<br><img src="//raw.githubusercontent.com/XElengo/XElengo.github.io/master/assets/img/blogimg/1a.png" alt="text"></p>
<p>相对路径：<br><img src="/assets/img/blogimg/1c.png" alt="相对"></p>
<p>语法高亮:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">cpp</span> &#123;<span class="attribute">int</span> a,b;&#125;</div></pre></td></tr></table></figure>
<hr>
<p>测试网易云音乐插件：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29811171&auto=0&height=66"></iframe>

<h3 id="yilia-多说评论插件使用"><a href="#yilia-多说评论插件使用" class="headerlink" title="yilia 多说评论插件使用"></a>yilia 多说评论插件使用</h3><p>多说插件<code>duoshuo: &quot;xxxx&quot;</code> 已设置，但是无法成功显示，浏览器调试工具console报错：990002</p>
<p>自己解决了，方法虽然不太好；写死这个地方yilia\layout_partial\post\duoshuo.ejs ： var duoshuoQuery = {short_name:”xelengo”};<br>short_name是用多说网站生成的模板 即 工具–&gt;通用代码中的short_name，即 多说–&gt;设置 那里的域名的第一部分，如：xelengo.duoshuo.com 中的xelengo。因为多说的账户名称可以修改，但注册账号时的多说域名不可修改，且账户名称与域名的第一部分允许不同，而多说评论插件是通过访问多说域名进行显示的。所以可能会出错吧。另外本地缓存，github上的代码，以及多说本身都会影响运行结果。谢谢 @litten 提供的模板</p>
<p>参见：<a href="https://github.com/litten/hexo-theme-yilia/issues/28" target="_blank" rel="external">//github.com/litten/hexo-theme-yilia/issues/28</a></p>
<p>待在线浏览成功后可以再把var duoshuoQuery = {short_name:”xelengo”};改回去。重新发布后评论栏依然存在。由此可以把锅甩给缓存了。。。</p>
<p>试试代码高亮：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">table</span>&#123;</div><div class="line">  <span class="attribute">background</span>:grey;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">addListen</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span>  arrTrs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'tr'</span>);</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arrTrs.length;i++)&#123;</div><div class="line">      </div><div class="line">        <span class="keyword">var</span> ss = arrTrs[i] ;</div><div class="line">        <span class="keyword">if</span>(arrTrs[i].addEventListener)&#123;</div><div class="line">            arrTrs[i].addEventListener(<span class="string">'click'</span>,setTable)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            arrTrs[i].attachEvent(<span class="string">"onclick"</span>,setTable);</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">   &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTable</span>(<span class="params">evt</span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span>  arrTrs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'tr'</span>);</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arrTrs.length;i++)&#123;</div><div class="line">          arrTrs[i].style.background=<span class="string">'grey'</span>;</div><div class="line">       &#125;</div><div class="line">       evt.target.parentNode.style.background=<span class="string">'red'</span>;</div><div class="line">       </div><div class="line">       </div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">'addListen()'</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">1</span> <span class="attr">width</span>=<span class="string">'400px'</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      </div><div class="line">   <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>###有任何无法解释的异常都可以试试这三个命令：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo <span class="keyword">g</span></div><div class="line">hexo <span class="keyword">d</span>  <span class="comment">//发布，手动发布可忽略</span></div><div class="line">hexo <span class="built_in">s</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试&lt;/p&gt;
&lt;h3 id=&quot;设置标题，标签：&quot;&gt;&lt;a href=&quot;#设置标题，标签：&quot; class=&quot;headerlink&quot; title=&quot;设置标题，标签：&quot;&gt;&lt;/a&gt;设置标题，标签：&lt;/h3&gt;&lt;p&gt;&lt;code&gt;title:  测试&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tags: [随笔,测试标签]&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;设置标签可以通过下面两种方式实现&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;menu:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;主页: /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;所有文章: /archives&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;前端: &lt;span class=&quot;regexp&quot;&gt;/categories/&lt;/span&gt;前端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;随笔: &lt;span class=&quot;regexp&quot;&gt;/tags/&lt;/span&gt;随笔&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在post的顶部添加&lt;span class=&quot;string&quot;&gt;categories:&lt;/span&gt; 前端 ，&lt;span class=&quot;string&quot;&gt;tags:&lt;/span&gt; 随笔&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;或者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;menu:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;主页: /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;所有文章: /archives&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;前端: &lt;span class=&quot;regexp&quot;&gt;/tags/&lt;/span&gt;前端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;随笔: &lt;span class=&quot;regexp&quot;&gt;/tags/&lt;/span&gt;随笔&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在post的顶部添加tags: [随笔, 前端]&lt;/p&gt;
&lt;p&gt;使用yilia主题时，文章过长使用&lt;code&gt;&amp;lt;!-- more --&amp;gt;&lt;/code&gt;截断文章，示例如第一篇博客。&lt;/p&gt;
&lt;p&gt;yilia模板范例：&lt;br&gt;&lt;a href=&quot;//litten.me/&quot;&gt;yilia博客&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello world（一）</title>
    <link href="http://xelengo.me/2017/02/02/20170202-1/"/>
    <id>http://xelengo.me/2017/02/02/20170202-1/</id>
    <published>2017-02-02T02:26:02.612Z</published>
    <updated>2017-12-16T12:59:35.578Z</updated>
    
    <content type="html"><![CDATA[<p><a href="//xelengo.github.io/">Welcome to my blog.</a></p>
<p>There is my first article.</p>
<p>原来的欢迎页的一些操作重点：</p>
<h2 id="示例使用MarkDownPad-两个-号"><a href="#示例使用MarkDownPad-两个-号" class="headerlink" title="示例使用MarkDownPad 两个#号"></a>示例使用MarkDownPad 两个#号</h2><h3 id="示例使用MarkDownPad-三个-号"><a href="#示例使用MarkDownPad-三个-号" class="headerlink" title="示例使用MarkDownPad 三个#号"></a>示例使用MarkDownPad 三个#号</h3><a id="more"></a>
<p>示例超链接: <a href="//www.baidu.com">跳转到百度</a></p>
<p>历时两天，从有一个使用github的想法但不知道github可以做什么，到知道用github+hexo可以自建博客，再自己一路摸索过来，在网上不断地找教程，学习，尝试，最后借用github大神的框架进行尝试并成功的建立自己的博客，收获良多。</p>
<p>之后会把自己的建博客经过写出来，供大家参考。</p>
<p>博客和新浪微博，QQ空间，百度贴吧等一样，它更像是一个完全属于自己的小站，把它从无到有的建立出来的这个过程，是有着完全不同的体会。</p>
<hr>
<h3 id="感谢-amp-参考文档："><a href="#感谢-amp-参考文档：" class="headerlink" title="感谢&amp;参考文档："></a>感谢&amp;参考文档：</h3><p>框架模板来自github大神：<a href="//github.com/litten">litten-github主页</a>，<a href="//litten.me/">litten的博客</a></p>
<p>官方文档还是很有用的：<a href="//hexo.io/zh-cn/">hexo官方网站</a></p>
<p>hexo框架github地址，有个readme.md还是有点用的：<a href="//github.com/hexojs/hexo/">//github.com/hexojs/hexo/</a></p>
<p>这篇博客也很不错，我就是通过学习这个教程做的。<a href="//wsgzao.github.io/post/hexo-guide/">//wsgzao.github.io/post/hexo-guide/</a></p>
<p>如果要建一个独立域名的个人博客，可以参考这一篇：<a href="//www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/">//www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/</a></p>
<p>一个个人收藏的博客：<a href="//jocs.me/blog/">//jocs.me/blog/</a></p>
<p>github参考：<a href="//github.com/youngxhui/youngxhui.github.io">//github.com/youngxhui/youngxhui.github.io</a></p>
<h3 id="github终端操作指令："><a href="#github终端操作指令：" class="headerlink" title="github终端操作指令："></a>github终端操作指令：</h3><p>安装前提：需要已安装github for windows,node.js</p>
<p>安装:</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`npm install hexo-cli -g`或`npm install -g hexo-cli`</div></pre></td></tr></table></figure>
<p>一段时间后，安装完成，安装到C盘</p>
<p><img src="/assets/img/blogimg/2017-02-02_101105.png" alt="步骤一"></p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo -v</span></div></pre></td></tr></table></figure>
<p>检查版本信息，验证是否安装成功</p>
<p><img src="/assets/img/blogimg/2017-02-02_101426.png" alt="步骤二"></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save</span></div></pre></td></tr></table></figure>
<p>安装到D盘（我是这么理解的）</p>
<p>安装完成后就需要创建本地站点了。</p>
<p>首先选择一个文件夹作为本地站点根目录。如：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">cd</span></span>..</div></pre></td></tr></table></figure>
<p>后退到上级目录</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init <span class="string">[folder]</span></div></pre></td></tr></table></figure>
<p>新建一个网站(初始化)。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站,所以选择好目录后就变成了：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init</span></div></pre></td></tr></table></figure>
<p>执行完毕后如图：<br><img src="/assets/img/blogimg/2017-02-03_004801.png" alt="步骤三"></p>
<p>启动服务（先看看效果(<code>http://localhost:4000/</code>)，看完记得关闭服务（ctrl+c））</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure>
<p><img src="/assets/img/blogimg/pic1.png" alt="步骤五"></p>
<p>接下来，安装插件（可以一次性复制下面所有命令进行执行，虽然我也不知道这些代码有什么用）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-heroku <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-rsync <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-openshift <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></div></pre></td></tr></table></figure>
<p>安装结果：<br><img src="/assets/img/blogimg/2017-02-03_005223.png" alt="步骤四"></p>
<h3 id="再看看效果"><a href="#再看看效果" class="headerlink" title="再看看效果"></a>再看看效果</h3><p>Hexo简写命令</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo</span> n <span class="comment">#生成文章，或者source\_posts手动编辑,如果报错就改错。</span></div><div class="line"></div><div class="line">hexo s <span class="comment">#本地发布预览效果</span></div><div class="line"></div><div class="line">hexo g <span class="comment">#生成public静态文件</span></div><div class="line"></div><div class="line">最后我选择手动同步更新至GitHub</div></pre></td></tr></table></figure>
<p>还要再装一个yilin需要用的插件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="selector-tag">i</span> hexo-generator-json-<span class="attribute">content</span> --save</div></pre></td></tr></table></figure></p>
<p>安装完再部署一遍</p>
<h2 id="部署静态网页到GitHub"><a href="#部署静态网页到GitHub" class="headerlink" title="部署静态网页到GitHub"></a>部署静态网页到GitHub</h2><h3 id="注册设置GitHub"><a href="#注册设置GitHub" class="headerlink" title="注册设置GitHub"></a>注册设置GitHub</h3><p>— 登录<code>GitHub</code>，注册自定义用户名如wsgzao</p>
<p>— 在主页右下角创建New repository，name必须和用户名一致如wsgzao.github.io</p>
<p> – 首次创建耐心等待10分钟左右审核，之后即可访问静态主页如<a href="http://wsgzao.github.io" target="_blank" rel="external">http://wsgzao.github.io</a> </p>
<p>同步内容至GitHub</p>
<p>下载GitHub Windows</p>
<p>设置Local path如E:\快盘\GitHub\</p>
<p>运行Git Shell切换到如<code>E:\快盘\GitHub\hexo</code>路径下</p>
<p>执行<code>hexo g</code>命令生成public文件夹</p>
<p>把生成的内容全部拷贝到Local path或其子目录</p>
<p>运行GitHub确认修改信息后执行右上角的<code>Sync</code>同步</p>
<p>最后访问主页观察效果</p>
<hr>
<h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h3><p>卸载：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> uninstall hexo</div></pre></td></tr></table></figure></p>
<p>清理掉D盘的相关文件<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm uninstall hexo-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure></p>
<p>清理掉C盘的相关文件<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-<span class="keyword">cli</span></div></pre></td></tr></table></figure></p>
<p>##测试$发布常用指令：<br>清除缓存：<code>hexo clean</code></p>
<p>生成文章 <code>hexo n</code> </p>
<p>本地发布预览效果 <code>hexo s</code> </p>
<p>生成public静态文件 <code>hexo g #生成public静态文件</code></p>
<p>最后手动同步更新至GitHub</p>
<hr>
<h2 id="下面贴出github上star数量最多的前10个主题："><a href="#下面贴出github上star数量最多的前10个主题：" class="headerlink" title="下面贴出github上star数量最多的前10个主题："></a>下面贴出github上star数量最多的前10个主题：</h2><ul>
<li>iissnan/hexo-theme-next ， 3510个star。 </li>
<li>litten/hexo-theme-yilia ， 1703个star。 </li>
<li>TryGhost/Casper ， 679个star。 </li>
<li>wuchong/jacman ， 503个star。 </li>
<li>A-limon/pacman ， 431个star。 </li>
<li>daleanthony/uno ， 416个star。 </li>
<li>orderedlist/modernist ， 367个star。 </li>
<li>AlxMedia/hueman ， 336个star。 </li>
<li>kathyqian/crisp-ghost-theme ， 303个star。 </li>
<li>xiangming/landscape-plus ， 287个star。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;//xelengo.github.io/&quot;&gt;Welcome to my blog.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is my first article.&lt;/p&gt;
&lt;p&gt;原来的欢迎页的一些操作重点：&lt;/p&gt;
&lt;h2 id=&quot;示例使用MarkDownPad-两个-号&quot;&gt;&lt;a href=&quot;#示例使用MarkDownPad-两个-号&quot; class=&quot;headerlink&quot; title=&quot;示例使用MarkDownPad 两个#号&quot;&gt;&lt;/a&gt;示例使用MarkDownPad 两个#号&lt;/h2&gt;&lt;h3 id=&quot;示例使用MarkDownPad-三个-号&quot;&gt;&lt;a href=&quot;#示例使用MarkDownPad-三个-号&quot; class=&quot;headerlink&quot; title=&quot;示例使用MarkDownPad 三个#号&quot;&gt;&lt;/a&gt;示例使用MarkDownPad 三个#号&lt;/h3&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="github" scheme="http://xelengo.me/tags/github/"/>
    
      <category term="hexo" scheme="http://xelengo.me/tags/hexo/"/>
    
      <category term="博客" scheme="http://xelengo.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
