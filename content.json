[{"title":"angular主路由，辅助路由","date":"2019-12-08T07:14:00.000Z","path":"2019/20191208_2/","text":"因为项目需要，因此开始使用主路由和辅助路由，主路由和辅助路由可以用来分别控制项目的不同部分进行跳转，例如实现左半部分和右半部分分别跳转到不同的模块，展示不同的内容。 使用 在项目的根模块或次级的根模块，如mainPage.component的html中增加主路由和辅助路由的入口 1&lt;!-- 主路由 --&gt;2&lt;router-outlet&gt;&lt;/router-outlet&gt;3...4&lt;!-- 辅助路由 --&gt;5&lt;router-outlet name=\"secondPanel\"&gt;&lt;/router-outlet&gt;6... 在该模块的路由部分分别设置主路由和辅助路由的跳转路径: 1const appRoutes: Routes = [2 &#123; path: '', redirectTo: 'mainPage', pathMatch: 'full' &#125;,3 &#123;4 path: 'mainPage',5 component: MainPageComponent,6 canActivate: [ConfigService], // 设置路由守卫 提前加载配置数据，7 resolve: &#123;8 crisis: BasicDataService // 预加载基础数据9 &#125;,10 children: [11 &#123;12 path: 'datasList',//列表页面13 component: DatasListComponent,14 &#125;,15 &#123;16 path: 'content',//编辑页面17 component: DsContentComponent,18 &#125;,19 &#123;20 path: 'datasDetail',//详情页面21 component: DatasDetailComponent,22 &#125;,23 &#123;24 path: 'asideA',//辅助路由模块a25 component: asideAComponent,26 outlet: 'secondPanel'27 &#125;,28 &#123;29 path: 'asideB',//辅助路由模块b30 component: asideBComponent,31 outlet: 'secondPanel'32 &#125;,33 &#123;34 path: 'asideC',//辅助路由模块c35 component: asideCComponent,36 outlet: 'secondPanel'37 &#125;38 &#123; path: '', redirectTo: 'asideA', pathMatch: 'full', outlet: 'secondPanel' &#125;,39 &#123; path: '', redirectTo: 'datasList', pathMatch: 'full' &#125;,40 ]41 &#125;42]; 在ts中使用： 只跳转主路由： 1this.router.navigate(['content'], &#123; relativeTo: this.route &#125;);23this.router.navigate([&#123; outlets: &#123; primary: 'content' &#125; &#125;], &#123;4 queryParams: &#123; type: 'createNewData' &#125;,5 relativeTo: this.route6 &#125;); // 带参数跳转 只跳转辅助路由： 1this.router.navigate([&#123; outlets: &#123; secondPanel: ['asideB'] &#125; &#125;], &#123; relativeTo: this.route &#125;);23this.router.navigate([&#123; outlets: &#123; leftPanel: ['asideC'] &#125; &#125;], &#123;4 queryParams: data.data,5 relativeTo: this.route6 &#125;); // 带参数跳转 主路由辅助路由一起跳转： 1this.router.navigate([&#123; outlets: &#123; primary: ['datasList'], leftPanel: ['asideA'] &#125; &#125;], &#123; relativeTo: this.route &#125;);23this.router.navigate([&#123; outlets: &#123; primary: ['content'], leftPanel: ['asideB'] &#125; &#125;], &#123; queryParams: &#123; type: 'accept' &#125;, relativeTo: this.route &#125;); // 带参数跳转 在html中的使用可以参考官方示例，https://stackblitz.com/angular/aeapbblxmka 1&lt;a routerLink=\"/crisis-center\" routerLinkActive=\"active\"&gt;Crisis Center&lt;/a&gt;2&lt;a routerLink=\"/superheroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;3&lt;a routerLink=\"/admin\" routerLinkActive=\"active\"&gt;Admin&lt;/a&gt;4&lt;a routerLink=\"/login\" routerLinkActive=\"active\"&gt;Login&lt;/a&gt;5&lt;a [routerLink]=\"[&#123; outlets: &#123; popup: ['compose'] &#125; &#125;]\"&gt;Contact&lt;/a&gt; 需要注意：如果想要主路由，辅助路由一起跳转，不可以先写一行跳转主路由，再写一行跳转辅助路由，应该只写一句navigate,实现两个路由一起跳转。 错误示例： 1...2this.router.navigate([&#123; outlets: &#123; primary: ['content']&#125; &#125;], &#123; relativeTo: this.route &#125;);3this.router.navigate([&#123; outlets: &#123; leftPanel: 'asideB' &#125; &#125;], &#123; relativeTo: this.route &#125;);4...","tags":[{"name":"学习","slug":"学习","permalink":"https://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"web","slug":"web","permalink":"https://xelengo.me/tags/web/"}]},{"title":"angular4升级angular8要点","date":"2019-12-08T06:05:00.000Z","path":"2019/20191208_1/","text":"前言 因为公司的项目框架过于老旧，因此进行此次升级，因为依赖过于庞大，使用angular官网的升级指南总是出现依赖的版本不匹配问题，因此直接重新下载最新版angular脚手架，然后把公司项目的代码移到新的脚手架里，根据公司项目的依赖情况再重新安装依赖包，最后完成升级，总结要点如下： 升级步骤私以为全新安装能得到比升级脚手架较少一些node_modules的体积，并且升级过程中无需考虑过多的版本兼容问题。 安装node 10。 新建一个空目录，安装angular CLI, npm install -g @angular/cli, 初始化一个新项目ng new my-app-t; 注意angular4中的 angular-cli.json 在angular8中更名为 angular.json。 参照原项目的package.json重新安装各项依赖包，我们的项目用到的依赖包主要是kendo的ui控件，echarts图表，rxjs/ngrx, ngx-translate, jquery 等。 把原项目中的modules，styles.scss等代码复制进新项目，修改新项目的默认路由为旧项目的默认路由，修改main.ts中的默认启动模块为旧项目的启动模块，把旧项目引用的js,css，字体图标等添加到新项目的package.json中，注意引用路径有些变化，如在angular4项目中引用一个css字体图标文件，路径为&quot;./resources/fontIcon/iconfont.css&quot;,在angular8中需要改为&quot;src/resources/fontIcon/iconfont.css&quot;, 具体如下：angular4： 1...2\"assets\": [3 \"assets\",4 \"favicon.ico\",5 \"resources\",6 \"config\"7],8...9\"styles\": [10 \"./resources/plugin/bootstrap/3.3.7/css/bootstrap.min.css\",11 \"./resources/fontIcon/iconfont.css\",12 \"styles.scss\"13],14\"scripts\": [15 \"./resources/plugin/jquery/1.12.4/jquery.min.js\",16 \"./resources/plugin/bootstrap/3.3.7/js/bootstrap.min.js\",17 \"./resources/plugin/laydate/laydate.js\",18 \"./resources/plugin/cookie/jquery.cookie.js\",19 \"./resources/config/transformation.js\",20 \"./resources/plugin/turf/turf.min.js\",21 \"./resources/comp/ws/reconnecting-websocket.min.js\",22 \"./resources/fontIcon/iconfont.js\",23 \"./resources/plugin/sha/jquery.sha1.js\",24 \"./resources/plugin/sha/jquery.sha256.min.js\"25],26... angular8: 1...2\"assets\": [3 \"src/favicon.ico\",4 \"src/assets\",5 \"src/resources\",6 \"src/config\"7],8...9\"styles\": [,10 \"src/resources/plugin/bootstrap/3.3.7/css/bootstrap.min.css\",11 \"src/resources/fontIcon/iconfont.css\",12 \"src/styles.scss\"13],14\"scripts\": [15 \"src/resources/plugin/jquery/1.12.4/jquery.min.js\",16 \"src/resources/plugin/bootstrap/3.3.7/js/bootstrap.min.js\",17 \"src/resources/plugin/laydate/laydate.js\",18 \"src/resources/plugin/cookie/jquery.cookie.js\",19 \"src/resources/plugin/turf/turf.min.js\",20 \"src/resources/fontIcon/iconfont.js\",21 \"src/resources/plugin/sha/jquery.sha1.js\",22 \"src/resources/plugin/sha/jquery.sha256.min.js\"23]24... 请求方式的写法发生变化：在angular4中写post/get请求的示例如下： 1...2getConfig(obj) &#123;3 return this.httpClient.post(API.graphqlQuery, obj)4 .map(res =&gt; &#123;5 return res;6 &#125;).catch(this.handleError);7&#125;8... 在angular8中需要修改为： 1...2getConfig(obj) &#123;3 return this.httpClient.post(API.graphqlQuery, obj)4 .pipe(5 map(res =&gt; &#123;6 return res;7 &#125;), catchError(this.handleError));8&#125;9... viewChild的写法发生变化 angular4: 1@ViewChild('fileupload') fileupload: ElementRef; angular8: 1@ViewChild('fileupload', &#123;static: false&#125;) fileupload: ElementRef; // file dom ngrx写法也发生了一些变化，具体参考：angular ngrx link 主要是自定义action需要实现Action并添加constructor方法。对payload进行进一步的显式声明，在AppModule中的引入的写法发生变化。 Subscription直接从rxjs引入：import { Subscription, Subject, Observable } from &#39;rxjs&#39;;, 而不是rxjs/Subscription. 说起来很简单，实际上操作起来，我们的项目用到http请求的有几十个service文件，几百个请求，viewChild也有几十个地方用到，订阅几乎每个组件都有用到，因此改起来还是颇费时间。","tags":[{"name":"学习","slug":"学习","permalink":"https://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"web","slug":"web","permalink":"https://xelengo.me/tags/web/"}]},{"title":"ngrx使用总结","date":"2019-04-23T08:49:00.000Z","path":"2019/20190423_1/","text":"基础知识及示例，参考： https://blog.csdn.net/j_bleach/article/details/78161765 https://blog.csdn.net/j_bleach/article/details/78070539 https://blog.csdn.net/fen747042796/article/details/74840844 http://www.voidcn.com/article/p-garylnzx-xv.html https://github.com/jiwenjiang/angular4-material2 https://blog.csdn.net/chenqiuge1984/article/details/80130244 官方示例： https://github.com/ngrx/platform/tree/master/docs/store 官方在线demo： https://stackblitz.com/github/ngrx/platform/ 以下开始讲怎么做：在项目里（的工具组件目录/公共目录）创建如下目录结构， Models文件夹存放数据模型 Action 存放行为类型 Reducer 写具体的控制方法， 创建index.ts作为各个reducer的汇总，便于之后管理拓展。 Model 示例： 1export interface Book &#123;2 id: string;3 volumeInfo: &#123;4 title: string;5 subtitle: string;6 authors: string[];7 publisher: string;8 publishDate: string;9 description: string;10 averageRating: number;11 ratingsCount: number;12 imageLinks: &#123;13 thumbnail: string;14 smallThumbnail: string;15 &#125;;16 &#125;;17&#125;1819export function generateMockBook(): Book &#123;20 return &#123;21 id: '1',22 volumeInfo: &#123;23 title: 'title',24 subtitle: 'subtitle',25 authors: ['author'],26 publisher: 'publisher',27 publishDate: '',28 description: 'description',29 averageRating: 3,30 ratingsCount: 5,31 imageLinks: &#123;32 thumbnail: 'string',33 smallThumbnail: 'string',34 &#125;,35 &#125;,36 &#125;;37&#125; Action 示例： 1import &#123; Incident &#125; from './../models/incidentModel';2import &#123; Action &#125; from \"@ngrx/store\";34export const SAVE_INCIDENT = \"SAVE_INCIDENT\";5export const RESET = \"RESET\";67export class SaveIncident implements Action &#123;8 readonly type = SAVE_INCIDENT;9 constructor(public payload: Incident) &#123;&#125;10&#125;11export class Reset implements Action &#123;12 readonly type = RESET;13&#125;1415export type Actions = SaveIncident | Reset; reducer 示例： 1import * as inc from '../../action/incidentAction';2import &#123; Incident, generateMockIncident &#125; from './../../models/incidentModel';34export function incidentReducer(incident: Incident = generateMockIncident(), action: inc.Actions) &#123;5 switch (action.type) &#123;6 case inc.SAVE_INCIDENT:7 // return action.payload;8 return Object.assign(&#123;&#125;, incident, action.payload);910 case inc.RESET:11 return generateMockIncident();1213 default:14 return incident;15 &#125;16&#125; Reducer –&gt; index.ts: 多个模块集成到一起 12import * as incident from './incident/incidentReducer';3import &#123; Incident &#125; from '../models/incidentModel';45import * as incidentDetail from './incidentDetail/incidentReducer';6import &#123; IncidentDetail &#125; from '../models/incidentDetailModel';78import * as initialKeyWord from './consultKeywordReducer';910export interface State &#123;11 incident: Incident;12 incidentDetail: IncidentDetail;13 initialKeyWord: string;14&#125;1516export const reducer = &#123;17 incident: incident.incidentReducer,18 incidentDetail: incidentDetail.incidentDetailReducer,19 initialKeyWord: initialKeyWord.initialKeyWordReducer,20&#125;; 随后在app.modules.ts (声明组件的文件里)注入reducer: 1import &#123;StoreModule&#125; from '@ngrx/store';2// ngrx reducer3import &#123; incidentReducer &#125; from './commonTools/ngrx/reducer/incident/incidentReducer';4import &#123; incidentDetailReducer &#125; from './commonTools/ngrx/reducer/incidentDetail/incidentReducer';5import &#123; initialKeyWordReducer &#125; from './commonTools/ngrx/reducer/consultKeywordReducer';6@NgModule(&#123;7imports: [8 StoreModule.provideStore(&#123;9 incident: incidentReducer,10 incidentDetail: incidentDetailReducer,11 initialKeyWord: initialKeyWordReducer,12 // reducers: reducer,13 &#125;),14],15&#125;) 随后在具体的组件中进行存取操作： 例如警情组件： 存数据步骤：导入相关模块： 1import * as reducer from '../../../commonTools/ngrx/reducer/index';2import &#123; Store &#125; from '@ngrx/store';3import * as incAction from '../../../commonTools/ngrx/action/incidentAction'; constructor 1constructor(2 private store: Store&lt;reducer.State&gt;,3) &#123;4&#125; 1// ngrx store 存数据, data为具体要存进去的数据2 this.store.dispatch(&#123;3 type: incAction.SAVE_INCIDENT,4 payload: data5 &#125;); 取数据步骤：导入模块： 1import &#123; Observable &#125; from 'rxjs/Observable';2import &#123; Subscription &#125; from 'rxjs/Subscription';3import &#123; Store &#125; from '@ngrx/store';4import &#123; Incident, generateMockIncident &#125; from '../../../commonTools/ngrx/models/incidentModel';5import * as inc from '../../../commonTools/ngrx/reducer/index'; 定义变量接收： 1currentInc$: Observable&lt;Incident&gt;;2private tagStateSubscription: Subscription; 1constructor(2 private store: Store&lt;inc.State&gt;,3) &#123;4 this.currentInc$ = store.select('incident');5&#125; 订阅： 1ngOnInit() &#123;2 this.tagStateSubscription = this.currentInc$.subscribe((incident) =&gt; &#123;3 this.info = incident;4 &#125;);5&#125; 组件销毁时取消订阅 1ngOnDestroy() &#123;2 this.tagStateSubscription.unsubscribe();3 &#125; 使用上大致就是这样，关于原理和概念都在开头的几个链接。 都是在摸索中前行。共勉。","tags":[{"name":"学习","slug":"学习","permalink":"https://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"web","slug":"web","permalink":"https://xelengo.me/tags/web/"}]},{"title":"vs code 常用插件","date":"2019-04-22T05:32:00.000Z","path":"2019/20190422_1/","text":"所有插件只按照类型区分，每一类型的插件不区分先后顺序。 基本插件Beautify美化javascript，JSON，CSS，Sass和HTML Chinese (Simplified) Language Pack for Visual Studio Codevs code简体中文包，安装后，在 locale.json 中添加 “locale”: “zh-cn”，即可载入中文（简体）语言包。要修改 locale.json，你可以同时按下 Ctrl+Shift+P 打开命令面板，之后输入 “config” 筛选可用命令列表，最后选择配置语言命令。 ESLintjs，ts代码格式检查，默认根据内置的代码语法检查规则进行代码校验并标记出不符合规范的代码。 filesize在编辑器的状态栏中显示焦点文件的大小。如果单击状态栏组件，它将显示有关该文件的更多信息！ HTML CSS Support给HTML文档提供css支持。css属性提醒和补全。 HTML Snippets添加对h5标签库的支持。 HTMLHint将HTMLHint静态分析工具集成到Visual Studio代码中。 HTMLHint扩展将在打开的HTML文件上运行HTMLHint，并在“状态栏”中报告错误数量，并在“问题”面板中查看详细信息（“查看”&gt;“问题”）。 HTML文件中的错误以波形突出显示，您可以将鼠标悬停在曲线上以查看错误消息。 HTMLHint扩展使用HTMLHint提供的默认规则。HTMLHint仅分析打开的HTML文件，不会在项目文件夹中搜索HTML文件。 jQuery Code Snippets提供常用jquery代码片段支持，在js文件中输入jq以查看支持的代码片段。 jshint一种有助于检测JavaScript代码中的错误和潜在问题的工具。 npm此扩展支持运行package.json文件中定义的npm脚本，并根据package.json中定义的依赖项验证已安装的模块。 检查在package.json中定义，但未安装；已安装但未在package.json中定义；已安装但不满足package.json中定义的版本。并且为报告的警告提供了运行npm的快速修复程序。并且在命令面板（cmd-shift-p）提供了运行脚本的命令，输入npm以进行查看。 npm Intellisense用于在import语句中自动填充npm模块。 在命令面板（cmd-shift-p）中选择Install Extension并选择npm Intellisense。及其他功能。 Path Autocomplete提供路径提示和填充支持。 SVG Viewer提供.svg图片的预览支持。 SVN提供svn扩展的支持，需要已经安装svn客户端并开启命令行工具。 在左侧工具栏添加svn图标，支持查看本地修改，查看提交历史，提交代码等功能。 TODO Highlight添加TODO高亮显示功能，在未完成的功能处添加TODO标识，支持在文件中高亮显示及底部输出栏显示。 vscode-icons给各种类型的文件增加图标支持。 angular效率提高Angular 7 and TypeScript/HTML VS Code Snippets适用于angular7的ts,html代码片段集合。 Angular 8 Snippets - TypeScript, Html, Angular Material, ngRx, RxJS &amp; Flex Layout 同样是一款代码片段集合，支持更多类型。支持 Angular 2,4,5,6, 7 &amp; 8 Beta. Angular Extension Pack用于开发angular的常用的流行的扩展包集合，包括： 【Debugger for Chrome】 从VS Code调试在Google Chrome中运行的JavaScript代码。 【Prettier - Code formatter】 使用Prettier格式化您的JavaScript / TypeScript / CSS。Prettier是一个代码格式化程序。 【Path Intellisense】路径提示，路径及文件名补全。 【Auto Close Tag】 自动添加html/xml中标签对的结束标签， 【Auto Rename Tag】 重命名一个HTML / XML标记时，会自动重命名配对的HTML / XML标记 【EditorConfig for VS Code】 自动根据文件扩展名指定相应的缩进长度，tab长度，保存时最后一行必须是空行等编辑器样式。尝试使用.editorconfig文件中的设置覆盖用户/工作区设置。不需要其他或特定于vscode的文件。与任何EditorConfig插件一样，如果未指定root = true，EditorConfig将继续在项目外部查找.editorconfig文件。 【TSLint】 是一个代码检查工具，用于检查ts代码的可读性，可维护性及功能性错误，可以配置自定义校验规则。检查代码语法，格式等，帮助修改ts代码中的错误。未来会被弃用并升级到ESLint。 【Auto Import】 当你使用一个未引入的包时它可以提供自动导入相应的包。 【TypeScript Hero】 根据约定对导入进行排序和组织，并删除未使用的导入（在Win / Linux上按Ctrl + Alt + o或在MacOS上按Ctrl + Opt + o）。 【Move TS - Move TypeScript files and update relative imports 移动一个ts文件的时候自动更新引用该文件的所有文件对应的导入路径。 可以帮助您重构和重新组织项目中的一些文件和组件。它会自动修复正在移动的文件（或组件文件夹）上的导入以及导入正在移动的组件的文件。要使用它：右键单击Project Explorer窗格中的文件或文件夹，然后选择“Move TypeScript”。 【json2ts】将JSON从剪贴板转换为TypeScript接口。 （Ctrl + Alt + V） 【Angular v7 Snippets】一些针对angular的TypeScript和HTML代码片段。 【Angular Language Service】 angular语言支持包，为Angular模板提供丰富的编辑体验，在处理Angular HTML模板时非常有用 【Angular 2, 4 and upcoming latest TypeScript HTML Snippets】包含了Angular2,4,以及更高版本的框架中常用的ts,html片段，输入相应的代码片段名称并回车就可以快速的创建模板，避免了创建模块的很多重复代码。如angComponent或ngFor。 【angular2-switcher】在angular2项目中轻松导航到组件。typescript（.ts）| template（.html）| style（.scss / .sass / .less / .css）。 使用快捷键跳转到一个模块的ts,html，scss文件。或在html中转到一个函数的定义。 【Angular Schematics】 通过在项目目录右键的方式创建新的模块，服务，组件等。 【AngularDoc for Visual Studio Code】在最左侧菜单栏增加一个angular图标，用于angular项目的模块、组件，结构可视化 【Angular Material 2, Flex layout 1, Covalent 1 &amp; Material icon snippets】 给Material 2, Flex layout 1, Covalent 1 &amp; Material 这些模块提供代码片段支持。 【SimonTest】分析您的Angular代码并为您生成单元测试（可以覆盖使用Angular CLI自动生成的spec文件）。 【Angular 2 TypeScript Test Snippets】Angular 2 TypeScript测试片段。 【NG.42 TS Helpers】 添加基本​​辅助命令以使用Angular 2和TypeScript。用于创建带有导出当前目录所有模块的index.ts vue效率提高Vue 2 Snippets支持vue2的代码片段，标签，指令等。","tags":[{"name":"学习","slug":"学习","permalink":"https://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"web","slug":"web","permalink":"https://xelengo.me/tags/web/"}]},{"title":"git 配置及基本操作","date":"2018-09-07T15:44:00.000Z","path":"2018/20180907_1/","text":"安装debian 下 安装 ： sudo apt-get install gitwindows 下： 下载安装包进行安装安装完后打开GitBash进行账户设置：设置用户名，邮箱 1$ git config --global user.name xlh2$ git config --global user.email \"xlhhaha@gmail.com\" –global 标识这台电脑上的所有git仓库都会使用这个账号。 （全局设置） 必要配置：1mkdir gittest1 // 创建一个文件夹，作为版本库2cd gittest13pwd // 显示当前目录4git init // 初始化仓库，会在所选目录下创建 .git 隐藏文件夹 其他配置1.让git显示颜色，让命令输出看起来更醒目 1git config --global color.ui true` --global // 指定为全局配置 ，不加这个参数则配置只在当前仓库生效 2.忽略指定文件：在工作区创建一个.gitignore 文件, 然后把忽略的文件名,或文件类型，或文件夹 填进去，即可。 .gitignore文件本身要加入版本控制。 如：database.db, *.so, *.class, dist想要强制添加某个已被忽略的文件：git add -f origin aaa.class 3.设置忽略文件 1git check-ignore // 检查忽略文件中的某个规则在忽略文件中的哪个位置 $ git chexk-ignore -v aaa.class .gitignore:3:*.class // 结果可以看出，是在第三行忽略了这类文件。4.配置别名 1例：git config --global alias st status // 设置 status 用 st 代替2则：git status ⇒ git st34// 常用别名：5git config --global alias co checkout6git config --global alias ci commit // 则提交可以写成：git ci ‘bala bala bala ...’7git config --global alias br branch8// 其他别名参考：9git config --global alias unstage ‘reset HEAD’ // 则 git unstage aaa.js 相当于 git reset HEAD aaa.js10git config --global alias last ‘log -1’ // git last 显示最后一次提交信息11git config --global alias lg “log --color --graph --pretty=formart:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit’” // 美化 log 输出 每个仓库的配置文件 在.gIt/config文件中。里边包含了这个仓库的基本信息，远程仓库，分支信息，别名设置 等，要编辑配置在这个文件里编辑即可。 当前用户的配置文件在用户主目录下的一个隐藏文件.gitconfig中。别名也可以在这里配置，改错了可以删掉重新通过命令配置。 使用：1.在仓库文件夹下创建一个文件，如： test.txt，并写入一些内容2.git add test.txt // 将文件加入版本库管理, 多个文件一起加入： git add a.txt b.txt3.git commit -m &#39;add a file&#39; // 提交修改 -m 后边是填入本次修改的备注4.git status // 查看当前版本库状态5.git diff test.txt // 查看仓库最新版本与本地当前文件之间的差异（本地做了哪些更改（未提交））6.git log 查看仓库提交历史记录 --pretty=oneline // 简化每条历史记录为一行7.git reset --hard HEAD^ 回退到上个版本 ，几个^就是回退到倒数第几个版本，往上指定(100)个版本：HEAD~100，回退到指定版本号的版本：git reset --hard xxxxx, 可以往前，可以往后。8.git reflog 查看自己的提交命令历史记录及版本号9.git diff HEAD -- test.txt 查看工作区（本地当前）和版本库最新版本的区别 git diff commit_id_1 commit_id_2 比较两个版本之间的差异 git diff 比较 工作区（当前打开改文件看到的状态）与暂存区（add后 commit前 ）区别 git diff -staged 比较暂存与仓库的区别10.git checkout -- test.txt 撤销更改, 如果文件修改后没有add,就会回退到仓库最新版，修改后有 add,没有commit,就回退到add的版本; 如果已经add过，没有commit;又想回退到仓库最新版，用： git reset HEAD test.txt, 即可撤销掉add, 本地文件为add前的文件，再执行 git checkout -- text.txt 用仓库最新版覆盖本地。11.删除文件：(1). WINDOWS系统中，在本地删除要删除的文件，(2). git rm test.txt 或 git add test.txt，本地删掉文件后要从仓库恢复文件：git checkout text.txt12.cat xxxx.txt // win git Bash 查看文本文件内容 与远程库协作13.生成秘钥 安装完git后生成ssh key: ssh-keygen -t rsa -C &quot;youremail@example.com&quot; , 然后把公钥文件中的内容加到git仓库中。 14.github 上的操作： 把本地库与远程库进行关联： github创建完空仓库后：(1). 通过命令行从github库克隆出新的仓库： 1echo \"# testRes2\" &gt;&gt; README.md2git init3git add README.md4git commit -m \"first commit\"5git remote add origin git@github.com:XElengo/testRes2.git6git push -u origin master (2).通过命令行把 已有的本地库与github仓库进行关联并把本地库的内容上传到github库： 1git remote add origin git@github.com:XElengo/testRes2.git2git push -u origin master 两个命令原理都一样，都是先在本地的git仓库加文件，再上传到github仓库。git push 把当前分支master推送到远程。-u 把本地master分支和远程的master分支关联起来。git push origin master 把本地指定(master)分支的最新版推送到指定的github(远程(origin))仓库对应的远程分支。 注意：第一次使用git的clone 或 push 会有一个警告，需要确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。 Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了，这个警告指挥出现一次。 (3). 从远程库把项目导到本地：进入一个文件夹，然后把github仓库的项目克隆下来成为一个本地库：git clone git@github.com:XElengo/test1Res.git 15.git remote -m origin // 本地库与远程库取消关联,在某个本地库文件夹中操作 16.一个本地库可以关联多个远程库，只要给远程库起的本地名字/代号(origin)不一样即可。 分支管理1git checkout -b dev // 创建dev分支并切换到dev 分支。2git checkout 命令加上 -b 参数表示创建并切换，相当于以下两条命令：3 git branch dev // 创建分支4 git checkout dev // 切换分支56git branch // 列出所有分支，当前分支前面标有*号。切换分支后的提交都会提交到所选分支。7git merge dev // 合并指定分支（dev）到当前分支8git branch -d dev // 删除指定分支9git branch -D dev // 强制删除指定分支，分支在没有被合并前不允许删除，需要强制删除。10git branch --set-upstram-to=origin/dev dev // 指定本地分支与远程分支的关联(名字建议保持一致，但允许不一样)，11// 用于 远程库已经有了一个分支，你又在本地新建了一个同名分支，这时拉取(pull)远程代码到本地会冲突，需要进行关联。关联后如有冲突继续解决冲突，然后再进行push。 在不同分支对同一文件分别提交修改，再执行merge会出现冲突，出现冲突时，用 git status 可以查看冲突信息，修复冲突后再进行提交和合并。 1git log --graph --pretty=oneline --abbrev-commit // 以图形化方式展示分支合并图 git merge 这种方式提交，默认会在删除分支后丢掉你分支信息git merge --no-ff -m ”commit mark” dev // 这种提交，参数(--no-ff)禁用Fast forward,这样能在提交历史中保留分支信息git stash // 暂存当前分支做的尚未提交的本地修改，并把当前工作区的文件恢复到修改之前的状态。git stash list // 查看本地暂存列表git stash apply // 从 stash 恢复暂存的修改（工作进度），stash 中的 内容不会被删除，git stash drop // 删除stashgit stash pop // 从stash恢复修改并删除stash,相当于上面两句的集合。git stash apply stash@{0} // 当有多个版本的stash时，恢复到指定版本的stash。git 建立一个新的bug分支，通常命名为 issue-101为了开发一个新功能而建立的分支通常命名为 feature-newFea,开发完成后合并，删除该分支。git remote 查看远程库信息git remote -v 显示更详细的信息 origin git@github.com:XElengo/test1Res.git (fetch) origin git@github.com:XElengo/test1Res.git (push)上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。 要推送哪些本地分支到远程库完全由自己决定，通常master要时刻与远程库同步，dev作为开发主分支也要与远程库保持同步，bug分支一般不需要推送到远程仓库，feature分支如果多人合作开发，就要保持同步，如果单独开发，就等开发完毕再推送到远程库。 如果多个人在不同的客户端分别修改了同一个文件，第二个人提交推送时会产生冲突，需要先把远程库最新版本拉下来，在本地解决冲突后再提交到远程库： 1git pull // 从远程库拉取最新版代码2git push origin branch-name // 推送本地分支到远程库 git rebase // 把本地未push的分叉的提交历史整理成一条直线，使提交历史更美观(变基)。 注意：只对尚未推送或分享给别人的本地修改执行变基操作清理历史； 从不对已推送至别处的提交执行变基操作 标签管理1git tag v1.0 // 在某分支(master)中把当前版本命名成一个标签，便于以后查找这个节点的文件。2git tag // 查看所有的标签，标签按照字母排序3git tag v0.9 f010234 // 把过去的某个版本打一个标签，指定提交id，给那次提交打一个标签。4git tag -a v0.1 -m “version 0.1 released” 0x01234 // -a 指定标签名，-m 指定说明文字5git show v1.0 // 查看某个版本标签信息6git tag -d v0.1 // 删除某个标签7git push origin &lt;tagname&gt; // 推送某个标签到远程仓库8git push origin --tags // 推送所有尚未推送到远程仓库的标签 要删除远程仓库的某个标签：先删除本地：git tag -d v0.1再删除远程：git push origin :refs/tags/v0.1(两条命令没有必然联系) 搭建git服务器debian/ubuntu: 1.安装git : sudo apt-get install git2.创建用户： sudo adduser git3.把所有用户的公钥导入到 /home/git/.ssh/authorized_keys, 一行一个公钥。如果人数较少，可以使用这种方法，如果有几百人，可以使用 Gitosis管理公钥。4.初始化git仓库：选定一个目录作为git仓库,如：/srv/sample.git,在 /srv目录下输入命令： sudo git init --bare sample.gitgit会创建一个裸仓库，没有工作区，只能上传文件和共享，所以不允许用户直接登录进服务器去改工作区的文件，且通常以.git结尾。5.把仓库文件所有权改为git: sudo chown -R git:git sample.git6.禁用shell登录： cd进入/etc/passwd 文件，修改以 git 用户开头的一行，如： git:x:1001:1001:,,,:/home/git:/bin/bash改为： git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell使git 用户只能使用git命令。到此，远程仓库就搭建好了。 7.在自己的客户端电脑上克隆远程仓库： 1git clone git@server:/srv/sample.git 其他： git 仓库默认是不支持权限控制的，但是因为git支持钩子（hook）,所以，可以在服务器端编写脚本达到控制提交等操作，可以使用Gitolite这样的小工具。 linux vim 常用命令vi readme.txt 进入VIM编辑器,可以新建文件也可以修改文件如果这个文件以前是没有的，则为新建，则下方有提示为新文件。 按ESC键 跳到命令模式，然后： 1:w 保存文件但不退出vi2:w file 将修改另外保存到file中，不退出vi3:w! 强制保存，不推出vi4:wq 保存文件并退出vi5:wq! 强制保存文件，并退出vi6q: 不保存文件，退出vi7:q! 不保存文件，强制退出vi8:e! 放弃所有修改，从上次保存文件开始再编辑","tags":[{"name":"学习","slug":"学习","permalink":"https://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"git","slug":"git","permalink":"https://xelengo.me/tags/git/"}]},{"title":"jsp页面列表 一列变多列","date":"2017-12-16T13:07:00.000Z","path":"2017/20171216_1/","text":"在这里，我展示了一个怎么把原来只有一列的表格变成一行放三个，变成三列进行展示的方法，适用于你的table只有一至三列数据（总之表格的列变少了会很奇怪，但是又必须用表格），但是需要把数据拆成更多列进行展示的情况。 前段时间在做项目的时候有一个需求，本来是一个只有一个参数需要展示的list,理所当然的做成了一列进行展示，如图：（没毛病吧） 然后也太不美观了，能不能把一列变成多列进行展示呢？通过自己的构思，加上在网上查找实现方法，最后在CSDN博客（当时忘记收藏了，后来再找找不到了）上找到了一个写法，非常好用： 1&lt;table&gt;2 &lt;thead&gt;3 &lt;tr&gt;4 &lt;th colspan=\"3\"&gt;编号&lt;/th&gt;5 &lt;/tr&gt;6 &lt;/thead&gt;7 &lt;tbody&gt;8 &lt;c:forEach items=\"$&#123;list&#125;\" var=\"test\" varStatus=\"status\"&gt;9 &lt;c:if test=\"$&#123;status.count%3==1&#125;\"&gt;10 &lt;tr&gt;11 &lt;/c:if&gt;12 &lt;td&gt;$&#123;test.id&#125;&lt;/td&gt;13 &lt;c:if test=\"$&#123;status.count%3==0&#125;\"&gt;14 &lt;/tr&gt;15 &lt;/c:if&gt;16 &lt;c:set var=\"v_count\" value=\"$&#123;status.count&#125;\" /&gt;17 &lt;/c:forEach&gt;18 &lt;c:if test=\"$&#123;v_count%3==1&#125;\"&gt;19 &lt;td&gt;&lt;/td&gt;20 &lt;td&gt;&lt;/td&gt;21 &lt;/tr&gt;22 &lt;/c:if&gt;23 &lt;c:if test=\"$&#123;v_count%3==2&#125;\"&gt;24 &lt;td&gt;&lt;/td&gt;25 &lt;/tr&gt;26 &lt;/c:if&gt;27 &lt;/tbody&gt;28&lt;/table&gt; 效果如图： 如果需要循环的list只有两个值，就会变成下面这样： 如果最后一行占不满，会是这样： 有了上面的方法，那相应的，一列变两列，两列变四列，都不在话下啦。 示例：两列变四列： 1&lt;table id=\"contentTable\" &gt;2 &lt;thead&gt; 3 &lt;tr&gt;4 &lt;th&gt;编号&lt;/th&gt;5 &lt;th&gt;名称&lt;/th&gt;6 &lt;th&gt;编号&lt;/th&gt;7 &lt;th&gt;名称&lt;/th&gt;8 &lt;/tr&gt;9 &lt;/thead&gt;10 &lt;tbody&gt;11 &lt;c:forEach items=\"$&#123;list&#125;\" var=\"test\" varStatus=\"status\"&gt;12 &lt;c:if test=\"$&#123;status.count%2==1&#125;\"&gt;13 &lt;tr&gt;14 &lt;/c:if&gt; 15 &lt;td&gt;16 $&#123;test.id&#125;17 &lt;/td&gt;18 &lt;td&gt;19 $&#123;test.name&#125;20 &lt;/td&gt;21 &lt;c:if test=\"$&#123;status.count%2==0&#125;\"&gt;22 &lt;/tr&gt;23 &lt;/c:if&gt;24 &lt;c:set var =\"v_count\" value=\"$&#123;status.count&#125;\"/&gt;25 &lt;/c:forEach&gt;26 &lt;c:if test=\"$&#123;v_count%2==1&#125;\"&gt;27 &lt;td&gt;&lt;/td&gt;28 &lt;td&gt;&lt;/td&gt;29 &lt;/tr&gt;30 &lt;/c:if&gt;31 &lt;/tbody&gt;32&lt;/table&gt; 真的不是我不放这种写法的源博客，是真的找不到。。。","tags":[{"name":"编程","slug":"编程","permalink":"https://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"},{"name":"java","slug":"java","permalink":"https://xelengo.me/tags/java/"},{"name":"学习","slug":"学习","permalink":"https://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"html","slug":"html","permalink":"https://xelengo.me/tags/html/"},{"name":"jsp","slug":"jsp","permalink":"https://xelengo.me/tags/jsp/"}]},{"title":"这次没有争吵，没有拉黑，但我们都懂；从此再无交集，这应该可以算是最好的离开方式","date":"2017-06-14T10:02:00.000Z","path":"2017/20170604_2/","text":"人，最好的心态是平静；最好的状态是简单；最好的感觉是自由；最好的心情是童心。 小时候，以为人生就是琴棋书画诗酒花，长大后才发现，是柴米油盐酱醋茶。 最暖心的感觉莫过于我随随便便说的话；有人认真的把它听了，而且还做了。 我们总是在用最大的努力去做一些根本就不适合我们的事，只因身边的人都说那是好的。 珍惜那些朋友圈里不聊天，却天天给你点赞的人，不是因为你的文章写的多好；只是因为这个世界上还有一种感情、叫关注。 这次没有争吵，没有拉黑，但我们都懂；从此再无交集，这应该可以算是最好的离开方式。 总会有些日子里，风有点大，雨有点急，天有点黑，人有点累，而脚下的砂石有点多。或许不知道怎么让自己安然走过这一段路，但我想，只要还想走下去，经历的一切，最终都只不过过眼云烟。 人生本来就没有相欠；别人对你付出；是因为别人喜欢。你对别人付出，是因为自己甘愿；情出自愿；事过无悔。 身材不好就去锻炼，没钱就努力去赚。别把、窘境迁怒于别人，唯一可以抱怨的，只是不够努力的自己。 不要轻易让自己掉眼泪，你笑的时候，全世界跟着笑。但你哭的时候，全世界只有你一个人在哭。 会有那么一天，我也会放下如今的执着和不舍，带着稍许的遗憾过着没有你的新生活。 偶尔对自己好些，偷个小懒，抽点小疯，花点小钱，不算伤天害理。 好脾气的人不轻易发火，不代表不会发火；性格好的人只是装糊涂，不代表没有底线。 易怒的人都很敏感，敏感的人都很好强，好强的人都很固执，固执的人都很单纯，单纯的人都很天真，天真的人都缺心眼，这才是真相。 现在的“晚安”的意思就是，你别和我瞎逼逼了，我现在要继续玩手机了。相互道一句晚安，然后各自熬夜。 转自网络，联系侵删","tags":[{"name":"随笔","slug":"随笔","permalink":"https://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"python内置函数","date":"2017-06-14T10:01:00.000Z","path":"2017/20170604_1/","text":"Python内置函数官方文档 Python的内置函数大体如下，有些函数可能因为版本不同略有变化。但是作为参考还是可以的。 （注意：函数中的[ … ] 表示可选参数，使用中需要去掉[ ]。） 一、数学运算类 abs(x) 求绝对值 1、参数可以是整型，也可以是复数 2、若参数是复数，则返回复数的模 complex([real[, imag]]) 创建一个复数 divmod(a, b) 分别取商和余数 注意：整型、浮点型都可以 float([x]) 将一个字符串或数转换为浮点数。如果无参数将返回0.0 int([x[, base]]) 将一个字符转换为int类型，base表示进制 long([x[, base]]) 将一个字符转换为long类型 pow(x, y[, z]) 返回x的y次幂 range([start], stop[, step]) 产生一个序列，默认从0开始 round(x[, n]) 四舍五入 sum(iterable[, start]) 对集合求和 oct(x) 将一个数字转化为8进制 hex(x) 将整数x转换为16进制字符串 chr(i) 返回整数i对应的ASCII字符 bin(x) 将整数x转换为二进制字符串 bool([x]) 将x转换为Boolean类型 二、集合类操作 basestring() str和unicode的超类 不能直接调用，可以用作isinstance判断 format(value [, format_spec]) 格式化输出字符串 格式化的参数顺序从0开始，如“I am {0},I like {1}” unichr(i) 返回给定int类型的unicode enumerate(sequence [, start = 0]) 返回一个可枚举的对象,该对象的next()方法将返回一个tuple iter(o[, sentinel]) 生成一个对象的迭代器，第二个参数表示分隔符 max(iterable[, args...][key]) 返回集合中的最大值 min(iterable[, args...][key]) 返回集合中的最小值 dict([arg]) 创建数据字典 list([iterable]) 将一个集合类转换为另外一个集合类 set() set对象实例化 frozenset([iterable]) 产生一个不可变的set str([object]) 转换为string类型 sorted(iterable[, cmp[, key[, reverse]]]) 队集合排序 tuple([iterable]) 生成一个tuple类型 xrange([start], stop[, step]) xrange()函数与range()类似，但xrnage()并不创建列表，而是返回一个xrange对象，它的行为与列表相似，但是只在需要时才计算列表值，当列表很大时，这个特性能为我们节省内存 三、逻辑判断 all(iterable) 1、集合中的元素都为真的时候为真 2、特别的，若为空串返回为True any(iterable) 1、集合中的元素有一个为真的时候为真 2、特别的，若为空串返回为False cmp(x, y) 如果x &lt; y ,返回负数；x == y, 返回0；x &gt; y,返回正数 四、反射 callable(object) 检查对象object是否可调用 1、类是可以被调用的 2、实例是不可以被调用的，除非类中声明了__call__方法 classmethod() 1、注解，用来说明这个方式是个类方法 2、类方法即可被类调用，也可以被实例调用 3、类方法类似于Java中的static方法 4、类方法中不需要有self参数 compile(source, filename, mode[, flags[, dont_inherit]]) 将source编译为代码或者AST对象。代码对象能够通过exec语句来执行或者eval()进行求值。 1、参数source：字符串或者AST（Abstract Syntax Trees）对象。 2、参数 filename：代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。 3、参数model：指定编译代码的种类。可以指定为 ‘exec’,’eval’,’single’。 4、参数flag和dont_inherit：这两个参数暂不介绍 dir([object]) 1、不带参数时，返回当前范围内的变量、方法和定义的类型列表； 2、带参数时，返回参数的属性、方法列表。 3、如果参数包含方法__dir__()，该方法将被调用。当参数为实例时。 4、如果参数不包含__dir__()，该方法将最大限度地收集参数信息 delattr(object, name) 删除object对象名为name的属性 eval(expression [, globals [, locals]]) 计算表达式expression的值 execfile(filename [, globals [, locals]]) 用法类似exec()，不同的是execfile的参数filename为文件名，而exec的参数为字符串。 filter(function, iterable) 构造一个序列，等价于[ item for item in iterable if function(item)] 1、参数function：返回值为True或False的函数，可以为None 2、参数iterable：序列或可迭代对象 getattr(object, name [, defalut]) 获取一个类的属性 globals() 返回一个描述当前全局符号表的字典 hasattr(object, name) 判断对象object是否包含名为name的特性 hash(object) 如果对象object为哈希表类型，返回对象object的哈希值 id(object) 返回对象的唯一标识 isinstance(object, classinfo) 判断object是否是class的实例 issubclass(class, classinfo) 判断是否是子类 len(s) 返回集合长度 locals() 返回当前的变量列表 map(function, iterable, ...) 遍历每个元素，执行function操作 memoryview(obj) 返回一个内存镜像类型的对象 next(iterator[, default]) 类似于iterator.next() object() 基类 property([fget[, fset[, fdel[, doc]]]]) 属性访问的包装类，设置后可以通过c.x=value等来访问setter和getter reduce(function, iterable[, initializer]) 合并操作，从第一个开始是前两个参数，然后是前两个的结果与第三个合并进行处理，以此类推 reload(module) 重新加载模块 setattr(object, name, value) 设置属性值 repr(object) 将一个对象变幻为可打印的格式 slice（） staticmethod 声明静态方法，是个注解 super(type[, object-or-type]) 引用父类 type(object) 返回该object的类型 vars([object]) 返回对象的变量，若无参数与dict()方法类似 bytearray([source [, encoding [, errors]]]) 返回一个byte数组 1、如果source为整数，则返回一个长度为source的初始化数组； 2、如果source为字符串，则按照指定的encoding将字符串转换为字节序列； 3、如果source为可迭代类型，则元素必须为[0 ,255]中的整数； 4、如果source为与buffer接口一致的对象，则此对象也可以被用于初始化bytearray. zip([iterable, ...]) 实在是没有看懂，只是看到了矩阵的变幻方面 五、IO操作 file(filename [, mode [, bufsize]]) file类型的构造函数，作用为打开一个文件，如果文件不存在且mode为写或追加时，文件将被创建。添加‘b’到mode参数中，将对文件以二进制形式操作。添加‘+’到mode参数中，将允许对文件同时进行读写操作 1、参数filename：文件名称。 2、参数mode：'r'（读）、'w'（写）、'a'（追加）。 3、参数bufsize：如果为0表示不进行缓冲，如果为1表示进行行缓冲，如果是一个大于1的数表示缓冲区的大小 。 input([prompt]) 获取用户输入 推荐使用raw_input，因为该函数将不会捕获用户的错误输入 open(name[, mode[, buffering]]) 打开文件 与file有什么不同？推荐使用open print 打印函数 raw_input([prompt]) 设置输入，输入都是作为字符串处理 --- ps: 我也不知道那么多换行符是哪来的，无奈脸.jpg 来自网络，仅用于本人学习使用。 如有侵权，还望联系删除。 感谢：python内置函数大全","tags":[{"name":"随笔","slug":"随笔","permalink":"https://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"},{"name":"学习","slug":"学习","permalink":"https://xelengo.me/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"python","slug":"python","permalink":"https://xelengo.me/tags/python/"}]},{"title":"什么是MVC","date":"2017-05-15T14:39:00.000Z","path":"2017/20170515_1/","text":"MVC是一种设计思想、开发模式，即把项目代码分为M（Model 模型层 业务模型）V（View 视图层 用户界面）C（Controller 控制层 控制器）三部分。采用封装（分层）的思想，来降低耦合度，使系统更加灵活，增加程序的扩展性。提高代码的重用性，把业务逻辑代码与视图代码分离，通过控制器连接业务逻辑与视图，使代码结构层次清晰。MVC的缺点是：一个应用程序分成了三个部分开发，增加开发工作量。 而在j2ee开发中，视图层由jsp页面等进行充当，控制层由action（或controller）进行充当，而剩余的如：实体类，service层，dao（Data Access Object 数据访问对象）层（以及mapper,bean,util等）都属于MVC中的模型层。模型层是处理应用程序数据逻辑的部分，负责业务逻辑的处理，在数据库中存取数据。控制层主要的作用是控制页面跳转，负责与用户的交互，从视图读取数据，控制用户输入，并向模型发送数据。视图层在java web程序中由jsp页面充当，负责处理数据显示的部分。通常视图是依据模型数据创建的。 什么是多例，什么是单例？单例就是所有请求都用一个对象来处理，比如常用的service和dao层对象通常就是单例的，多例指每个请求用一个新对象来处理，比如action。 单例模式的对象在整个系统中只有一份，多例模式可以有多个实例。 用单例是因为没必要每个请求都新建一个对象，这样既浪费CPU又浪费内存。 用多例是为了防止并发问题，即一个请求改变了对象的状态，此时对象又处于另一个请求，而之前的请求对象的改变导致了对象对另一个请求做了错误的处理。 用单例和多例的标准只有一个：当对象含有可变状态时（准确的说是该实例在实际应用中状态会改变），则多例，否则单例。 而对于struts2来说，action必须为多例，因为action本身含有请求参数的值，即可变的状态，另外service和dao也不一定是单例，原因同上，容易产生隐藏的bug。而并发的bug很难复现。 临界资源：就是公共资源，多个线程间共享的数据称为临界资源（Cricital Resourse），由于是线程调度器负责线程的调度，程序员无法精确控制多线程的交替顺序，因此，多线程对临界资源的访问有时会导致数据的不一致性为。 SpringMVC的控制层为什么要用多例模式，其它层为什么要用单例模式？因为控制层（通常叫做Controller或者action）是处理与用户的逻辑交互的，通常伴随着多线程并发访问，那么这个时候控制层就处于一种临界状态，比如用户A改变了action中的某个对象的状态或者属性，此时用户B又调用了这个对象，那这个时候系统很可能会发生逻辑处理异常，返回错误的结果。所以，需要设置控制层action为多例（scope=”prototype”），每当有一个新的访问请求产生的时候，action就会创建一个新的对象进行处理，不同线程访问的是各自的对象，彼此不会发生并发访问的冲突。 而service,dao为什么用单例？就是service主要是用来处理业务逻辑的，action发送过来处理请求和处理参数，service进行相应的业务处理，涉及到数据库操作的时候调用dao层的方法，然后对dao层的返回结果进行处理，再把处理结果返回给action。Dao层也叫数据持久层，dao层接收service层发送过来的请求和参数，然后执行具体的数据库操作，再把处理结果返回给service。通常service，dao都是对具体方法的处理，它的属性通常不会发生改变，只是对具体业务进行处理。所以使用单例进行实现。 参考网络上的一些博客，自己又做了一点总结，梳理。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"},{"name":"java","slug":"java","permalink":"https://xelengo.me/tags/java/"}]},{"title":"Java项目命名规范(转)","date":"2017-03-20T14:39:00.000Z","path":"2017/20170320_1/","text":"这段时间对于java命名规范有些生疏了，特地在网络上整理编写了这篇规范，以后为个人的编程做一个参考吧。 一、项目名全部小写，比如cms、workdesk,jobserver等 二、java相关命名a、类命名：每音节单词前的第一个字母大写，比如FieldInfo、Expression等， b、普通变量(包括spring里的变量引用命名)：第一个单词前小写，以后每个单词第一个字母大写，password,primaryFlag c、静态变量：全部大写，多个单词则以_分开，比如BOOLEAN_FLAG d、包package命名：全部小写,比如com.joinspider.workdesk 补充： a、类名、变量名是名字组合，多名词顺序和中文顺序一样，比如ScriptEngine b、属性也可以是形容词+名词 c、常量可使用上述规则，如果为了体现多个常量是一组的概念，也可以被修饰前置，比如：VAR_START，VAR_END. c、方法是动词+名字或者只有动词 三、属性文件.properties定义变量命名object.a_b_c格式，全部小写，其中object是宿主，a_b_c多个单词下划线分开。 例：hibernate.cache.use_second_level_cache，hibernate.cache.provider_class，hibernate.cache.provider_configuration_file_resource_path 四、xml文件命名全部小写，-符号是其xml的用途说明，类似applicationContext属习惯命名。 比如springmvc-servlet.xml、workdesk-manager.xml、workdesk-servlet.xml、applicationContext-basic.xml等 xml里的内容多个字符间以-隔开，比如param-name，filter-mapping等 五、普通文件命名(jsp,js,img等)和java普通变量规范相同 六、属性文件properties以下划线隔开：errors_zh_CN.properties，hibernate_test.properties 七、数据库命名：表、字段命名全部大写，多个单词以_隔开 附加Java命名规范一、命名规范1、 项目名全部小写 2、 包名全部小写 3、 类名首字母大写，如果类名由多个单词组成，每个单词的首字母都要大写。 如：public class MyFirstClass{} 4、 变量名、方法名首字母小写，如果名称由多个单词组成，每个单词的首字母都要大写。 如： int index=0; public void toString(){}5、 常量名全部大写 如：public static final String GAME_COLOR=”RED”; 6、所有命名规则必须遵循以下规则： 1)、名称只能由字母、数字、下划线、$符号组成 2)、不能以数字开头 3)、名称不能使用JAVA中的关键字。 4)、坚决不允许出现中文及拼音命名。 二、注释规范1、 类注释在每个类前面必须加上类注释，注释模板如下： 12/**34* Copyright (C), 2006-2010, ChengDu Lovo info. Co., Ltd.56* FileName: Test.java78* 类的详细说明910*1112* @author 类创建者姓名13 * @Date 创建日期1415* @version 1.001617*/ 2、 属性注释在每个属性前面必须加上属性注释，注释模板如下： 12/** 提示信息 */34private String strMsg = null; 3、 方法注释在每个方法前面必须加上方法注释，注释模板如下： 12/**34* 类方法的详细使用说明56*78* @param 参数1 参数1的使用说明910* @return 返回结果的说明1112* @throws 异常类型.错误代码 注明从此类方法中抛出异常的说明1314*/ 4、 构造方法注释在每个构造方法前面必须加上注释，注释模板如下： 12/**34* 构造方法的详细使用说明56*78* @param 参数1 参数1的使用说明910* @throws 异常类型.错误代码 注明从此类方法中抛出异常的说明1112*/ 5、 方法内部注释在方法内部使用单行或者多行注释，该注释根据实际情况添加。 如：//背景颜色 Color bgColor = Color.RED 参考：http://www.cnblogs.com/maowang1991/archive/2013/06/29/3162366.html","tags":[{"name":"编程","slug":"编程","permalink":"https://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"},{"name":"java","slug":"java","permalink":"https://xelengo.me/tags/java/"}]},{"title":"23个MySQL常用查询语句","date":"2017-02-25T14:39:00.000Z","path":"2017/20170225_2/","text":"一查询数值型数据:SELECT * FROM tb_name WHERE sum &gt; 100; 查询谓词:&gt;,=,&lt;,&lt;&gt;,!=,!&gt;,!&lt;,=&gt;,=&lt; 二查询字符串 SELECT * FROM tb_stu WHERE sname = &apos;小刘&apos; SELECT * FROM tb_stu WHERE sname like &apos;刘%&apos; SELECT * FROM tb_stu WHERE sname like &apos;%程序员&apos; SELECT * FROM tb_stu WHERE sname like &apos;%PHP%&apos;三查询日期型数据SELECT * FROM tb_stu WHERE date = &apos;2011-04-08&apos; 注:不同数据库对日期型数据存在差异: ： (1)MySQL:SELECT * from tb_name WHERE birthday = ‘2011-04-08’ (2)SQL Server:SELECT * from tb_name WHERE birthday = &apos;2011-04-08&apos; (3)Access:SELECT * from tb_name WHERE birthday = #2011-04-08#四查询逻辑型数据SELECT * FROM tb_name WHERE type = &apos;T&apos; SELECT * FROM tb_name WHERE type = &apos;F&apos; 逻辑运算符:and or not 五查询非空数据SELECT * FROM tb_name WHERE address &lt;&gt;&apos;&apos; order by addtime desc 注:&lt;&gt;相当于PHP中的!= 六利用变量查询数值型数据SELECT * FROM tb_name WHERE id = &apos;$_POST[text]&apos; 注:利用变量查询数据时，传入SQL的变量不必用引号括起来，因为PHP中的字符串与数值型数据进行连接时，程序会自动将数值型数据转变成字符串，然后与要连接的字符串进行连接 七利用变量查询字符串数据SELECT * FROM tb_name WHERE name LIKE &apos;%$_POST[name]%&apos; 完全匹配的方法”%%”表示可以出现在任何位置 八查询前n条记录SELECT * FROM tb_name LIMIT 0,$N; limit语句与其他语句，如order by等语句联合使用，会使用SQL语句千变万化，使程序非常灵活 九查询后n条记录SELECT * FROM tb_stu ORDER BY id ASC LIMIT $n十查询从指定位置开始的n条记录SELECT * FROM tb_stu ORDER BY id ASC LIMIT $_POST[begin],$n 注意:数据的id是从0开始的 十一查询统计结果中的前n条记录SELECT * ,(yw+sx+wy) AS total FROM tb_score ORDER BY (yw+sx+wy) DESC LIMIT 0,$num十二查询指定时间段的数据 SELECT 要查找的字段 FROM 表名 WHERE 字段名 BETWEEN 初始值 AND 终止值 SELECT * FROM tb_stu WHERE age BETWEEN 0 AND 18 十三按月查询统计数据SELECT * FROM tb_stu WHERE month(date) = &apos;$_POST[date]&apos; ORDER BY date ;注：SQL语言中提供了如下函数，利用这些函数可以很方便地实现按年、月、日进行查询 year(data):返回data表达式中的公元年分所对应的数值 month(data):返回data表达式中的月分所对应的数值 day(data):返回data表达式中的日期所对应的数值 十四查询大于指定条件的记录 SELECT * FROM tb_stu WHERE age&gt;$_POST[age] ORDER BY age; 十五查询结果不显示重复记录 SELECT DISTINCT 字段名 FROM 表名 WHERE 查询条件注:SQL语句中的DISTINCT必须与WHERE子句联合使用，否则输出的信息不会有变化 ,且字段不能用*代替 十六NOT与谓词进行组合条件的查询 (1)NOT BERWEEN … AND … 对介于起始值和终止值间的数据时行查询 可改成 &lt;起始值 AND &gt;终止值 (2)IS NOT NULL 对非空值进行查询 (3)IS NULL 对空值进行查询 (4)NOT IN 该式根据使用的关键字是包含在列表内还是排除在列表外，指定表达式的搜索，搜索表达式可以是常量或列名，而列名可以是一组常量，但更多情况下是子查询 十七显示数据表中重复的记录和记录条数 SELECT name,age,count(*) ,age FROM tb_stu WHERE age = ‘19’ group by date 十八对数据进行降序/升序查询SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段 DESC 降序 SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段 ASC 升序 注:对字段进行排序时若不指定排序方式，则默认为ASC升序 十九对数据进行多条件查询SELECT 字段名 FROM tb_stu WHERE 条件 ORDER BY 字段1 ASC 字段2 DESC … 注意:对查询信息进行多条件排序是为了共同限制记录的输出，一般情况下，由于不是单一条件限制，所以在输出效果上有一些差别。 二十对统计结果进行排序 函数SUM([ALL]字段名) 或 SUM([DISTINCT]字段名),可实现对字段的求和，函数中为ALL时为所有该字段所有记录求和,若为DISTINCT则为该字段所有不重复记录的字段求和 如：SELECT name,SUM(price) AS sumprice FROM tb_price GROUP BY name SELECT * FROM tb_name ORDER BY mount DESC,price ASC二十一单列数据分组统计SELECT id,name,SUM(price) AS title,date FROM tb_price GROUP BY pid ORDER BY title DESC 注:当分组语句group by排序语句order by同时出现在SQL语句中时，要将分组语句书写在排序语句的前面，否则会出现错误 二十二多列数据分组统计 多列数据分组统计与单列数据分组统计类似SELECT ，SUM(字段1字段2) AS (新字段1) FROM 表名 GROUP BY 字段 ORDER BY 新字段1 DESC SELECT id,name,SUM(price*num) AS sumprice FROM tb_price GROUP BY pid ORDER BY sumprice DESC 注：group by语句后面一般为不是聚合函数的数列，即不是要分组的列 二十三多表分组统计 SELECT a.name,AVG(a.price),b.name,AVG(b.price) FROM tb_demo058 AS a,tb_demo058_1 AS b WHERE a.id=b.id GROUP BY b.type; 参考教程： 23个MySQL常用查询语句","tags":[{"name":"MySql","slug":"MySql","permalink":"https://xelengo.me/tags/MySql/"},{"name":"教程","slug":"教程","permalink":"https://xelengo.me/tags/%E6%95%99%E7%A8%8B/"},{"name":"编程","slug":"编程","permalink":"https://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"MySql常用数据库操作语句","date":"2017-02-25T09:58:00.000Z","path":"2017/20170225_1/","text":"MySQL（官方发音为英语发音：/maɪ ˌɛskjuːˈɛl/“My S-Q-L”[1]，但也经常读作英语发音：/maɪ ˈsiːkwəl/“My Sequel”）原本是一个开放源代码的关系数据库管理系统，原开发者为瑞典的MySQL AB公司，该公司于2008年被昇阳微系统（Sun Microsystems）收购。2009年，甲骨文公司（Oracle）收购昇阳微系统公司，MySQL成为Oracle旗下产品。MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用在Internet上的中小型网站中。随着MySQL的不断成熟，它也逐渐用于更多大规模网站和应用，比如维基百科、Google和Facebook等网站。非常流行的开源软件组合LAMP中的“M”指的就是MySQL。但被甲骨文公司收购后，Oracle大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目OpenSolaris的发展，因此导致自由软件社区们对于Oracle是否还会持续支持MySQL社区版（MySQL之中唯一的免费版本）有所隐忧，因此原先一些使用MySQL的开源软件逐渐转向其它的数据库。例如维基百科已于2013年正式宣布将从MySQL迁移到MariaDB数据库[2]。MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划MariaDB。 零、用户管理：1、新建用户：&gt;CREATE USER name IDENTIFIED BY &apos;ssapdrow&apos;;2、更改密码：&gt;SET PASSWORD FOR name=PASSWORD(&apos;fdddfd&apos;);3、权限管理&gt;SHOW GRANTS FOR name; //查看name用户权限 &gt;GRANT SELECT ON db_name.* TO name; //给name用户db_name数据库的所有权限 &gt;REVOKE SELECT ON db_name.* TO name; //GRANT的反操作，去除权限；一、数据库操作： 1、查看数据库：&gt;SHOW DATABASES;2、创建数据库：&gt;CREATE DATABASE db_name; //db_name为数据库名3、使用数据库：&gt;USE db_name;4、删除数据库：&gt;DROP DATABASE db_name;二、创建表：1、创建表：&gt;CREATE TABLE table_name(id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT, //id值，无符号、非空、递增——唯一性，可做主键。 &gt;name VARCHAR(60) NOT NULL &gt;score TINYINT UNSIGNED NOT NULL DEFAULT 0, //设置默认列值 &gt;PRIMARY KEY(id) &gt;)ENGINE=InnoDB //设置表的存储引擎，一般常用InnoDB和MyISAM；InnoDB可靠，支持事务；MyISAM高效不支持全文检索 &gt;DEFAULT charset=utf8; //设置默认的编码，防止数据库中文乱码如果有条件的创建数据表还可以使用 &gt;CREATE TABLE IF NOT EXISTS tb_name(…….. 2、复制表：&gt;CREATE TABLE tb_name2 SELECT * FROM tb_name; 或者部分复制： &gt;CREATE TABLE tb_name2 SELECT id,name FROM tb_name;3、创建临时表：&gt;CREATE TEMPORARY TABLE tb_name(这里和创建普通表一样);4、查看数据库中可用的表：&gt;SHOW TABLES;5、查看表的结构：&gt;DESCRIBE tb_name; 也可以使用： &gt;SHOW COLUMNS in tb_name; //from也可以6、删除表：&gt;DROP [ TEMPORARY ] TABLE [ IF EXISTS ] tb_name[ ,tb_name2.......]; 实例： &gt;DROP TABLE IF EXISTS tb_name;7、表重命名：&gt;RENAME TABLE name_old TO name_new; 还可以使用： &gt;ALTER TABLE name_old RENAME name_new;三、修改表：1、更改表结构：&gt;ALTER TABLE tb_name ADD[CHANGE,RENAME,DROP] ...要更改的内容... 实例： &gt;ALTER TABLE tb_name ADD COLUMN address varchar(80) NOT NULL; &gt;ALTER TABLE tb_name DROP address; &gt;ALTER TABLE tb_name CHANGE score score SMALLINT(4) NOT NULL;四、插入数据：1、插入数据：&gt;INSERT INTO tb_name(id,name,score)VALUES(NULL,&apos;张三&apos;,140),(NULL,&apos;张四&apos;,178),(NULL,&apos;张五&apos;,134); 这里的插入多条数据直接在后边加上逗号，直接写入插入的数据即可；主键id是自增的列，可以不用写。 2、插入检索出来的数据：&gt;INSERT INTO tb_name(name,score) SELECT name,score FROM tb_name2;五、更新数据：1、指定更新数据：&gt;UPDATE tb_name SET score=189 WHERE id=2; &gt;UPDATE tablename SET columnName=NewValue [ WHERE condition ]六、删除数据：1、删除数据：&gt;DELETE FROM tb_name WHERE id=3;七、条件控制：1、WHERE 语句：&gt;SELECT * FROM tb_name WHERE id=3;2、HAVING 语句：&gt;SELECT * FROM tb_name GROUP BY score HAVING count(*)&gt;23、相关条件控制符：=、&gt;、&lt;、&lt;&gt;、IN(1,2,3......)、BETWEEN a AND b、NOT AND 、OR Linke()用法中 % 为匹配任意、 _ 匹配一个字符（可以是汉字） IS NULL 空值检测八、MySQL的正则表达式：1、Mysql支持REGEXP的正则表达式：&gt;SELECT * FROM tb_name WHERE name REGEXP &apos;^[A-D]&apos; //找出以A-D 为开头的name2、特殊字符需要转义。九、MySQL的一些函数：1、字符串链接——CONCAT()&gt;SELECT CONCAT(name,&apos;=&gt;&apos;,score) FROM tb_name2、数学函数：AVG、SUM、MAX、MIN、COUNT；3、文本处理函数：TRIM、LOCATE、UPPER、LOWER、SUBSTRING4、运算符：+、-、*、\\5、时间函数：DATE()、CURTIME()、DAY()、YEAR()、NOW().....十、分组查询：1、分组查询可以按照指定的列进行分组：&gt;SELECT COUNT(*) FROM tb_name GROUP BY score HAVING COUNT(*)&gt;1;2、条件使用Having；3、ORDER BY 排序：ORDER BY DESC|ASC =&gt;按数据的降序和升序排列十一、UNION规则——可以执行两个语句（可以去除重复行）十二、全文检索——MATCH和AGAINST1、SELECT MATCH(note_text)AGAINST(&apos;PICASO&apos;) FROM tb_name; 2、InnoDB引擎不支持全文检索，MyISAM可以；十三、视图1、创建视图&gt;CREATE VIEW name AS SELECT * FROM tb_name WHERE ~~ ORDER BY ~~;2、视图的特殊作用： a、简化表之间的联结（把联结写在select中）； b、重新格式化输出检索的数据（TRIM，CONCAT等函数）； c、过滤不想要的数据（select部分） d、使用视图计算字段值，如汇总这样的值。十四、使用存储过程：个人理解，存储过程就是一个自定义函数，有局部变量参数，可传入参数，可以返回值，不过这语法够呆滞的~ 1、创建存储过程：&gt;CREATE PROCEDURE pro( &gt;IN num INT,OUT total INT) &gt;BEGIN &gt;SELECT SUM(score) INTO total FROM tb_name WHERE id=num; &gt;END;这里的 IN (传递一个值给存储过程)，OUT（从存储过程传出一个值），INOUT（对存储过程传入、传出），INTO（保存变量） 2、调用存储过程：&gt;CALL pro(13,@total) //这里的存储过程两个变量，一个是IN一个是OUT，这里的OUT也是需要写上的，不写会出错 &gt;SELECT @total //这里就可以看到结果了；3、存储过程的其他操作：&gt;SHOW PROCEDURE STATUS; //显示当期的存储过程 &gt;DROP PROCEDURE pro; //删除指定存储过程十五、使用游标： 对这个理解不是很懂，朋友多多指点哦~ 1、游标的操作&gt;CREATE PROCEDURE pro() &gt;BEGIN &gt;DECLARE ordername CURSOR FOR &gt;SELECT order_num FROM orders; &gt;END; &gt;OPEN ordername; //打开游标 &gt;CLOSE ordername; //关闭游标十六、触发器： 触发器是指在进行某项指定操作时，触发触发器内指定的操作； 1、支持触发器的语句有DELETE、INSERT、UPDATE,其他均不支持2、创建触发器：&gt;CREATE TRIGGER trig AFTER INSERT ON ORDERS FOR EACH ROW SELECT NEW.orser_name; &gt;INSERT语句，触发语句，返回一个值3、删除触发器&gt;DROP TRIGGER trig;十七、语法整理：1、ALTER TABLE（修改表）ALTER TABLE table_name ( ADD column datatype [ NULL | NOT NULL ] [ CONSTRAINTS ] CHANGE column datatype COLUMNS [ NULL | NOT NULL ] [ CONSTRAINTS ] DROP column， 。。。。 )2、COMMIT(处理事务)&gt;COMMIT;3、CREATE INDEX(在一个或多个列上创建索引)CREATE INDEX index_name ON tb_name (column [ ASC | DESC ] , .......);4、CREATE PROCEDURE (创建存储过程)CREATE PROCEDURE pro([ parameters ]) BEGIN ........ END5、CREATE TABLE(创建表)CREATE TABLE tb_name( column_name datetype [ NULL | NOT NULL ] [ condtraints] , column_name datetype [ NULL | NOT NULL ] [ condtraints] , ....... PRIMARY KEY( column_name ) )ENGINE=[ InnoDB | MyiSAM ]DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;6、CREATE USER(创建用户)CREATE USER user_name [ @hostname ] [ IDENTIFIED BY [ PASSWORD ] &apos;pass_word&apos; ];7、CREATE VIEW （在一个或多个表上创建视图）CREATE [ OR REPLACE ] VIEW view_name AS SELECT。。。。。。8、DELETE (从表中删除一行或多行)DELETE FROM table_name [WHERE ......]9、DROP(永久删除数据库及对象，如视图、索引等)DROP DATEBASE | INDEX | PROCEDURE | TABLE | TRIGGER | USER | VIEW name10、INSERT （给表添加行）INSERT INTO tb_name [ ( columns,...... ) ] VALUES(value1,............); 使用SELECT值插入： INSERT INTO tb_name [ ( columns,...... ) ] SELECT columns , ....... FROM tb_name [ WHERE ...... ] ;11、ROLLBACK（撤销一个事务处理块）ROLLBACK [ TO savapointname ];12、SAVEPOINT(为ROLLBACK设置保留点)SAVEPOINT sp1;13、SELECT (检索数据，显示信息)SELECT column_name,.....FROM tb_name [ WHERE ] [ UNION ] [ RROUP BY ] [ HAVING ] [ ORDER BY ]14、START TRANSACTION (一个新的事务处理块的开始)START TRANSACTION15、UPDATE(更新一个表中的一行或多行)UPDATE tb_name SET column=value,......[ where ] 参考教程： 常用的Mysql数据库操作语句大全","tags":[{"name":"MySql","slug":"MySql","permalink":"https://xelengo.me/tags/MySql/"},{"name":"教程","slug":"教程","permalink":"https://xelengo.me/tags/%E6%95%99%E7%A8%8B/"},{"name":"编程","slug":"编程","permalink":"https://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"}]},{"title":"【Java编码规范】《阿里巴巴Java开发手册（正式版）》发布！","date":"2017-02-12T14:39:00.000Z","path":"2017/20170212_1/","text":"2017年2月9日阿里巴巴发布了一份《阿里巴巴Java开发手册（正式版）》，引起了互联网上程序员们广泛讨论。 作为一名java伪初学者，得知这个消息还是要尽快来学习学习的。毕竟是阿里巴巴出的编码规范，总是会对初学者有很大帮助吧。一份好的编码规约，能够让编程少踩很多坑；一个好的编程习惯，能让以后的编程旅途更加顺畅。 点击进行百度云下载 摘要： 阿里巴巴集团推出的《阿里巴巴Java开发手册（正式版）》是阿里巴巴近万名开发同学集体智慧的结晶，以开发视角为中心，详细列举如何开发更加高效、更加容错、更加有协作性，力求知其然，更知其不然，结合正反例，让Java开发者能够提升协作效率、提高代码质量。* 2017年开春之际，诚意献上重磅大礼：阿里巴巴Java开发手册，首次公开阿里官方Java代码规范标准。这套Java统一规范标准将有助于提高行业编码规范化水平，帮助行业人员提高开发质量和效率、大大降低代码维护成本。 点击下载《阿里巴巴Java开发手册》：阿里云点击下载 https://yq.aliyun.com/attachment/download/?id=1170 （点击参与话题讨论：Java开发者们，一起来聊聊大家的开发规约吧） 你是否曾因Java代码规范版本纷杂而无所适从？ 你是否想过代码规范能将系统故障率降低20%？ 你是否曾因团队代码风格迥异而协同困难？ 你是否正在review一些原本可以避免的故障？ 你是否无法确定自己的代码足够健壮？ 码出高效，码出质量！ 相比C++代码规范业界已经达成共识，Java代码规范业界比较混乱，我们期待这次发布的Java代码规范能够给业界带来一个标准，促使整体行业代码规范水平得到提高，最终能够帮助企业和开发者提升代码质量和降低代码故障率。 阿里出品，质量保证！ 阿里Java技术团队一手打造出Dubbo、JStorm、Fastjson等诸多流行开源框架，部分已成为Apache基金会孵化项目； 阿里在Java后端领域支撑起全球访问量最大的服务器集群； Java代码构建的阿里双11业务系统订单处理能力达到17.5万笔/秒； 到目前已累计数亿行高并发、高稳定性的最佳Java代码实践； …… 此次首度公开的Java开发手册正是出自这样的团队，近万名阿里Java技术精英的经验总结，并经历了多次大规模一线实战检验及完善，铸就了这本高含金量的阿里Java开发手册。该手册以Java开发者为中心视角，划分为编程规约、异常日志规约、MYSQL规约、工程规约、安全规约五大块，再根据内容特征，细分成若干二级子目录。根据约束力强弱和故障敏感性，规约依次分为强制、推荐、参考三大类。此套规范不仅能让代码一目了然， 更有助于加强团队分工与合作、真正提升效率。 无规矩不成方圆 无规范不能协作 众所周知，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全。试想如果没有限速，没有红绿灯，没有规定靠右行驶，谁还敢上路行驶。 同理，对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的方式一起做事，降低故障率，提升协作效率。开发手册详细列举如何开发更加高效，更加容错，更加有协作性，力求知其然，更知其不然，结合正反例，提高代码质量。比如，异常日志处理时的各种不规范行为；集合转换的各种坑；创建线程池出现的等待队列OOM等。 阿里技术资深大咖联袂推荐 阿里高级研究员多隆：工程师对于代码，一定要“精益求精”，不论从性能，还是简洁优雅，都要具备“精益求精”的工匠精神，认真打磨自己的作品。 阿里研究员毕玄：一个优秀的工程师和一个普通工程师的区别，不是现在满天飞的架构图，他的功底就是体现在他写的每一行代码上。 阿里研究员玄难：代码是软件工程里面的产品设计、系统架构设计等工作的最后承载体，代码的质量决定了一切工作的成败。 阿里巴巴B2B事业群CTO李纯：好的软件产品离不开工程师高质量的代码及相互间顺畅的沟通与合作。简单，适用的代码规约背后所传递的是技术上的追求卓越、协同合作的精神，是每个技术团队不可缺失的重要利器。 阿里研究员、HipHop作者：赵海平（花名：福贝）：程序员是创造个性化作品的艺术家，但同时也是需要团队合作的工种。个性化应尽量表现在代码效率和算法方面，牺牲小我，成就大我。 拥抱规范，远离伤害！ 开发的同学们赶紧行动起来，遵守代码规范，你好，我好，大家好！ 扩展阅读： 知乎–如何评价阿里近期发布的Java编码规范？ 云栖社区–【Java编码规范】《阿里巴巴Java开发手册（正式版）》发布！ 掘金–【Java编码规范】《阿里巴巴Java开发手册（正式版）》发布！ 云栖社区-话题讨论-Java开发者们，一起来聊聊大家的开发规约吧","tags":[{"name":"编程","slug":"编程","permalink":"https://xelengo.me/tags/%E7%BC%96%E7%A8%8B/"},{"name":"java","slug":"java","permalink":"https://xelengo.me/tags/java/"},{"name":"知识分享","slug":"知识分享","permalink":"https://xelengo.me/tags/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"},{"name":"阿里巴巴","slug":"阿里巴巴","permalink":"https://xelengo.me/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4/"},{"name":"开发手册","slug":"开发手册","permalink":"https://xelengo.me/tags/%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"},{"name":"代码规范","slug":"代码规范","permalink":"https://xelengo.me/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"}]},{"title":"Python3.6安装教程","date":"2017-02-04T14:39:00.000Z","path":"2017/20170204_2/","text":"首先。先看一下Python的简介： Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/），是一种面向对象、解释型的计算机程序语言。它包含了一组功能完备的标准库，能够轻松完成很多常见的任务。它的语法简单，与其它大多数程序设计语言使用大括号不一样，它使用缩进来定义语句块。 与Scheme、Ruby、Perl、Tcl等动态语言一样，Python具备垃圾回收功能，能够自动管理内存使用。它经常被当作脚本语言用于处理系统管理任务和网络程序编写，然而它也非常适合完成各种高级任务。Python虚拟机本身几乎可以在所有的作业系统中运行。使用一些诸如py2exe、PyPy、PyInstaller之类的工具可以将Python源代码转换成可以脱离Python解释器运行的程序。 Python的官方解释器是CPython，该解释器用C语言编写，是一个由社区驱动的自由软件，目前由Python软件基金会管理。 Python支持命令式程序设计、面向对象程序设计、函数式编程、面向侧面的程序设计、泛型编程多种编程范式。 from:wiki 在Windows上安装Python首先，根据你的Windows版本（64位还是32位）从Python的官方网站下载Python 3.6对应的64位安装程序或32位安装程序（网速慢的同学请移步国内镜像），点击下载 然后，运行下载的EXE安装包： 特别要注意勾上Add Python 3.6 to PATH，然后点“Install Now”即可完成安装。 默认会安装到C:\\Users\\用户名\\AppData\\Local\\Programs\\Python\\Python36目录下，然后打开命令提示符窗口，敲入python后，会出现两种情况： 看到上面的画面，就说明Python安装成功！ 你看到提示符&gt;&gt;&gt;就表示我们已经在Python交互式环境中了，可以输入任何Python代码，回车后会立刻得到执行结果。现在，输入exit()并回车，就可以退出Python交互式环境（直接关掉命令行窗口也可以）。 情况二：得到一个错误： 1‘python’ 不是内部或外部命令，也不是可运行的程序或批处理文件。 这是因为Windows会根据一个Path的环境变量设定的路径去查找python.exe，如果没找到，就会报错。如果在安装时漏掉了勾选Add Python 3.5 to PATH，那就要手动把python.exe所在的路径添加到Path中。 如果你不知道怎么修改环境变量，建议把Python安装程序重新运行一遍，务必记得勾上Add Python 3.5 to PATH。 参考教程：安装Python–廖雪峰","tags":[{"name":"MySql","slug":"MySql","permalink":"https://xelengo.me/tags/MySql/"},{"name":"教程","slug":"教程","permalink":"https://xelengo.me/tags/%E6%95%99%E7%A8%8B/"},{"name":"数据库","slug":"数据库","permalink":"https://xelengo.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"window10安装mysql数据库","date":"2017-02-04T10:47:00.000Z","path":"2017/20170204_1/","text":"mysql是一个轻量级的数据库，非常适合独立开发者安装到自己的电脑上进行程序开发和测试。 Mysql关系型数据库管理系统MySQL是一个开放源码的小型关联式数据库管理系统，开发者为瑞典MySQL AB公司。MySQL被广泛地应用在Internet上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了MySQL作为网站数据库。 这篇文章主要为大家分享了mysql 5.7.13 安装配置方法图文教程,感兴趣的朋友可以参考一下 MySQL是一款关系型数据库管理系统，是由Oracle旗下公司MySQL AB 公司开发，是在web方面最好的、最流行的关系型数据库软件应用之一，深受广大个人使用者以及中小型企业的喜爱。 1.下载当前最新版5.7.17.0 官网下载地址：https://dev.mysql.com/downloads/installer/ 上面明确提示：MySQL安装程序是32位的，但会同时安装32位和64位二进制文件。 所以同样适用于32位和64位的Window操作系统。 下载的地方有两个，上面一个1.5M的是在线安装程序，我们下载下面一个234.8M的，下载后可直接安装。点击 : Download, 出现如下： 跳过登陆，直接进行下载，直接点击左下角 ：*No thanks,just start my download * 进行下载。 校验： 大小: 405422080 字节 MD5: E03723EB6C6BAC271A848BD9031EA859 SHA1: 064CE58B994314A5F055851BA4B762A37908439B CRC32: FAF8B4EF 效验工具：Hash.exe 下载好后进行安装 2. 安装双击安装文件，进入安装，在协议许可（LicenseAgreement）界面，勾选“I accept the license term”，然后点击“next” 在选择安装类型（ChoosingaSetupType）界面，根据安装需求选择安装类型（推荐默认开发版本），设置MySQL安装路径和数据存放路径，最后点击“next”。 在检查要求（CheckRequirements）界面，点击“Execute”检查是否达到安装的要求，通过检查要求后点击“next‘ 注意：点击“Execute”按钮后，可能会下载一些程序，到时你自己点击安装就行了，直到所有安装完成就OK了 因为我的电脑安装有visuao studio 和python 2.7,而这个版本的mysql支持的是python3.4;所以会检查不通过,不用管它，继续next。 在安装（Installation）界面，点击“Execute”开始安装，所有的product安装完毕后点击“next” 在配置概述（Product Configuration）界面，点击“next” 在MySQL服务配置（Type and Networking - ServerConfiguration Type）界面，勾选Show Advanced Options，其他的默认不做修改，点击“next”。 在账号和角色设置（Accounts and Roles）界面，设置根账户（root账户）密码，添加一个MySQL User Accounts（非根）用户账户。其目的是便于数据库权限管理，为远程访问者提供安全账户，点击“next” 在Windows Service界面，默认windows服务配置不做修改，点击“next” 在插件与扩展（Plugins and Extensions）界面，默认设置，点击“next” 在高级选项设置（Advanced Options）界面，默认原有设置，点击“next” 在应用服务器配置（Apply Server Configuration）界面，点击“Execute”，当所有的配置执行完毕后，configuration for mysql server 5.7.13 has successed，点击“finish” 在产品配置（Product Configuration）界面，点击“next” 在连接到服务器（Connect To Server）界面，点击“check”，测试服务器是否连接成功，连接成功后，点击“next”， 回到应用服务器配置（Apply Server Configuration）界面，点击“Execute”，配置成功后，点击“finish” 回到产品配置（Product Configuration）界面，点击“next”， 在安装完成（Installation Complete）界面，点击“finish” 以上就是mysql 5.7.13安装配置方法，希望对大家的学习有所帮助。 3.测试接下来会自动打开MySQL Workbench，再测试一下： 输入超级管理员密码，进行登录 登陆成功 输入sql语句进行测试； 1show database; 好了，本教程结束 参考教程：mysql下载： http://blog.csdn.net/wtfmonking/article/details/17467399 安装： http://www.phperz.com/article/16/0703/231883.html 测试： http://jingyan.baidu.com/article/7e440953d6f0702fc1e2ef61.html RUNOOB教程：http://www.runoob.com/mysql/mysql-install.html","tags":[{"name":"MySql","slug":"MySql","permalink":"https://xelengo.me/tags/MySql/"},{"name":"教程","slug":"教程","permalink":"https://xelengo.me/tags/%E6%95%99%E7%A8%8B/"},{"name":"win10","slug":"win10","permalink":"https://xelengo.me/tags/win10/"}]},{"title":"Hello world（三） - yilia主题使用和配置","date":"2017-02-03T14:39:00.000Z","path":"2017/20170203-1/","text":"本篇内容转自 litten.me 一、使用1. 安装1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 2. 配置修改hexo根目录下的 _config.yml ： theme: yilia 3. 更新1cd themes/yilia2git pull 二、配置主题配置文件在主目录下的_config.yml： 1# Header2menu:3 主页: /4 所有文章: /archives5 # 旧事: /tags/旧事6# SubNav7subnav:8 github: \"https://github.com/litten\"9 weibo: \"http://weibo.com/litten225\"10 rss: \"http://feed.feedsky.com/litten\"11 # facebook: \"/\"12 # google: \"/\"13 # twitter: \"/\"14 # linkedin: \"/\"15rss: /atom.xml16# Content17excerpt_link: more18fancybox: true19# Miscellaneous20favicon: /favicon.png21avatar: \"https://avatars2.githubusercontent.com/u/2024949?v=2&amp;s=150\"22share: true23duoshuo: true 禁止评论可以通过修改你的.md文章的头部实现。设置comments:false即可。 三、 hexo指令集Git Shell 在你的hexo根目录下输入：hexo可查看 1hexo # 查看帮助2hexo help # 查看帮助 四、贴两份_config.ymlhexo根目录下的_config 1# Hexo Configuration2## Docs: https://hexo.io/docs/configuration.html3## Source: https://github.com/hexojs/hexo/45# Site #站点信息6title: XElengo的个人博客7subtitle: 从今天起，立志改变8description: 我的个人学习&amp;生活记录9author: Xulinhu10email: 18838969833@163.com11keywords: \"Java,Android,C#,HTML5\"12language: zh-CN13timezone: 1415# URL16## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'17url: https://xelengo.github.io/18root: /19permalink: :year/:month/:day/:title/20permalink_defaults:2122# Directory #目录23source_dir: source24public_dir: public25tag_dir: tags26archive_dir: archives27category_dir: categories28code_dir: downloads/code29i18n_dir: :lang30skip_render:3132# Writing # 写作33new_post_name: :title.md # File name of new posts34default_layout: post #默认模板(post page photo draft)35titlecase: false # Transform title into titlecase36external_link: true # Open external links in new tab37filename_case: 038render_drafts: false39post_asset_folder: false40relative_link: false41future: true42highlight:43 enable: true44 line_number: true45 auto_detect: true46 tab_replace: ''4748# Category &amp; Tag #分类和标签49default_category: uncategorized50category_map:51tag_map:5253# Archives54## 2: Enable pagination55## 1: Disable pagination56## 0: Fully Disable57archive: 158category: 159tag: 16061# Date / Time format #日期时间格式62## Hexo uses Moment.js to parse and display date63## You can customize the date format as defined in64## http://momentjs.com/docs/#/displaying/format/65date_format: YYYY-MM-DD66time_format: HH:mm:ss6768# Pagination #分页69## Set per_page to 0 to disable pagination70per_page: 1071pagination_dir: page7273# Disqus #Disqus评论系统74disqus_shortname:7576# Extensions #插件和主题77## Plugins: https://hexo.io/plugins/78## Themes: https://hexo.io/themes/79theme: yilia80exclude_generator:8182feed:83 type: atom84 path: atom.xml85 limit: 1008687# Deployment #部署, 同时发布在 GitHub 和 GitCafe 上面88## Docs: https://hexo.io/docs/deployment.html89# deploy:90# type: git91# repository: https://github.com/xelengo/xelengo.github.io.git //jarson7426替换为你自己的用户名92# branch: master93 94# deploy:95# - type: git96# repo: git@gitcafe.com:username/username.git,gitcafe-pages97# - type: git98# repo: git@github.com:username/username.github.io.git,master 99100# plugins: #插件，例如生成 RSS 和站点地图的101# - hexo-generator-feed102# - hexo-generator-sitemap103104jsonContent:105 meta: false106 pages: false107 posts:108 title: true109 date: true110 path: true111 text: true112 raw: false113 content: false114 slug: false115 updated: false116 comments: false117 link: false118 permalink: false119 excerpt: false120 categories: false121 tags: true yilia根目录下的_config1# Hexo Configuration2## Docs: https://hexo.io/docs/configuration.html3## Source: https://github.com/hexojs/hexo/45# Site #站点信息6title: XElengo的个人博客7subtitle: 从今天起，立志改变8description: 我的个人学习&amp;生活记录9author: Xulinhu10email: 18838969833@163.com11keywords: \"Java,Android,C#,HTML5\"12language: zh-CN13timezone: 1415# URL16## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'17url: https://xelengo.github.io/18root: /19permalink: :year/:month/:day/:title/20permalink_defaults:2122# Directory #目录23source_dir: source24public_dir: public25tag_dir: tags26archive_dir: archives27category_dir: categories28code_dir: downloads/code29i18n_dir: :lang30skip_render:3132# Writing # 写作33new_post_name: :title.md # File name of new posts34default_layout: post #默认模板(post page photo draft)35titlecase: false # Transform title into titlecase36external_link: true # Open external links in new tab37filename_case: 038render_drafts: false39post_asset_folder: false40relative_link: false41future: true42highlight:43 enable: true44 line_number: true45 auto_detect: true46 tab_replace: ''4748# Category &amp; Tag #分类和标签49default_category: uncategorized50category_map:51tag_map:5253# Archives54## 2: Enable pagination55## 1: Disable pagination56## 0: Fully Disable57archive: 158category: 159tag: 16061# Date / Time format #日期时间格式62## Hexo uses Moment.js to parse and display date63## You can customize the date format as defined in64## http://momentjs.com/docs/#/displaying/format/65date_format: YYYY-MM-DD66time_format: HH:mm:ss6768# Pagination #分页69## Set per_page to 0 to disable pagination70per_page: 1071pagination_dir: page7273# Disqus #Disqus评论系统74disqus_shortname:7576# Extensions #插件和主题77## Plugins: https://hexo.io/plugins/78## Themes: https://hexo.io/themes/79theme: yilia80exclude_generator:8182feed:83 type: atom84 path: atom.xml85 limit: 1008687# Deployment #部署, 同时发布在 GitHub 和 GitCafe 上面88## Docs: https://hexo.io/docs/deployment.html89# deploy:90# type: git91# repository: https://github.com/xelengo/xelengo.github.io.git //jarson7426替换为你自己的用户名92# branch: master93 94# deploy:95# - type: git96# repo: git@gitcafe.com:username/username.git,gitcafe-pages97# - type: git98# repo: git@github.com:username/username.github.io.git,master 99100# plugins: #插件，例如生成 RSS 和站点地图的101# - hexo-generator-feed102# - hexo-generator-sitemap103104jsonContent:105 meta: false106 pages: false107 posts:108 title: true109 date: true110 path: true111 text: true112 raw: false113 content: false114 slug: false115 updated: false116 comments: false117 link: false118 permalink: false119 excerpt: false120 categories: false121 tags: true","tags":[{"name":"随笔","slug":"随笔","permalink":"https://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"},{"name":"博客","slug":"博客","permalink":"https://xelengo.me/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"分享","slug":"分享","permalink":"https://xelengo.me/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"Hello world（二） - yillia主题配置及使用markdown语法","date":"2017-02-02T09:58:00.000Z","path":"2017/20170202-2/","text":"设置新文章标题，标签，创建时间等1title: 测试2tags: [随笔,测试标签]3date: 2017-02-02 17:58:004toc: true // 是否显示目录 1# 设置标签可以通过下面两种方式实现2menu:3主页: /4所有文章: /archives5前端: /categories/前端6随笔: /tags/随笔78# 在post的顶部添加categories: 前端 ，tags: 随笔910或者11menu:12主页: /13所有文章: /archives14前端: /tags/前端15随笔: /tags/随笔 执行下列命令来创建一篇新文章1hexo new [layout] &lt;title&gt; 参考：https://hexo.io/zh-cn/docs/writing 在post的顶部添加tags: [随笔, 前端] 使用yilia主题时，文章过长使用&lt;!-- more --&gt;截断文章，示例如第一篇博客。 yilia模板范例：yilia博客 测试插入图片网络(绝对)路径(显示大图可获得该路径)：http://raw.githubusercontent.com/XElengo/XElengo.github.io/master/assets/img/blogimg/1a.png 相对路径：/assets/img/blogimg/1c.png 语法高亮: hexo官方集成的语法高亮插件是highlightjs; 例： 1&#123;int a,b;&#125; 网易云音乐插件：需要到网易云音乐网站上注册外链引用。 yilia 多说评论插件使用因多说插件官方已不提供支持，以下内容已无参考价值。 多说插件duoshuo: &quot;xxxx&quot; 已设置，但是无法成功显示，浏览器调试工具console报错：990002 自己解决了，方法虽然不太好；写死这个地方yilia\\layout_partial\\post\\duoshuo.ejs ： var duoshuoQuery = {short_name:”xelengo”};short_name是用多说网站生成的模板 即 工具–&gt;通用代码中的short_name，即 多说–&gt;设置 那里的域名的第一部分，如：xelengo.duoshuo.com 中的xelengo。因为多说的账户名称可以修改，但注册账号时的多说域名不可修改，且账户名称与域名的第一部分允许不同，而多说评论插件是通过访问多说域名进行显示的。所以可能会出错吧。另外本地缓存，github上的代码，以及多说本身都会影响运行结果。谢谢 @litten 提供的模板 参考：//github.com/litten/hexo-theme-yilia/issues/28 待在线浏览成功后可以再把var duoshuoQuery = {short_name:”xelengo”};改回去。重新发布后评论栏依然存在。由此可以把锅甩给缓存了。。。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"Hello world（一） - 安装hexo框架","date":"2017-02-02T06:59:00.000Z","path":"2017/20170202-1/","text":"20190811更新后来又买了自己的域名，买了vps，自此打开新世界，有了vps，你就可以做很多事情了，比如挂一个自己的网站，比如搭一个ftp存放自己的一些文件，买个国外的vps做跳板，进而访问一些不存在的网站等等。 以下是原来的文章： 历时两天，从有一个使用github的想法但不知道github可以做什么，到知道用github+hexo可以自建博客，再自己一路摸索过来，在网上不断地找教程，学习，尝试，最后借用github大神的框架进行尝试并成功的建立自己的博客，收获良多。 之后会把自己的建博客经过写出来，供大家参考。 博客和新浪微博，QQ空间，百度贴吧等一样，它更像是一个完全属于自己的小站，把它从无到有的建立出来的这个过程，是有着完全不同的体验。 感谢&amp;参考文档框架模板来自github大神：litten-github主页，litten的博客 官方文档还是很有用的：hexo官方网站 hexo框架github地址，有个readme.md还是有点用的：//github.com/hexojs/hexo/ 这篇博客也很不错，我就是通过学习这个教程做的。//wsgzao.github.io/post/hexo-guide/ 如果要建一个独立域名的个人博客，可以参考这一篇：//www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/ 一个个人收藏的博客：//jocs.me/blog/ github参考：//github.com/youngxhui/youngxhui.github.io github终端操作指令安装前提：需要已安装github for windows,node.js 安装: 1npm install hexo-cli -g 或 1npm install -g hexo-cli 全局安装hexo框架。 一段时间后，安装完成，安装到C盘，截图如下： 1hexo -v 检查版本信息，验证是否安装成功 1npm install hexo --save 本地安装hexo 安装完成后就需要创建本地站点了。 首先选择一个文件夹作为本地站点根目录。如： 1cd.. 后退到上级目录 1hexo init [folder] 新建一个网站(初始化)。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站,所以选择好目录后就变成了： 1hexo init 执行完毕后如图： 启动服务（先看看效果(http://localhost:4000/)，看完记得关闭服务（ctrl+c）） 1hexo server 接下来，安装插件（可以一次性复制下面所有命令进行执行，建议全部安装） 1npm install hexo-generator-index --save23npm install hexo-generator-archive --save45npm install hexo-generator-category --save67npm install hexo-generator-tag --save89npm install hexo-server --save1011npm install hexo-deployer-git --save1213npm install hexo-deployer-heroku --save1415npm install hexo-deployer-rsync --save1617npm install hexo-deployer-openshift --save1819npm install hexo-renderer-marked@0.2 --save2021npm install hexo-renderer-stylus@0.2 --save2223npm install hexo-generator-feed@1 --save2425npm install hexo-generator-sitemap@1 --save 安装结果： 再看看效果Hexo简写命令 1hexo n #生成文章，或者source\\_posts手动编辑,如果报错就改错。23hexo s #本地发布预览效果45hexo g #生成public静态文件67最后我选择手动同步更新至GitHub 还要再装一个yilin需要用的插件： 1npm i hexo-generator-json-content --save 安装完再部署一遍 部署静态网页到GitHub注册设置GitHub— 登录GitHub，注册自定义用户名如wsgzao — 在主页右下角创建New repository，name必须和用户名一致如xelengo.github.io — 首次创建耐心等待10分钟左右审核，之后即可访问静态主页如 http://xelengo.github.io 同步内容至GitHub 下载GitHub Windows 设置Local path如E:\\GitHub\\ 运行Git Shell切换到如E:\\GitHub\\hexo路径下 执行hexo g命令生成public文件夹 把生成的内容全部拷贝到Local path或其子目录 运行GitHub确认修改信息后执行右上角的Sync同步 最后访问主页观察效果 其他指令卸载： 1npm uninstall hexo # 卸载项目所在位置的hexo 1npm uninstall hexo-cli -g # 卸载全局hexo-cli框架 清理掉C盘的相关文件 1npm install -g hexo-cli 测试$发布常用指令1hexo clean # 清除缓存2hexo n # 生成文章3hexo g # 生成public静态文件4hexo d # 发布，手动发布可忽略5hexo s # 本地发布预览效果 最后手动同步更新至GitHub或上传到服务器 下面贴出github上star数量最多的前10个主题 iissnan/hexo-theme-next ， 3510个star。 litten/hexo-theme-yilia ， 1703个star。 TryGhost/Casper ， 679个star。 wuchong/jacman ， 503个star。 A-limon/pacman ， 431个star。 daleanthony/uno ， 416个star。 orderedlist/modernist ， 367个star。 AlxMedia/hueman ， 336个star。 kathyqian/crisp-ghost-theme ， 303个star。 xiangming/landscape-plus ， 287个star。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://xelengo.me/tags/%E9%9A%8F%E7%AC%94/"},{"name":"github","slug":"github","permalink":"https://xelengo.me/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"https://xelengo.me/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"https://xelengo.me/tags/%E5%8D%9A%E5%AE%A2/"}]}]